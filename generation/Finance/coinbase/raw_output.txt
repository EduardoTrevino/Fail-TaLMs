### api.py
```python
import requests
from typing import Optional


def show_current_user(token: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: Get current user's public information. To get user's email or private information, use permissions wallet:user:email and wallet:user:read.
    """
    url = "https://api.coinbase.com/v2/user"
    headers = {
        'Authorization': f'Bearer {token}'
    }
    response = requests.get(url, headers=headers)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def show_authorization_information(token: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: Get current user's authorization information including granted scopes and send limits.
    """
    url = "https://api.coinbase.com/v2/user/auth"
    headers = {
        'Authorization': f'Bearer {token}'
    }
    response = requests.get(url, headers=headers)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def get_fiat_currencies(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: Lists known fiat currencies.
    """
    url = "https://api.coinbase.com/v2/currencies"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def get_cryptocurrencies(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: Lists known cryptocurrencies.
    """
    url = "https://api.coinbase.com/v2/currencies/crypto"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def get_exchange_rates(currency: Optional[str] = "USD", toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: Get current exchange rates. Default base currency is USD.
    Parameters:
      currency [Optional]: string [Description: Base currency]
    """
    url = f"https://api.coinbase.com/v2/exchange-rates"
    params = {'currency': currency}
    response = requests.get(url, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def get_buy_price(currency_pair: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: Get the total price to buy one bitcoin or ether.
    Parameters:
      currency_pair [Required]: string [Description: Currency pair e.g. 'BTC-USD']
    """
    url = f"https://api.coinbase.com/v2/prices/{currency_pair}/buy"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def get_sell_price(currency_pair: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: Get the total price to sell one bitcoin or ether.
    Parameters:
      currency_pair [Required]: string [Description: Currency pair e.g. 'BTC-USD']
    """
    url = f"https://api.coinbase.com/v2/prices/{currency_pair}/sell"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def get_spot_price(currency_pair: str, date: Optional[str] = None, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: Get the current market price for bitcoin or other cryptocurrencies.
    Parameters:
      currency_pair [Required]: string [Description: Currency pair e.g. 'BTC-USD']
      date [Optional]: string [Description: For historic spot price, use format YYYY-MM-DD (UTC)]
    """
    url = f"https://api.coinbase.com/v2/prices/{currency_pair}/spot"
    params = {}
    if date:
        params['date'] = date
    response = requests.get(url, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def get_current_time(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: Get the API server time.
    """
    url = "https://api.coinbase.com/v2/time"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}
```

### api_test.py
```python
import unittest
from api import (
    show_current_user,
    show_authorization_information,
    get_fiat_currencies,
    get_cryptocurrencies,
    get_exchange_rates,
    get_buy_price,
    get_sell_price,
    get_spot_price,
    get_current_time
)

class TestCoinbaseAPI(unittest.TestCase):

    def setUp(self):
        self.token = 'TEST_TOKEN'
        self.currency_pair = 'BTC-USD'

    def test_show_current_user(self):
        response = show_current_user(self.token)
        self.assertIn('data', response)

    def test_show_authorization_information(self):
        response = show_authorization_information(self.token)
        self.assertIn('data', response)

    def test_get_fiat_currencies(self):
        response = get_fiat_currencies()
        self.assertIn('data', response)

    def test_get_cryptocurrencies(self):
        response = get_cryptocurrencies()
        self.assertIn('data', response)

    def test_get_exchange_rates(self):
        response = get_exchange_rates()
        self.assertIn('data', response)

    def test_get_buy_price(self):
        response = get_buy_price(self.currency_pair)
        self.assertIn('data', response)

    def test_get_sell_price(self):
        response = get_sell_price(self.currency_pair)
        self.assertIn('data', response)

    def test_get_spot_price(self):
        response = get_spot_price(self.currency_pair)
        self.assertIn('data', response)

    def test_get_current_time(self):
        response = get_current_time()
        self.assertIn('data', response)

if __name__ == '__main__':
    unittest.main()
```

### coinbase.json
```json
{
    "tool_name": "coinbase",
    "tool_description": "API to access Coinbase's data including user information, currencies, exchange rates, and more.",
    "title": "Coinbase API",
    "pricing": "FREE",
    "score": {
        "avgServiceLevel": 95,
        "avgLatency": 150,
        "avgSuccessRate": 98,
        "popularityScore": 9.5,
        "__typename": "Score"
    },
    "home_url": "https://api.coinbase.com/",
    "host": "api.coinbase.com",
    "api_list": [
        {
            "name": "show_current_user",
            "url": "https://api.coinbase.com/v2/user",
            "description": "Get current user's public information.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "token",
                    "type": "STRING",
                    "description": "Authorization token."
                }
            ],
            "optional_parameters": [],
            "statuscode": 200,
            "body": {
                "id": "string",
                "name": "string",
                "username": "string",
                "profile_location": "string",
                "profile_bio": "string",
                "profile_url": "string",
                "avatar_url": "string",
                "resource": "string",
                "resource_path": "string"
            },
            "headers": {},
            "schema": {}
        },
        {
            "name": "show_authorization_information",
            "url": "https://api.coinbase.com/v2/user/auth",
            "description": "Get current user's authorization information.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "token",
                    "type": "STRING",
                    "description": "Authorization token."
                }
            ],
            "optional_parameters": [],
            "statuscode": 200,
            "body": {
                "method": "string",
                "scopes": ["string"],
                "oauth_meta": "object"
            },
            "headers": {},
            "schema": {}
        },
        {
            "name": "get_fiat_currencies",
            "url": "https://api.coinbase.com/v2/currencies",
            "description": "Lists known fiat currencies.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200,
            "body": {
                "id": "string",
                "name": "string",
                "min_size": "string"
            },
            "headers": {},
            "schema": {}
        },
        {
            "name": "get_cryptocurrencies",
            "url": "https://api.coinbase.com/v2/currencies/crypto",
            "description": "Lists known cryptocurrencies.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200,
            "body": {
                "code": "string",
                "name": "string",
                "color": "string",
                "sort_index": "integer",
                "exponent": "integer",
                "type": "string",
                "address_regex": "string",
                "asset_id": "string"
            },
            "headers": {},
            "schema": {}
        },
        {
            "name": "get_exchange_rates",
            "url": "https://api.coinbase.com/v2/exchange-rates",
            "description": "Get current exchange rates. Default base currency is USD.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "currency",
                    "type": "STRING",
                    "description": "Base currency (default: USD)."
                }
            ],
            "statuscode": 200,
            "body": {
                "currency": "string",
                "rates": {
                    "string": "string"
                }
            },
            "headers": {},
            "schema": {}
        },
        {
            "name": "get_buy_price",
            "url": "https://api.coinbase.com/v2/prices/{currency_pair}/buy",
            "description": "Get the total price to buy one bitcoin or ether.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "currency_pair",
                    "type": "STRING",
                    "description": "Currency pair e.g. 'BTC-USD'."
                }
            ],
            "optional_parameters": [],
            "statuscode": 200,
            "body": {
                "amount": "string",
                "currency": "string"
            },
            "headers": {},
            "schema": {}
        },
        {
            "name": "get_sell_price",
            "url": "https://api.coinbase.com/v2/prices/{currency_pair}/sell",
            "description": "Get the total price to sell one bitcoin or ether.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "currency_pair",
                    "type": "STRING",
                    "description": "Currency pair e.g. 'BTC-USD'."
                }
            ],
            "optional_parameters": [],
            "statuscode": 200,
            "body": {
                "amount": "string",
                "currency": "string"
            },
            "headers": {},
            "schema": {}
        },
        {
            "name": "get_spot_price",
            "url": "https://api.coinbase.com/v2/prices/{currency_pair}/spot",
            "description": "Get the current market price for bitcoin or other cryptocurrencies.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "currency_pair",
                    "type": "STRING",
                    "description": "Currency pair e.g. 'BTC-USD'."
                }
            ],
            "optional_parameters": [
                {
                    "name": "date",
                    "type": "STRING",
                    "description": "For historic spot price, use format YYYY-MM-DD (UTC)."
                }
            ],
            "statuscode": 200,
            "body": {
                "amount": "string",
                "currency": "string"
            },
            "headers": {},
            "schema": {}
        },
        {
            "name": "get_current_time",
            "url": "https://api.coinbase.com/v2/time",
            "description": "Get the API server time.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200,
            "body": {
                "iso": "string",
                "epoch": "integer"
            },
            "headers": {},
            "schema": {}
        }
    ]
}
```