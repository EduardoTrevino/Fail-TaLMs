### api.py
```python
import requests
from typing import Optional, Any, Dict

BASE_URL = "http://www.itis.gov/ITISWebService/services/ITISService/"

def search_for_any_match(srch_key: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff') -> Dict[str, Any]:
    """
    Returns matches found by comparing the search key to the ITIS common names, scientific names, and TSNs.
    """
    url = f"{BASE_URL}searchForAnyMatch"
    params = {'srchKey': srch_key}
    response = requests.get(url, params=params)
    return response.json()

def search_for_any_match_paged(srch_key: str, page_size: int = 100, page_num: int = 1, ascend: bool = True, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff') -> Dict[str, Any]:
    """
    Returns paginated matches found by comparing the search key to the ITIS common names, scientific names, and TSNs.
    """
    url = f"{BASE_URL}searchForAnyMatchPaged"
    params = {
        'srchKey': srch_key,
        'pageSize': page_size,
        'pageNum': page_num,
        'ascend': 'true' if ascend else 'false'
    }
    response = requests.get(url, params=params)
    return response.json()

def get_any_match_count(srch_key: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff') -> int:
    """
    Returns a count of matches found by comparing the search key to the ITIS common names, scientific names, and TSNs.
    """
    url = f"{BASE_URL}getAnyMatchCount"
    params = {'srchKey': srch_key}
    response = requests.get(url, params=params)
    return int(response.text)

def search_by_common_name(srch_key: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff') -> Dict[str, Any]:
    """
    Returns matches found by comparing the search key to the ITIS common names.
    """
    url = f"{BASE_URL}searchByCommonName"
    params = {'srchKey': srch_key}
    response = requests.get(url, params=params)
    return response.json()

def search_by_common_name_begins_with(srch_key: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff') -> Dict[str, Any]:
    """
    Returns matches found by comparing the search key to the beginning of the ITIS common names.
    """
    url = f"{BASE_URL}searchByCommonNameBeginsWith"
    params = {'srchKey': srch_key}
    response = requests.get(url, params=params)
    return response.json()

def search_by_common_name_ends_with(srch_key: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff') -> Dict[str, Any]:
    """
    Returns matches found by comparing the search key to the end of the ITIS common names.
    """
    url = f"{BASE_URL}searchByCommonNameEndsWith"
    params = {'srchKey': srch_key}
    response = requests.get(url, params=params)
    return response.json()

def search_by_scientific_name(srch_key: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff') -> Dict[str, Any]:
    """
    Returns matches found by comparing the search key to the ITIS full Scientific Names.
    """
    url = f"{BASE_URL}searchByScientificName"
    params = {'srchKey': srch_key}
    response = requests.get(url, params=params)
    return response.json()

def get_itis_terms(srch_key: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff') -> Dict[str, Any]:
    """
    Gets a list of ITIS Terms from a common or scientific name match.
    """
    url = f"{BASE_URL}getITISTerms"
    params = {'srchKey': srch_key}
    response = requests.get(url, params=params)
    return response.json()

def get_itis_terms_from_common_name(srch_key: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff') -> Dict[str, Any]:
    """
    Gets a list of ITIS Terms from a common name match.
    """
    url = f"{BASE_URL}getITISTermsFromCommonName"
    params = {'srchKey': srch_key}
    response = requests.get(url, params=params)
    return response.json()

def get_itis_terms_from_scientific_name(srch_key: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff') -> Dict[str, Any]:
    """
    Gets a list of ITIS Terms from a scientific name match.
    """
    url = f"{BASE_URL}getITISTermsFromScientificName"
    params = {'srchKey': srch_key}
    response = requests.get(url, params=params)
    return response.json()

def get_tsn_by_vernacular_language(language: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff') -> Dict[str, Any]:
    """
    Provide a listing of TSNs with vernaculars entered in the requested language.
    """
    url = f"{BASE_URL}getTsnByVernacularLanguage"
    params = {'language': language}
    response = requests.get(url, params=params)
    return response.json()

## Further implementation could continue with all other APIs as needed.
```

### api_test.py
```python
import unittest
from api import (
    search_for_any_match,
    search_for_any_match_paged,
    get_any_match_count,
    search_by_common_name,
    search_by_common_name_begins_with,
    search_by_common_name_ends_with,
    search_by_scientific_name,
    get_itis_terms,
    get_itis_terms_from_common_name,
    get_itis_terms_from_scientific_name,
    get_tsn_by_vernacular_language,
)

class TestITISAPI(unittest.TestCase):

    def test_search_for_any_match(self):
        result = search_for_any_match("dolphin")
        self.assertIsInstance(result, dict)

    def test_search_for_any_match_paged(self):
        result = search_for_any_match_paged("dolphin", 10, 1, True)
        self.assertIsInstance(result, dict)

    def test_get_any_match_count(self):
        count = get_any_match_count("dolphin")
        self.assertIsInstance(count, int)

    def test_search_by_common_name(self):
        result = search_by_common_name("bear")
        self.assertIsInstance(result, dict)

    def test_search_by_common_name_begins_with(self):
        result = search_by_common_name_begins_with("bear")
        self.assertIsInstance(result, dict)

    def test_search_by_common_name_ends_with(self):
        result = search_by_common_name_ends_with("bear")
        self.assertIsInstance(result, dict)

    def test_search_by_scientific_name(self):
        result = search_by_scientific_name("ursus")
        self.assertIsInstance(result, dict)

    def test_get_itis_terms(self):
        result = get_itis_terms("bear")
        self.assertIsInstance(result, dict)

    def test_get_itis_terms_from_common_name(self):
        result = get_itis_terms_from_common_name("bear")
        self.assertIsInstance(result, dict)

    def test_get_itis_terms_from_scientific_name(self):
        result = get_itis_terms_from_scientific_name("ursus")
        self.assertIsInstance(result, dict)

    def test_get_tsn_by_vernacular_language(self):
        result = get_tsn_by_vernacular_language("french")
        self.assertIsInstance(result, dict)


if __name__ == '__main__':
    unittest.main()
```

### itis.json
```json
{
    "tool_name": "itis",
    "tool_description": "The Integrated Taxonomic Information System provides taxonomic and nomenclatural data.",
    "title": "Integrated Taxonomic Information System API",
    "pricing": "FREE",
    "score": {
        "avgServiceLevel": 85,
        "avgLatency": 200,
        "avgSuccessRate": 95,
        "popularityScore": 8.9,
        "__typename": "Score"
    },
    "home_url": "https://www.itis.gov",
    "host": "www.itis.gov",
    "api_list": [
        {
            "name": "search_for_any_match",
            "url": "http://www.itis.gov/ITISWebService/services/ITISService/searchForAnyMatch",
            "description": "Returns matches by comparing the search key to ITIS names and TSNs.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "srchKey",
                    "type": "STRING",
                    "description": "The search key for matching."
                }
            ],
            "optional_parameters": [],
            "statuscode": 200
        },
        {
            "name": "search_for_any_match_paged",
            "url": "http://www.itis.gov/ITISWebService/services/ITISService/searchForAnyMatchPaged",
            "description": "Returns paginated matches by comparing the search key to ITIS names and TSNs.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "srchKey",
                    "type": "STRING",
                    "description": "The search key for matching."
                }
            ],
            "optional_parameters": [
                {
                    "name": "pageSize",
                    "type": "INTEGER",
                    "description": "Number of results per page.",
                    "default": "100"
                },
                {
                    "name": "pageNum",
                    "type": "INTEGER",
                    "description": "Page number to retrieve.",
                    "default": "1"
                },
                {
                    "name": "ascend",
                    "type": "BOOLEAN",
                    "description": "Sort order.",
                    "default": "true"
                }
            ],
            "statuscode": 200
        },
        {
            "name": "get_any_match_count",
            "url": "http://www.itis.gov/ITISWebService/services/ITISService/getAnyMatchCount",
            "description": "Returns a count of the matches for the search key from ITIS names and TSNs.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "srchKey",
                    "type": "STRING",
                    "description": "The search key for counting."
                }
            ],
            "optional_parameters": [],
            "statuscode": 200
        },
        {
            "name": "search_by_common_name",
            "url": "http://www.itis.gov/ITISWebService/services/ITISService/searchByCommonName",
            "description": "Finds matches by comparing the search key to the ITIS common names.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "srchKey",
                    "type": "STRING",
                    "description": "The common name to search."
                }
            ],
            "optional_parameters": [],
            "statuscode": 200
        }
        // Further endpoints can be documented in a similar manner once implemented.
    ]
}
```