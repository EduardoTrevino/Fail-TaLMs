**### api.py**

```python
import requests
from typing import Optional, List


def search(string: str, indexes: Optional[str] = None,
           string_algo: Optional[str] = "wildcard", page: Optional[int] = None,
           sort_field: Optional[str] = None, sort_order: Optional[str] = "asc",
           limit: Optional[int] = 100, filters: Optional[str] = None, 
           toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    General search endpoint for FFXIV game content.
    """
    url = "https://xivapi.com/search"
    params = {
        "string": string,
        "indexes": indexes,
        "string_algo": string_algo,
        "page": page,
        "sort_field": sort_field,
        "sort_order": sort_order,
        "limit": limit,
        "filters": filters,
        "private_key": toolbench_rapidapi_key
    }
    response = requests.get(url, params={k: v for k, v in params.items() if v is not None})
    return response.json()


def get_content(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Retrieve the list of available content.
    """
    url = "https://xivapi.com/content"
    params = {"private_key": toolbench_rapidapi_key}
    response = requests.get(url, params=params)
    return response.json()


def get_item(item_id: int, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Retrieve information about a specific item by ID.
    """
    url = f"https://xivapi.com/item/{item_id}"
    params = {"private_key": toolbench_rapidapi_key}
    response = requests.get(url, params=params)
    return response.json()


def list_servers(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Retrieve a list of servers.
    """
    url = "https://xivapi.com/servers"
    params = {"private_key": toolbench_rapidapi_key}
    response = requests.get(url, params=params)
    return response.json()


def list_servers_data_centers(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Retrieve a list of servers grouped by data centers.
    """
    url = "https://xivapi.com/servers/dc"
    params = {"private_key": toolbench_rapidapi_key}
    response = requests.get(url, params=params)
    return response.json()


def character_search(name: str, server: Optional[str] = None, page: Optional[int] = 1,
                     toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Search for a character by name.
    """
    url = "https://xivapi.com/character/search"
    params = {
        "name": name,
        "server": server,
        "page": page,
        "private_key": toolbench_rapidapi_key
    }
    response = requests.get(url, params={k: v for k, v in params.items() if v is not None})
    return response.json()


def get_character(lodestone_id: int, extended: Optional[int] = 0,
                  data: Optional[str] = None, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Get detailed data about a character by Lodestone ID.
    """
    url = f"https://xivapi.com/character/{lodestone_id}"
    params = {
        "extended": extended,
        "data": data,
        "private_key": toolbench_rapidapi_key
    }
    response = requests.get(url, params={k: v for k, v in params.items() if v is not None})
    return response.json()


def freecompany_search(name: str, server: Optional[str] = None, page: Optional[int] = 1,
                       toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Search for a Free Company by name.
    """
    url = "https://xivapi.com/freecompany/search"
    params = {
        "name": name,
        "server": server,
        "page": page,
        "private_key": toolbench_rapidapi_key
    }
    response = requests.get(url, params={k: v for k, v in params.items() if v is not None})
    return response.json()


def get_freecompany(lodestone_id: int, extended: Optional[int] = 0,
                    data: Optional[str] = None, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Get detailed data about a Free Company by Lodestone ID.
    """
    url = f"https://xivapi.com/freecompany/{lodestone_id}"
    params = {
        "extended": extended,
        "data": data,
        "private_key": toolbench_rapidapi_key
    }
    response = requests.get(url, params={k: v for k, v in params.items() if v is not None})
    return response.json()


def linkshell_search(name: str, server: Optional[str] = None, page: Optional[int] = 1,
                     toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Search for a Linkshell by name.
    """
    url = "https://xivapi.com/linkshell/search"
    params = {
        "name": name,
        "server": server,
        "page": page,
        "private_key": toolbench_rapidapi_key
    }
    response = requests.get(url, params={k: v for k, v in params.items() if v is not None})
    return response.json()


def linkshell_crossworld_search(name: str, page: Optional[int] = 1,
                               toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Search for a cross-world Linkshell by name.
    """
    url = "https://xivapi.com/linkshell/crossworld/search"
    params = {
        "name": name,
        "page": page,
        "private_key": toolbench_rapidapi_key
    }
    response = requests.get(url, params={k: v for k, v in params.items() if v is not None})
    return response.json()
```

**### api_test.py**

```python
import unittest
from api import *

class TestXivApi(unittest.TestCase):
    def setUp(self):
        self.api_key = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'

    def test_search(self):
        response = search(string="aiming", toolbench_rapidapi_key=self.api_key)
        self.assertIn('Results', response)

    def test_get_content(self):
        response = get_content(toolbench_rapidapi_key=self.api_key)
        self.assertIn('content', response)

    def test_get_item(self):
        response = get_item(item_id=1675, toolbench_rapidapi_key=self.api_key)
        self.assertIn('ID', response)
        self.assertEqual(response['ID'], 1675)

    def test_list_servers(self):
        response = list_servers(toolbench_rapidapi_key=self.api_key)
        self.assertIsInstance(response, list)

    def test_list_servers_data_centers(self):
        response = list_servers_data_centers(toolbench_rapidapi_key=self.api_key)
        self.assertIsInstance(response, dict)

    def test_character_search(self):
        response = character_search(name="Sora Amity", server="Adamantoise", toolbench_rapidapi_key=self.api_key)
        self.assertIn('Results', response)

    def test_get_character(self):
        response = get_character(lodestone_id=730968, toolbench_rapidapi_key=self.api_key)
        self.assertIn('Character', response)

    def test_freecompany_search(self):
        response = freecompany_search(name="Knights of the Round", toolbench_rapidapi_key=self.api_key)
        self.assertIn('Results', response)

    def test_get_freecompany(self):
        response = get_freecompany(lodestone_id=9231253336202687179, toolbench_rapidapi_key=self.api_key)
        self.assertIn('FreeCompany', response)

    def test_linkshell_search(self):
        response = linkshell_search(name="Echo", toolbench_rapidapi_key=self.api_key)
        self.assertIn('Results', response)

    def test_linkshell_crossworld_search(self):
        response = linkshell_crossworld_search(name="Echo", toolbench_rapidapi_key=self.api_key)
        self.assertIn('Results', response)

if __name__ == '__main__':
    unittest.main()
```

**### xivapi.json**

```json
{
    "tool_name": "xivapi",
    "tool_description": "XIVAPI provides a massive amount of FINAL FANTASY XIV game data in JSON format via a REST API.",
    "title": "FINAL FANTASY XIV API",
    "pricing": "FREE",
    "score": {
        "avgServiceLevel": 95,
        "avgLatency": 300,
        "avgSuccessRate": 97,
        "popularityScore": 9.0,
        "__typename": "Score"
    },
    "home_url": "https://xivapi.com",
    "host": "xivapi.com",
    "api_list": [
        {
            "name": "search",
            "url": "https://xivapi.com/search",
            "description": "Search endpoint for various types of game content.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "string",
                    "type": "STRING",
                    "description": "The string to search for."
                }
            ],
            "optional_parameters": [
                {
                    "name": "indexes",
                    "type": "STRING",
                    "description": "Comma-separated list of indexes to search."
                },
                {
                    "name": "string_algo",
                    "type": "STRING",
                    "description": "String matching algorithm, default is 'wildcard'."
                },
                {
                    "name": "page",
                    "type": "INTEGER",
                    "description": "Page number for pagination."
                },
                {
                    "name": "sort_field",
                    "type": "STRING",
                    "description": "Field to sort by."
                },
                {
                    "name": "sort_order",
                    "type": "STRING",
                    "description": "Sort order, either 'asc' or 'desc'."
                },
                {
                    "name": "limit",
                    "type": "INTEGER",
                    "description": "Limit the number of results."
                }
            ],
            "statuscode": 200,
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "Pagination": {
                        "type": "object"
                    },
                    "Results": {
                        "type": "array"
                    }
                }
            }
        },
        {
            "name": "get_content",
            "url": "https://xivapi.com/content",
            "description": "Retrieve the list of available content.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200,
            "headers": {}
        },
        {
            "name": "get_item",
            "url": "https://xivapi.com/item/{item_id}",
            "description": "Get information about a specific item by ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "item_id",
                    "type": "INTEGER",
                    "description": "Item ID to retrieve information for."
                }
            ],
            "optional_parameters": [],
            "statuscode": 200,
            "headers": {}
        },
        {
            "name": "list_servers",
            "url": "https://xivapi.com/servers",
            "description": "Retrieve a list of all servers.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200,
            "headers": {}
        },
        {
            "name": "list_servers_data_centers",
            "url": "https://xivapi.com/servers/dc",
            "description": "Retrieve a list of servers grouped by data centers.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200,
            "headers": {}
        },
        {
            "name": "character_search",
            "url": "https://xivapi.com/character/search",
            "description": "Search for a character by name.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "name",
                    "type": "STRING",
                    "description": "Character name to search for."
                }
            ],
            "optional_parameters": [
                {
                    "name": "server",
                    "type": "STRING",
                    "description": "Server name to narrow down search."
                },
                {
                    "name": "page",
                    "type": "INTEGER",
                    "description": "Page number for pagination."
                }
            ],
            "statuscode": 200,
            "headers": {}
        },
        {
            "name": "get_character",
            "url": "https://xivapi.com/character/{lodestone_id}",
            "description": "Get detailed data about a character by Lodestone ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "lodestone_id",
                    "type": "INTEGER",
                    "description": "Lodestone ID of character."
                }
            ],
            "optional_parameters": [
                {
                    "name": "extended",
                    "type": "INTEGER",
                    "description": "Return extended data if set."
                },
                {
                    "name": "data",
                    "type": "STRING",
                    "description": "Additional data sets to include."
                }
            ],
            "statuscode": 200,
            "headers": {}
        },
        {
            "name": "freecompany_search",
            "url": "https://xivapi.com/freecompany/search",
            "description": "Search for a Free Company by name.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "name",
                    "type": "STRING",
                    "description": "Name of the Free Company."
                }
            ],
            "optional_parameters": [
                {
                    "name": "server",
                    "type": "STRING",
                    "description": "Server to search within."
                },
                {
                    "name": "page",
                    "type": "INTEGER",
                    "description": "Page number for pagination."
                }
            ],
            "statuscode": 200,
            "headers": {}
        },
        {
            "name": "get_freecompany",
            "url": "https://xivapi.com/freecompany/{lodestone_id}",
            "description": "Get detailed data about a Free Company by Lodestone ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "lodestone_id",
                    "type": "INTEGER",
                    "description": "Lodestone ID of Free Company."
                }
            ],
            "optional_parameters": [
                {
                    "name": "extended",
                    "type": "INTEGER",
                    "description": "Return extended data if set."
                },
                {
                    "name": "data",
                    "type": "STRING",
                    "description": "Additional data sets to include."
                }
            ],
            "statuscode": 200,
            "headers": {}
        },
        {
            "name": "linkshell_search",
            "url": "https://xivapi.com/linkshell/search",
            "description": "Search for a Linkshell by name.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "name",
                    "type": "STRING",
                    "description": "Name of the Linkshell to search for."
                }
            ],
            "optional_parameters": [
                {
                    "name": "server",
                    "type": "STRING",
                    "description": "Server to narrow down search."
                },
                {
                    "name": "page",
                    "type": "INTEGER",
                    "description": "Page number for pagination."
                }
            ],
            "statuscode": 200,
            "headers": {}
        },
        {
            "name": "linkshell_crossworld_search",
            "url": "https://xivapi.com/linkshell/crossworld/search",
            "description": "Search for a cross-world Linkshell by name.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "name",
                    "type": "STRING",
                    "description": "Name of the cross-world Linkshell to search for."
                }
            ],
            "optional_parameters": [
                {
                    "name": "page",
                    "type": "INTEGER",
                    "description": "Page number for pagination."
                }
            ],
            "statuscode": 200,
            "headers": {}
        }
    ]
}
```
