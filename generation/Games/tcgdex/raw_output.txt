### api.py
```python
import requests
from typing import Optional

def get_card(card_id: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Retrieve information about a single card by its ID.
    """
    url = f"https://api.tcgdex.net/v2/en/cards/{card_id}"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def search_cards(name: Optional[str] = None, sort_field: Optional[str] = None, sort_order: Optional[str] = 'ASC', 
                 page: Optional[int] = 1, items_per_page: Optional[int] = 100, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Search for cards based on various filters and sorting options.
    """
    url = "https://api.tcgdex.net/v2/en/cards"
    params = {
        'name': name,
        'sort:field': sort_field,
        'sort:order': sort_order,
        'pagination:page': page,
        'pagination:itemsPerPage': items_per_page
    }
    response = requests.get(url, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def get_set(set_id: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Retrieve information about a specific set by its ID.
    """
    url = f"https://api.tcgdex.net/v2/en/sets/{set_id}"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def search_sets(sort_field: Optional[str] = None, sort_order: Optional[str] = 'ASC', 
                page: Optional[int] = 1, items_per_page: Optional[int] = 100, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Search for sets and apply sorting and pagination.
    """
    url = "https://api.tcgdex.net/v2/en/sets"
    params = {
        'sort:field': sort_field,
        'sort:order': sort_order,
        'pagination:page': page,
        'pagination:itemsPerPage': items_per_page
    }
    response = requests.get(url, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def get_series(series_id: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Get a single series by ID.
    """
    url = f"https://api.tcgdex.net/v2/en/series/{series_id}"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def search_series(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Search for series.
    """
    url = "https://api.tcgdex.net/v2/en/series"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def list_categories(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    List different card categories.
    """
    url = "https://api.tcgdex.net/v2/en/categories"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def list_hps(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    List available HPs.
    """
    url = "https://api.tcgdex.net/v2/en/hps"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def list_illustrators(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    List different card illustrators.
    """
    url = "https://api.tcgdex.net/v2/en/illustrators"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def list_rarities(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    List different card rarities.
    """
    url = "https://api.tcgdex.net/v2/en/rarities"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def list_retreats(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    List different Pokémon retreat costs.
    """
    url = "https://api.tcgdex.net/v2/en/retreats"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def list_types(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    List different Pokémon types.
    """
    url = "https://api.tcgdex.net/v2/en/types"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}
```

### api_test.py
```python
import unittest
from api import (
    get_card, search_cards, get_set, search_sets, get_series, search_series,
    list_categories, list_hps, list_illustrators, list_rarities,
    list_retreats, list_types
)

class TestTCGdexAPI(unittest.TestCase):

    def test_get_card(self):
        response = get_card('swsh3-136')
        self.assertIn('name', response)
        self.assertEqual(response['name'], "Furret")

    def test_search_cards(self):
        response = search_cards(name='Alakazam')
        self.assertIsInstance(response, list)
        if response:
            self.assertIn('name', response[0])
            self.assertEqual(response[0]['name'], "Alakazam")

    def test_get_set(self):
        response = get_set('swsh3')
        self.assertIn('name', response)
        self.assertEqual(response['name'], "Darkness Ablaze")

    def test_search_sets(self):
        response = search_sets()
        self.assertIsInstance(response, list)
        if response:
            self.assertIn('name', response[0])

    def test_get_series(self):
        response = get_series('swsh')
        self.assertIn('name', response)
        self.assertEqual(response['name'], "Sword & Shield")

    def test_search_series(self):
        response = search_series()
        self.assertIsInstance(response, list)
        if response:
            self.assertIn('name', response[0])

    def test_list_categories(self):
        response = list_categories()
        self.assertIsInstance(response, list)

    def test_list_hps(self):
        response = list_hps()
        self.assertIsInstance(response, list)

    def test_list_illustrators(self):
        response = list_illustrators()
        self.assertIsInstance(response, list)

    def test_list_rarities(self):
        response = list_rarities()
        self.assertIsInstance(response, list)

    def test_list_retreats(self):
        response = list_retreats()
        self.assertIsInstance(response, list)

    def test_list_types(self):
        response = list_types()
        self.assertIsInstance(response, list)

if __name__ == '__main__':
    unittest.main()
```

### tcgdex.json
```json
{
    "tool_name": "tcgdex",
    "tool_description": "API for accessing data of Pokemon Trading Card Game including cards, sets, and series.",
    "title": "TCGDex API",
    "pricing": "FREE",
    "score": {},
    "home_url": "https://api.tcgdex.net",
    "host": "api.tcgdex.net",
    "api_list": [
        {
            "name": "get_card",
            "url": "https://api.tcgdex.net/v2/en/cards/{card_id}",
            "description": "Retrieve information about a single card by its ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "card_id",
                    "type": "STRING",
                    "description": "The ID of the card."
                }
            ],
            "optional_parameters": []
        },
        {
            "name": "search_cards",
            "url": "https://api.tcgdex.net/v2/en/cards",
            "description": "Search for cards based on filters and sorting.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "name",
                    "type": "STRING",
                    "description": "Name of the card."
                },
                {
                    "name": "sort_field",
                    "type": "STRING",
                    "description": "Field to sort by."
                },
                {
                    "name": "sort_order",
                    "type": "STRING",
                    "description": "Order of sorting.",
                    "default": "ASC"
                },
                {
                    "name": "page",
                    "type": "INTEGER",
                    "description": "Page number for pagination.",
                    "default": 1
                },
                {
                    "name": "items_per_page",
                    "type": "INTEGER",
                    "description": "Number of items per page.",
                    "default": 100
                }
            ]
        },
        {
            "name": "get_set",
            "url": "https://api.tcgdex.net/v2/en/sets/{set_id}",
            "description": "Retrieve information about a specific set by its ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "set_id",
                    "type": "STRING",
                    "description": "The ID of the set."
                }
            ],
            "optional_parameters": []
        },
        {
            "name": "search_sets",
            "url": "https://api.tcgdex.net/v2/en/sets",
            "description": "Search for sets and apply sorting and pagination.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "sort_field",
                    "type": "STRING",
                    "description": "Field to sort by."
                },
                {
                    "name": "sort_order",
                    "type": "STRING",
                    "description": "Order of sorting.",
                    "default": "ASC"
                },
                {
                    "name": "page",
                    "type": "INTEGER",
                    "description": "Page number for pagination.",
                    "default": 1
                },
                {
                    "name": "items_per_page",
                    "type": "INTEGER",
                    "description": "Number of items per page.",
                    "default": 100
                }
            ]
        },
        {
            "name": "get_series",
            "url": "https://api.tcgdex.net/v2/en/series/{series_id}",
            "description": "Get a single series by ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "series_id",
                    "type": "STRING",
                    "description": "The ID of the series."
                }
            ],
            "optional_parameters": []
        },
        {
            "name": "search_series",
            "url": "https://api.tcgdex.net/v2/en/series",
            "description": "Search for series.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": []
        },
        {
            "name": "list_categories",
            "url": "https://api.tcgdex.net/v2/en/categories",
            "description": "List different card categories.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": []
        },
        {
            "name": "list_hps",
            "url": "https://api.tcgdex.net/v2/en/hps",
            "description": "List available HPs.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": []
        },
        {
            "name": "list_illustrators",
            "url": "https://api.tcgdex.net/v2/en/illustrators",
            "description": "List different card illustrators.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": []
        },
        {
            "name": "list_rarities",
            "url": "https://api.tcgdex.net/v2/en/rarities",
            "description": "List different card rarities.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": []
        },
        {
            "name": "list_retreats",
            "url": "https://api.tcgdex.net/v2/en/retreats",
            "description": "List different Pokémon retreat costs.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": []
        },
        {
            "name": "list_types",
            "url": "https://api.tcgdex.net/v2/en/types",
            "description": "List different Pokémon types.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": []
        }
    ]
}
```