### api.py
```python
import requests
from typing import Optional, List


def get_cards(name: Optional[str] = None, supertype: Optional[str] = None, types: Optional[List[str]] = None, hp: Optional[str] = None, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: Retrieve all cards, or filter them by name, supertype, types, and hp.
    
    Parameters:
    name [Optional]: string [Description: The name of the card to filter by.]
    supertype [Optional]: string [Description: The supertype of the card, such as Pokémon, Energy, or Trainer.]
    types [Optional]: list of strings [Description: The energy types for a card, such as Fire, Water, Grass, etc.]
    hp [Optional]: string [Description: The hit points of the card to filter by.]
    """
    url = "https://api.pokemontcg.io/v2/cards"
    params = {
        'name': name,
        'supertype': supertype,
        'types': types,
        'hp': hp
    }
    
    headers = {
        "X-RapidAPI-Key": toolbench_rapidapi_key
    }
    
    response = requests.get(url, headers=headers, params={key: value for key, value in params.items() if value is not None})
    
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def get_sets(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: Retrieve a list of all available sets in the Pokémon TCG.
    """
    url = "https://api.pokemontcg.io/v2/sets"
    
    headers = {
        "X-RapidAPI-Key": toolbench_rapidapi_key
    }
    
    response = requests.get(url, headers=headers)
    
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def get_card_by_id(card_id: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: Retrieve a specific card by its unique ID.
    
    Parameters:
    card_id [Required]: string [Description: The unique identifier for the specific card.]
    """
    url = f"https://api.pokemontcg.io/v2/cards/{card_id}"
    
    headers = {
        "X-RapidAPI-Key": toolbench_rapidapi_key
    }
    
    response = requests.get(url, headers=headers)
    
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}
```

### api_test.py
```python
import unittest
from api import get_cards, get_sets, get_card_by_id

class TestPokemonTCGAPI(unittest.TestCase):

    def test_get_cards(self):
        response = get_cards(name='Charizard')
        self.assertIn('data', response)  # Check if 'data' key is in the response
        self.assertIsInstance(response['data'], list)  # Ensure the list of cards

    def test_get_sets(self):
        response = get_sets()
        self.assertIn('data', response)  # Check if 'data' key is in the response
        self.assertIsInstance(response['data'], list)  # Ensure the list of sets

    def test_get_card_by_id(self):
        card_id = "xy7-54"  # Example card ID for testing
        response = get_card_by_id(card_id)
        self.assertIn('data', response)  # Check if 'data' key is in the response
        self.assertIsInstance(response['data'], dict)  # Ensure individual card returned as dict

if __name__ == '__main__':
    unittest.main()
```

### pokemontcg.json
```json
{
    "tool_name": "pokemontcg",
    "tool_description": "API to access a wealth of data about the Pokémon TCG, including cards, sets, and more.",
    "title": "Pokémon TCG API",
    "pricing": "FREE with rate limits for non-authenticated requests or authenticated with higher limits.",
    "score": {
        "avgServiceLevel": 95,
        "avgLatency": 150,
        "avgSuccessRate": 98,
        "popularityScore": 9.5,
        "__typename": "Score"
    },
    "home_url": "https://docs.pokemontcg.io/",
    "host": "api.pokemontcg.io",
    "api_list": [
        {
            "name": "get_cards",
            "url": "https://api.pokemontcg.io/v2/cards",
            "description": "Retrieve all cards, or filter them by name, supertype, types, and hp.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "name",
                    "type": "STRING",
                    "description": "The name of the card to filter by.",
                    "default": "None"
                },
                {
                    "name": "supertype",
                    "type": "STRING",
                    "description": "The supertype of the card, such as Pokémon, Energy, or Trainer.",
                    "default": "None"
                },
                {
                    "name": "types",
                    "type": "LIST",
                    "description": "The energy types for a card, such as Fire, Water, Grass, etc.",
                    "default": "None"
                },
                {
                    "name": "hp",
                    "type": "STRING",
                    "description": "The hit points of the card to filter by.",
                    "default": "None"
                }
            ],
            "statuscode": 200,
            "body": {
                "data": [
                    {
                        "id": "string",
                        "name": "string",
                        "supertype": "string",
                        "subtypes": [
                            "string"
                        ],
                        "hp": "string",
                        "types": [
                            "string"
                        ],
                        // ... Other fields according to the card object schema
                    }
                ]
            }
        },
        {
            "name": "get_sets",
            "url": "https://api.pokemontcg.io/v2/sets",
            "description": "Retrieve a list of all available sets in the Pokémon TCG.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200,
            "body": {
                "data": [
                    {
                        "id": "string",
                        "name": "string",
                        "series": "string",
                        "total": "integer",
                        // ... Other fields according to the set object schema
                    }
                ]
            }
        },
        {
            "name": "get_card_by_id",
            "url": "https://api.pokemontcg.io/v2/cards/{card_id}",
            "description": "Retrieve a specific card by its unique ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "card_id",
                    "type": "STRING",
                    "description": "The unique identifier for the specific card."
                }
            ],
            "optional_parameters": [],
            "statuscode": 200,
            "body": {
                "data": {
                    "id": "string",
                    "name": "string",
                    "supertype": "string",
                    // ... Other fields according to the card object schema
                }
            }
        }
    ]
}
```