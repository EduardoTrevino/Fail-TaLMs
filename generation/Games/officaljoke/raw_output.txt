### api.py
```python
import requests
from typing import Optional, List


def grab_random_joke(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: Grab a random joke.
    """
    url = "https://official-joke-api.appspot.com/random_joke"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def grab_random_joke_v2(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: Grab a random joke (alternate endpoint).
    """
    url = "https://official-joke-api.appspot.com/jokes/random"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def get_joke_types(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: Get available joke types.
    """
    url = "https://official-joke-api.appspot.com/types"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def grab_ten_random_jokes(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: Grab ten random jokes.
    """
    url = "https://official-joke-api.appspot.com/random_ten"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def grab_ten_random_jokes_v2(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: Grab ten random jokes (alternate endpoint).
    """
    url = "https://official-joke-api.appspot.com/jokes/ten"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def grab_any_number_of_random_jokes(number: int = 1, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: Grab any number of random jokes.
    Parameters:
     number [Optional]: integer [Description: Number of jokes to fetch.]
    """
    url = f"https://official-joke-api.appspot.com/jokes/random/{number}"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def grab_jokes_by_type(type: str, number: int = 1, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: Grab jokes by type.
    Parameters:
     type [Required]: string [Description: Type of jokes to fetch.]
     number [Optional]: integer [Description: Number of jokes to fetch (1 for 'random', others for 'ten').]
    """
    url = f"https://official-joke-api.appspot.com/jokes/{type}/{number if number != 1 else 'random'}"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def grab_joke_by_id(joke_id: int, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: Grab joke by ID.
    Parameters:
     joke_id [Required]: integer [Description: ID of the joke to fetch.]
    """
    url = f"https://official-joke-api.appspot.com/jokes/{joke_id}"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}
```

### api_test.py
```python
import unittest
from api import (
    grab_random_joke, grab_random_joke_v2, get_joke_types, grab_ten_random_jokes, 
    grab_ten_random_jokes_v2, grab_any_number_of_random_jokes, grab_jokes_by_type, grab_joke_by_id
)


class TestOfficialJokeAPI(unittest.TestCase):

    def test_grab_random_joke(self):
        response = grab_random_joke()
        self.assertIn('setup', response)
        self.assertIn('punchline', response)

    def test_grab_random_joke_v2(self):
        response = grab_random_joke_v2()
        self.assertIn('setup', response)
        self.assertIn('punchline', response)

    def test_get_joke_types(self):
        types = get_joke_types()
        self.assertIsInstance(types, list)

    def test_grab_ten_random_jokes(self):
        jokes = grab_ten_random_jokes()
        self.assertEqual(len(jokes), 10)

    def test_grab_ten_random_jokes_v2(self):
        jokes = grab_ten_random_jokes_v2()
        self.assertEqual(len(jokes), 10)

    def test_grab_any_number_of_random_jokes(self):
        jokes = grab_any_number_of_random_jokes(5)
        self.assertEqual(len(jokes), 5)

    def test_grab_jokes_by_type(self):
        jokes = grab_jokes_by_type('programming', 5)
        self.assertGreaterEqual(len(jokes), 1)
        self.assertTrue(all(joke['type'] == 'programming' for joke in jokes))

    def test_grab_joke_by_id(self):
        joke = grab_joke_by_id(1)
        self.assertIn('setup', joke)
        self.assertIn('punchline', joke)


if __name__ == '__main__':
    unittest.main()
```

### officaljoke.json
```json
{
    "tool_name": "officaljoke",
    "tool_description": "API to fetch random jokes of various types, suitable for developers and light-hearted applications.",
    "title": "Official Joke API",
    "pricing": "FREE",
    "score": {
        "avgServiceLevel": 95,
        "avgLatency": 100,
        "avgSuccessRate": 99,
        "popularityScore": 9.2,
        "__typename": "Score"
    },
    "home_url": "https://official-joke-api.appspot.com",
    "host": "official-joke-api.appspot.com",
    "api_list": [
        {
            "name": "grab_random_joke",
            "url": "https://official-joke-api.appspot.com/random_joke",
            "description": "Grab a random joke.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200
        },
        {
            "name": "grab_random_joke_v2",
            "url": "https://official-joke-api.appspot.com/jokes/random",
            "description": "Grab a random joke (alternate endpoint).",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200
        },
        {
            "name": "get_joke_types",
            "url": "https://official-joke-api.appspot.com/types",
            "description": "Get available joke types.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200
        },
        {
            "name": "grab_ten_random_jokes",
            "url": "https://official-joke-api.appspot.com/random_ten",
            "description": "Grab ten random jokes.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200
        },
        {
            "name": "grab_ten_random_jokes_v2",
            "url": "https://official-joke-api.appspot.com/jokes/ten",
            "description": "Grab ten random jokes (alternate endpoint).",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200
        },
        {
            "name": "grab_any_number_of_random_jokes",
            "url": "https://official-joke-api.appspot.com/jokes/random/{any-number}",
            "description": "Grab any number of random jokes.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "number",
                    "type": "INTEGER",
                    "description": "Number of jokes to fetch.",
                    "default": 1
                }
            ],
            "optional_parameters": [],
            "statuscode": 200
        },
        {
            "name": "grab_jokes_by_type",
            "url": "https://official-joke-api.appspot.com/jokes/{type}/{random|ten}",
            "description": "Grab jokes by type.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "type",
                    "type": "STRING",
                    "description": "Type of jokes to fetch."
                }
            ],
            "optional_parameters": [
                {
                    "name": "number",
                    "type": "INTEGER",
                    "description": "Number of jokes to fetch (1 for 'random', others for 'ten').",
                    "default": 1
                }
            ],
            "statuscode": 200
        },
        {
            "name": "grab_joke_by_id",
            "url": "https://official-joke-api.appspot.com/jokes/{id}",
            "description": "Grab joke by ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "joke_id",
                    "type": "INTEGER",
                    "description": "ID of the joke to fetch."
                }
            ],
            "optional_parameters": [],
            "statuscode": 200
        }
    ]
}
```