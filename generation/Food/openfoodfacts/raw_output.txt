Sure! Below are the requested Python files and corresponding JSON files based on the provided documentation for the Open Food Facts API.

### `api.py`

```python
import requests
from typing import Optional


def get_product_by_barcode(barcode: str, fields: Optional[str] = None, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Get product details by barcode.
    
    Parameters:
    barcode [Required]: string [Description: The barcode number of the product]
    fields [Optional]: string [Description: Fields to be returned in the response]
    """
    base_url = "https://world.openfoodfacts.org/api/v2/product"
    url = f"{base_url}/{barcode}.json"
    params = {}
    if fields:
        params['fields'] = fields

    headers = {
        'User-Agent': 'OpenFoodFactsApp/1.0 (myapp@example.com)'
    }

    response = requests.get(url, params=params, headers=headers)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def search_products(nutrition_grades_tags: Optional[str] = None, categories_tags_en: Optional[str] = None, fields: Optional[str] = None, sort_by: Optional[str] = None, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Search products by various criteria.
    
    Parameters:
    nutrition_grades_tags [Optional]: string [Description: Filter products by nutrition grades]
    categories_tags_en [Optional]: string [Description: Filter products by category]
    fields [Optional]: string [Description: Fields to be returned in the response]
    sort_by [Optional]: string [Description: Field to sort the response]
    """
    url = "https://world.openfoodfacts.org/api/v2/search"
    params = {}
    if nutrition_grades_tags:
        params['nutrition_grades_tags'] = nutrition_grades_tags
    if categories_tags_en:
        params['categories_tags_en'] = categories_tags_en
    if fields:
        params['fields'] = fields
    if sort_by:
        params['sort_by'] = sort_by

    response = requests.get(url, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}
```

### `api_test.py`

```python
import unittest
from api import get_product_by_barcode, search_products


class TestOpenFoodFactsAPI(unittest.TestCase):

    def test_get_product_by_barcode(self):
        result = get_product_by_barcode('737628064502')
        self.assertIn('product', result)
        self.assertIn('status', result)
        self.assertEqual(result['status_verbose'], "product found")

    def test_search_products(self):
        result = search_products(nutrition_grades_tags='c', categories_tags_en='Orange Juice')
        self.assertIn('products', result)
        self.assertIn('count', result)

    def test_get_product_by_barcode_with_fields(self):
        result = get_product_by_barcode('737628064502', fields="product_name,nutrition_grades")
        self.assertIn('product', result)
        self.assertIn('status', result)
        self.assertIn('nutrition_grades', result['product'])
        self.assertIn('product_name', result['product'])

    def test_search_products_with_sorting(self):
        result = search_products(categories_tags_en='Orange Juice', nutrition_grades_tags='c', sort_by='last_modified_t')
        self.assertIn('products', result)
        self.assertIn('count', result)
        self.assertGreater(len(result['products']), 0)

if __name__ == '__main__':
    unittest.main()
```

### `openfoodfacts.json`

```json
{
    "tool_name": "openfoodfacts",
    "tool_description": "API to access Open Food Facts database which contains information about food products, ingredients, nutritional values, and more.",
    "title": "Open Food Facts API",
    "pricing": "FREE",
    "score": {
        "avgServiceLevel": 98,
        "avgLatency": 100,
        "avgSuccessRate": 99,
        "popularityScore": 9.7,
        "__typename": "Score"
    },
    "home_url": "https://world.openfoodfacts.org/data",
    "host": "world.openfoodfacts.org",
    "api_list": [
        {
            "name": "get_product_by_barcode",
            "url": "https://world.openfoodfacts.org/api/v2/product/{barcode}.json",
            "description": "Get detailed information about a product by its barcode.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "barcode",
                    "type": "STRING",
                    "description": "The barcode number of the product to retrieve.",
                    "default": "3017624010701"
                }
            ],
            "optional_parameters": [
                {
                    "name": "fields",
                    "type": "STRING",
                    "description": "Fields to be returned in the response.",
                    "default": ""
                }
            ],
            "code": "import requests\n\nurl = 'https://world.openfoodfacts.org/api/v2/product/3017624010701.json'\nresponse = requests.get(url)\nprint(response.json())",
            "statuscode": 200,
            "body": {
                "code": "str",
                "product": {
                    "nutrition_grades": "str",
                    "product_name": "str"
                },
                "status_verbose": "str",
                "status": "int"
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "code": {"type": "string"},
                    "product": {"type": "object"},
                    "status_verbose": {"type": "string"},
                    "status": {"type": "integer"}
                }
            }
        },
        {
            "name": "search_products",
            "url": "https://world.openfoodfacts.org/api/v2/search",
            "description": "Search for products based on different criteria such as nutrition grade and category.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "nutrition_grades_tags",
                    "type": "STRING",
                    "description": "Filter products by nutrition grades.",
                    "default": "c"
                },
                {
                    "name": "categories_tags_en",
                    "type": "STRING",
                    "description": "Filter products by category.",
                    "default": "Orange Juice"
                },
                {
                    "name": "fields",
                    "type": "STRING",
                    "description": "Fields to be returned in the response.",
                    "default": "code,product_name,nutrition_grades"
                },
                {
                    "name": "sort_by",
                    "type": "STRING",
                    "description": "Field to sort the response by.",
                    "default": "last_modified_t"
                }
            ],
            "code": "import requests\n\nurl = 'https://world.openfoodfacts.org/api/v2/search'\nparams = {'nutrition_grades_tags': 'c', 'categories_tags_en': 'Orange Juice'}\nresponse = requests.get(url, params=params)\nprint(response.json())",
            "statuscode": 200,
            "body": {
                "count": "int",
                "products": [
                    {
                        "code": "str",
                        "nutrition_grades": "str",
                        "categories_tags_en": ["str"]
                    }
                ]
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "count": {"type": "integer"},
                    "products": {"type": "array"}
                }
            }
        }
    ]
}
```