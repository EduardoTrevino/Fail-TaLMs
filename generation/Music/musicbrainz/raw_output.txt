### api.py
```python
import requests
from typing import Optional

BASE_URL = "https://musicbrainz.org/ws/2/"
HEADERS = {'User-Agent': 'MyMusicApp/1.0'}

def artist_search(query: str, limit: Optional[int] = 25, offset: Optional[int] = 0, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Search for artists by name.
    Parameters:
    query (str): The search query for the artist name.
    limit (Optional[int]): The maximum number of results to return (default 25).
    offset (Optional[int]): The number of results to skip (default 0).
    """
    url = f"{BASE_URL}artist"
    params = {
        'query': query,
        'limit': limit,
        'offset': offset,
        'fmt': 'json'
    }
    response = requests.get(url, headers=HEADERS, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def release_lookup(mbid: str, inc: Optional[str] = None, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Lookup a release by its MBID.
    Parameters:
    mbid (str): The MusicBrainz Identifier for the release.
    inc (Optional[str]): Include additional information, such as artists or recordings (separated by +).
    """
    url = f"{BASE_URL}release/{mbid}"
    params = {
        'fmt': 'json'
    }
    if inc:
        params['inc'] = inc

    response = requests.get(url, headers=HEADERS, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def release_group_browse(artist_mbid: str, limit: Optional[int] = 25, offset: Optional[int] = 0, type: Optional[str] = None, status: Optional[str] = None, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Browse release groups for a given artist MBID.
    Parameters:
    artist_mbid (str): The MBID for the artist.
    limit (Optional[int]): The maximum number of results to return (default 25).
    offset (Optional[int]): The number of results to skip (default 0).
    type (Optional[str]): Filter release groups by type (e.g., album, single).
    status (Optional[str]): Filter releases by status (e.g., official, promotion).
    """
    url = f"{BASE_URL}release-group"
    params = {
        'artist': artist_mbid,
        'limit': limit,
        'offset': offset,
        'fmt': 'json'
    }
    if type:
        params['type'] = type
    if status:
        params['status'] = status

    response = requests.get(url, headers=HEADERS, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

```

### api_test.py
```python
import unittest
from api import artist_search, release_lookup, release_group_browse

class TestMusicBrainzAPI(unittest.TestCase):
    def test_artist_search(self):
        response = artist_search("The Beatles")
        self.assertIn('artists', response)
        self.assertGreater(len(response['artists']), 0)
    
    def test_release_lookup(self):
        # Using the MBID for "Abbey Road" by The Beatles
        mbid = "eab8e3bc-b3fe-4ff4-84ee-e9066a1a1e46"
        response = release_lookup(mbid, inc="artists")
        self.assertIn('release', response)
        self.assertEqual(response['id'], mbid)
    
    def test_release_group_browse(self):
        # Using the MBID for The Beatles
        artist_mbid = "b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d"
        response = release_group_browse(artist_mbid, limit=5)
        self.assertIn('release-groups', response)
        self.assertGreater(len(response['release-groups']), 0)

if __name__ == '__main__':
    unittest.main()
```

### musicbrainz.json
```json
{
    "tool_name": "musicbrainz",
    "tool_description": "The MusicBrainz API provides access to a large repository of music metadata, including artist, album, and recording details.",
    "title": "MusicBrainz API",
    "pricing": "FREE for non-commercial use",
    "score": {
        "avgServiceLevel": 90,
        "avgLatency": 200,
        "avgSuccessRate": 97,
        "popularityScore": 8.5,
        "__typename": "Score"
    },
    "home_url": "https://musicbrainz.org/doc/MusicBrainz_API",
    "host": "musicbrainz.org",
    "api_list": [
        {
            "name": "artist_search",
            "url": "https://musicbrainz.org/ws/2/artist",
            "description": "Allows searching for artists by name.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "query",
                    "type": "STRING",
                    "description": "The search query to find the artist.",
                    "default": "The Beatles"
                }
            ],
            "optional_parameters": [
                {
                    "name": "limit",
                    "type": "INTEGER",
                    "description": "The maximum number of results to return.",
                    "default": "25"
                },
                {
                    "name": "offset",
                    "type": "INTEGER",
                    "description": "The number of results to skip.",
                    "default": "0"
                }
            ],
            "statuscode": 200,
        },
        {
            "name": "release_lookup",
            "url": "https://musicbrainz.org/ws/2/release/{mbid}",
            "description": "Lookup release details by MBID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "mbid",
                    "type": "STRING",
                    "description": "The MusicBrainz Identifier for the release.",
                    "default": "eab8e3bc-b3fe-4ff4-84ee-e9066a1a1e46"
                }
            ],
            "optional_parameters": [
                {
                    "name": "inc",
                    "type": "STRING",
                    "description": "Include additional information such as artists or recordings.",
                    "default": ""
                }
            ],
            "statuscode": 200,
        },
        {
            "name": "release_group_browse",
            "url": "https://musicbrainz.org/ws/2/release-group",
            "description": "Browse release groups by artist MBID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "artist_mbid",
                    "type": "STRING",
                    "description": "The MBID for the artist.",
                    "default": "b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d"
                }
            ],
            "optional_parameters": [
                {
                    "name": "limit",
                    "type": "INTEGER",
                    "description": "The maximum number of results to return.",
                    "default": "25"
                },
                {
                    "name": "offset",
                    "type": "INTEGER",
                    "description": "The number of results to skip.",
                    "default": "0"
                },
                {
                    "name": "type",
                    "type": "STRING",
                    "description": "Filter release groups by type (album, single, etc.).",
                    "default": ""
                },
                {
                    "name": "status",
                    "type": "STRING",
                    "description": "Filter releases by status (official, etc.).",
                    "default": ""
                }
            ],
            "statuscode": 200,
        }
    ]
}
```