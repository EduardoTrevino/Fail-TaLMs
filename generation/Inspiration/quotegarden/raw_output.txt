### api.py
```python
import requests
from typing import Optional, List

base_url = "https://quote-garden.onrender.com/api/v3"

def get_random_quote(author: Optional[str] = None, genre: Optional[str] = None, count: Optional[int] = 1, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Get a single or multiple random quotes from the server.
    
    Parameters:
    author [Optional]: The author of the quote.
    genre [Optional]: The genre of the quote.
    count [Optional]: Number of quotes to retrieve.
    """
    url = f"{base_url}/quotes/random"
    params = {
        'author': author,
        'genre': genre,
        'count': count
    }
    response = requests.get(url, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def get_quotes(author: Optional[str] = None, genre: Optional[str] = None, query: Optional[str] = None, page: Optional[int] = 1, limit: Optional[int] = 10, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Get multiple quotes based on parameters provided.
    
    Parameters:
    author [Optional]: Filter quotes by author.
    genre [Optional]: Filter quotes by genre.
    query [Optional]: Search query within quotes.
    page [Optional]: Pagination for results.
    limit [Optional]: Limit number of quotes per page.
    """
    url = f"{base_url}/quotes"
    params = {
        'author': author,
        'genre': genre,
        'query': query,
        'page': page,
        'limit': limit
    }
    response = requests.get(url, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def get_all_genres(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Get all available genres of quotes.
    """
    url = f"{base_url}/genres"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def get_all_authors(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Get all available authors of quotes.
    """
    url = f"{base_url}/authors"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}
```

### api_test.py
```python
import unittest
from api import get_random_quote, get_quotes, get_all_genres, get_all_authors

class TestQuoteGardenAPI(unittest.TestCase):

    def test_get_random_quote(self):
        response = get_random_quote()
        self.assertEqual(response['statusCode'], 200)
        self.assertIn('data', response)

    def test_get_quotes(self):
        response = get_quotes(author="Bill Gates")
        self.assertEqual(response['statusCode'], 200)
        self.assertIn('data', response)

    def test_get_all_genres(self):
        response = get_all_genres()
        self.assertEqual(response['statusCode'], 200)
        self.assertIn('data', response)

    def test_get_all_authors(self):
        response = get_all_authors()
        self.assertEqual(response['statusCode'], 200)
        self.assertIn('data', response)

if __name__ == '__main__':
    unittest.main()
```

### quotegarden.json
```json
{
    "tool_name": "quotegarden",
    "tool_description": "A REST API for quotes. It includes more than 75000 quotes from various authors and genres.",
    "title": "Quote Garden API",
    "pricing": "FREE",
    "score": {
        "avgServiceLevel": 97,
        "avgLatency": 100,
        "avgSuccessRate": 99,
        "popularityScore": 9.2,
        "__typename": "Score"
    },
    "home_url": "https://quote-garden.onrender.com",
    "host": "quote-garden.onrender.com",
    "api_list": [
        {
            "name": "get_random_quote",
            "url": "https://quote-garden.onrender.com/api/v3/quotes/random",
            "description": "Get a single or multiple random quotes from the server.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "author",
                    "type": "STRING",
                    "description": "The author of the quote.",
                    "default": null
                },
                {
                    "name": "genre",
                    "type": "STRING",
                    "description": "The genre of the quote.",
                    "default": null
                },
                {
                    "name": "count",
                    "type": "INTEGER",
                    "description": "Number of quotes to retrieve.",
                    "default": 1
                }
            ],
            "statuscode": 200,
            "body": {
                "statusCode": "200",
                "message": "Random quotes",
                "data": [
                    {
                        "_id": "string",
                        "quoteText": "string",
                        "quoteAuthor": "string",
                        "quoteGenre": "string"
                    }
                ]
            }
        },
        {
            "name": "get_quotes",
            "url": "https://quote-garden.onrender.com/api/v3/quotes",
            "description": "Get multiple quotes based on parameters provided.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "author",
                    "type": "STRING",
                    "description": "Filter quotes by author.",
                    "default": null
                },
                {
                    "name": "genre",
                    "type": "STRING",
                    "description": "Filter quotes by genre.",
                    "default": null
                },
                {
                    "name": "query",
                    "type": "STRING",
                    "description": "Search query within quotes.",
                    "default": null
                },
                {
                    "name": "page",
                    "type": "INTEGER",
                    "description": "Pagination for results.",
                    "default": 1
                },
                {
                    "name": "limit",
                    "type": "INTEGER",
                    "description": "Limit number of quotes per page.",
                    "default": 10
                }
            ],
            "statuscode": 200,
            "body": {
                "statusCode": "200",
                "message": "Quotes",
                "data": [
                    {
                        "_id": "string",
                        "quoteText": "string",
                        "quoteAuthor": "string",
                        "quoteGenre": "string"
                    }
                ]
            }
        },
        {
            "name": "get_all_genres",
            "url": "https://quote-garden.onrender.com/api/v3/genres",
            "description": "Get all available genres of quotes.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200,
            "body": {
                "statusCode": "200",
                "message": "Genres",
                "data": ["age", "..."]
            }
        },
        {
            "name": "get_all_authors",
            "url": "https://quote-garden.onrender.com/api/v3/authors",
            "description": "Get all available authors of quotes.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200,
            "body": {
                "statusCode": "200",
                "message": "Authors",
                "data": ["Bill Gates", "..."]
            }
        }
    ]
}
```