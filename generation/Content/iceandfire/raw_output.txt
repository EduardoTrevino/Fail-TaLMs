### api.py
```python
import requests
from typing import Optional, List, Dict


def get_books(page: Optional[int] = 1, page_size: Optional[int] = 10, name: Optional[str] = None, from_release_date: Optional[str] = None, to_release_date: Optional[str] = None, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: List all books with optional filters.
    """
    url = "https://www.anapioficeandfire.com/api/books"
    params = {
        'page': page,
        'pageSize': page_size,
        'name': name,
        'fromReleaseDate': from_release_date,
        'toReleaseDate': to_release_date
    }
    response = requests.get(url, params={k: v for k, v in params.items() if v is not None})
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def get_book(book_id: int, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: Get specific book by ID.
    """
    url = f"https://www.anapioficeandfire.com/api/books/{book_id}"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def get_characters(page: Optional[int] = 1, page_size: Optional[int] = 10, name: Optional[str] = None, gender: Optional[str] = None, culture: Optional[str] = None, born: Optional[str] = None, died: Optional[str] = None, is_alive: Optional[bool] = None, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: List all characters with optional filters.
    """
    url = "https://www.anapioficeandfire.com/api/characters"
    params = {
        'page': page,
        'pageSize': page_size,
        'name': name,
        'gender': gender,
        'culture': culture,
        'born': born,
        'died': died,
        'isAlive': is_alive
    }
    response = requests.get(url, params={k: v for k, v in params.items() if v is not None})
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def get_character(character_id: int, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: Get specific character by ID.
    """
    url = f"https://www.anapioficeandfire.com/api/characters/{character_id}"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def get_houses(page: Optional[int] = 1, page_size: Optional[int] = 10, name: Optional[str] = None, region: Optional[str] = None, words: Optional[str] = None, has_words: Optional[bool] = None, has_titles: Optional[bool] = None, has_seats: Optional[bool] = None, has_died_out: Optional[bool] = None, has_ancestral_weapons: Optional[bool] = None, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: List all houses with optional filters.
    """
    url = "https://www.anapioficeandfire.com/api/houses"
    params = {
        'page': page,
        'pageSize': page_size,
        'name': name,
        'region': region,
        'words': words,
        'hasWords': has_words,
        'hasTitles': has_titles,
        'hasSeats': has_seats,
        'hasDiedOut': has_died_out,
        'hasAncestralWeapons': has_ancestral_weapons
    }
    response = requests.get(url, params={k: v for k, v in params.items() if v is not None})
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def get_house(house_id: int, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: Get specific house by ID.
    """
    url = f"https://www.anapioficeandfire.com/api/houses/{house_id}"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}
```

### api_test.py
```python
import unittest
from api import get_books, get_book, get_characters, get_character, get_houses, get_house


class TestIceAndFireAPI(unittest.TestCase):

    def test_get_books(self):
        response = get_books(page=1, page_size=2)
        self.assertIsInstance(response, list)
        self.assertGreater(len(response), 0)

    def test_get_book(self):
        response = get_book(1)
        self.assertIsInstance(response, dict)
        self.assertEqual(response.get("name"), "A Game of Thrones")

    def test_get_characters(self):
        response = get_characters(page=1, page_size=2)
        self.assertIsInstance(response, list)
        self.assertGreater(len(response), 0)

    def test_get_character(self):
        response = get_character(583)
        self.assertIsInstance(response, dict)
        self.assertEqual(response.get("name"), "Jon Snow")

    def test_get_houses(self):
        response = get_houses(page=1, page_size=2)
        self.assertIsInstance(response, list)
        self.assertGreater(len(response), 0)

    def test_get_house(self):
        response = get_house(10)
        self.assertIsInstance(response, dict)
        self.assertEqual(response.get("name"), "House Baelish of Harrenhal")


if __name__ == '__main__':
    unittest.main()
```

### iceandfire.json
```json
{
    "tool_name": "iceandfire",
    "tool_description": "API of Ice And Fire: Access data from the universe of Ice And Fire, including books, characters, and houses.",
    "title": "An API of Ice And Fire",
    "pricing": "FREE",
    "home_url": "https://www.anapioficeandfire.com/api",
    "host": "anapioficeandfire.com",
    "api_list": [
        {
            "name": "get_books",
            "url": "https://www.anapioficeandfire.com/api/books",
            "description": "List all books with optional filters.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "page",
                    "type": "INTEGER",
                    "description": "The page of resources to retrieve.",
                    "default": "1"
                },
                {
                    "name": "page_size",
                    "type": "INTEGER",
                    "description": "Number of resources per page.",
                    "default": "10"
                },
                {
                    "name": "name",
                    "type": "STRING",
                    "description": "Name of the book."
                },
                {
                    "name": "from_release_date",
                    "type": "DATE",
                    "description": "Released on or after this date."
                },
                {
                    "name": "to_release_date",
                    "type": "DATE",
                    "description": "Released on or before this date."
                }
            ],
            "statuscode": 200
        },
        {
            "name": "get_book",
            "url": "https://www.anapioficeandfire.com/api/books/{id}",
            "description": "Get specific book by ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "book_id",
                    "type": "INTEGER",
                    "description": "ID of the book."
                }
            ],
            "optional_parameters": [],
            "statuscode": 200
        },
        {
            "name": "get_characters",
            "url": "https://www.anapioficeandfire.com/api/characters",
            "description": "List all characters with optional filters.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "page",
                    "type": "INTEGER",
                    "description": "The page of resources to retrieve.",
                    "default": "1"
                },
                {
                    "name": "page_size",
                    "type": "INTEGER",
                    "description": "Number of resources per page.",
                    "default": "10"
                },
                {
                    "name": "name",
                    "type": "STRING",
                    "description": "Name of the character."
                },
                {
                    "name": "gender",
                    "type": "STRING",
                    "description": "Gender of the character."
                },
                {
                    "name": "culture",
                    "type": "STRING",
                    "description": "Culture of the character."
                },
                {
                    "name": "born",
                    "type": "STRING",
                    "description": "Year of birth."
                },
                {
                    "name": "died",
                    "type": "STRING",
                    "description": "Year of death."
                },
                {
                    "name": "is_alive",
                    "type": "BOOLEAN",
                    "description": "Whether the character is alive."
                }
            ],
            "statuscode": 200
        },
        {
            "name": "get_character",
            "url": "https://www.anapioficeandfire.com/api/characters/{id}",
            "description": "Get specific character by ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "character_id",
                    "type": "INTEGER",
                    "description": "ID of the character."
                }
            ],
            "optional_parameters": [],
            "statuscode": 200
        },
        {
            "name": "get_houses",
            "url": "https://www.anapioficeandfire.com/api/houses",
            "description": "List all houses with optional filters.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "page",
                    "type": "INTEGER",
                    "description": "The page of resources to retrieve.",
                    "default": "1"
                },
                {
                    "name": "page_size",
                    "type": "INTEGER",
                    "description": "Number of resources per page.",
                    "default": "10"
                },
                {
                    "name": "name",
                    "type": "STRING",
                    "description": "Name of the house."
                },
                {
                    "name": "region",
                    "type": "STRING",
                    "description": "Region where the house resides."
                },
                {
                    "name": "words",
                    "type": "STRING",
                    "description": "Words or motto of the house."
                },
                {
                    "name": "has_words",
                    "type": "BOOLEAN",
                    "description": "Whether the house has words."
                },
                {
                    "name": "has_titles",
                    "type": "BOOLEAN",
                    "description": "Whether the house has titles."
                },
                {
                    "name": "has_seats",
                    "type": "BOOLEAN",
                    "description": "Whether the house has seats."
                },
                {
                    "name": "has_died_out",
                    "type": "BOOLEAN",
                    "description": "Whether the house is extinct."
                },
                {
                    "name": "has_ancestral_weapons",
                    "type": "BOOLEAN",
                    "description": "Whether the house has ancestral weapons."
                }
            ],
            "statuscode": 200
        },
        {
            "name": "get_house",
            "url": "https://www.anapioficeandfire.com/api/houses/{id}",
            "description": "Get specific house by ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "house_id",
                    "type": "INTEGER",
                    "description": "ID of the house."
                }
            ],
            "optional_parameters": [],
            "statuscode": 200
        }
    ]
}
```