### api.py
```python
import requests
from typing import Optional

def openlibrary_search(q: str, fields: Optional[str] = "*", sort: Optional[str] = None, page: Optional[int] = 1, limit: Optional[int] = 10, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    OpenLibrary Search API - Search for books by title, author, and other criteria.
    
    Parameters:
    - q: The query term for the search.
    - fields: Fields to include in the response. Use '*' to include all fields.
    - sort: Sorting order (e.g., 'new', 'old', 'random', etc.).
    - page: Page number for results pagination.
    - limit: Number of results per page.
    """
    url = "https://openlibrary.org/search.json"
    params = {
        'q': q,
        'fields': fields,
        'sort': sort,
        'page': page,
        'limit': limit
    }
    response = requests.get(url, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def works_by_id(work_id: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Retrieve information about a work using its Open Library work ID.
    
    Parameters:
    - work_id: The Open Library ID of the work.
    """
    url = f"https://openlibrary.org/works/{work_id}.json"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def editions_by_work(work_id: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Fetch editions of a work using its Open Library work ID.
    
    Parameters:
    - work_id: The Open Library ID of the work.
    """
    url = f"https://openlibrary.org/works/{work_id}/editions.json"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def author_search(q: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Search for authors by name.
    
    Parameters:
    - q: The query term to search for authors.
    """
    url = "https://openlibrary.org/search/authors.json"
    params = {
        'q': q
    }
    response = requests.get(url, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def author_data(author_id: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Retrieve data about an author using their Open Library ID.
    
    Parameters:
    - author_id: The ID of the author.
    """
    url = f"https://openlibrary.org/authors/{author_id}.json"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def author_works(author_id: str, limit: Optional[int] = 50, offset: Optional[int] = 0, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Fetch works by a specific author using their Open Library author ID.
    
    Parameters:
    - author_id: The Open Library ID of the author.
    - limit: Number of works to return.
    - offset: The starting point in the collection of works. 
    """
    url = f"https://openlibrary.org/authors/{author_id}/works.json"
    params = {
        'limit': limit,
        'offset': offset
    }
    response = requests.get(url, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def book_by_isbn(isbn: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Retrieve book information using its ISBN.
    
    Parameters:
    - isbn: The ISBN of the book (either ISBN-10 or ISBN-13).
    """
    url = f"https://openlibrary.org/isbn/{isbn}.json"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

```

### api_test.py
```python
import unittest
from api import (
    openlibrary_search, works_by_id, editions_by_work, author_search, author_data, author_works, book_by_isbn
)


class TestOpenLibraryAPI(unittest.TestCase):

    def test_openlibrary_search(self):
        result = openlibrary_search(q="The Lord of the Rings")
        self.assertIn("docs", result)

    def test_works_by_id(self):
        result = works_by_id(work_id="OL45804W")
        self.assertIn("title", result)

    def test_editions_by_work(self):
        result = editions_by_work(work_id="OL45804W")
        self.assertIn("entries", result)

    def test_author_search(self):
        result = author_search(q="J. R. R. Tolkien")
        self.assertIn("docs", result)

    def test_author_data(self):
        result = author_data(author_id="OL23919A")
        self.assertIn("name", result)

    def test_author_works(self):
        result = author_works(author_id="OL23919A")
        self.assertIn("entries", result)

    def test_book_by_isbn(self):
        result = book_by_isbn(isbn="9780140328721")  # Using ISBN-13
        self.assertIn("title", result)


if __name__ == '__main__':
    unittest.main()
```

### openlibrary.json
```json
{
    "tool_name": "openlibrary",
    "tool_description": "API to access a wealth of data about books, authors, works, and more from the Open Library.",
    "title": "Open Library API",
    "pricing": "FREE",
    "score": {
        "avgServiceLevel": 95,
        "avgLatency": 150,
        "avgSuccessRate": 98,
        "popularityScore": 9.0,
        "__typename": "Score"
    },
    "home_url": "https://openlibrary.org/developers",
    "host": "openlibrary.org",
    "api_list": [
        {
            "name": "openlibrary_search",
            "url": "https://openlibrary.org/search.json",
            "description": "Search for books by title, author, and other criteria.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "q",
                    "type": "STRING",
                    "description": "The query term for the search.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "fields",
                    "type": "STRING",
                    "description": "Fields to include in the response, use '*' to include all.",
                    "default": "*"
                },
                {
                    "name": "sort",
                    "type": "STRING",
                    "description": "Sorting order (e.g., 'new', 'old', 'random').",
                    "default": ""
                },
                {
                    "name": "page",
                    "type": "INTEGER",
                    "description": "Page number for results pagination.",
                    "default": 1
                },
                {
                    "name": "limit",
                    "type": "INTEGER",
                    "description": "Number of results per page.",
                    "default": 10
                }
            ],
            "statuscode": 200
        },
        {
            "name": "works_by_id",
            "url": "https://openlibrary.org/works",
            "description": "Retrieve information about a work using its ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "work_id",
                    "type": "STRING",
                    "description": "The ID of the work.",
                    "default": ""
                }
            ],
            "statuscode": 200
        },
        {
            "name": "editions_by_work",
            "url": "https://openlibrary.org/works/{work_id}/editions.json",
            "description": "Fetch editions of a work using its ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "work_id",
                    "type": "STRING",
                    "description": "The ID of the work.",
                    "default": ""
                }
            ],
            "statuscode": 200
        },
        {
            "name": "author_search",
            "url": "https://openlibrary.org/search/authors.json",
            "description": "Search for authors by name.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "q",
                    "type": "STRING",
                    "description": "The query term to search for authors.",
                    "default": ""
                }
            ],
            "statuscode": 200
        },
        {
            "name": "author_data",
            "url": "https://openlibrary.org/authors/{author_id}.json",
            "description": "Retrieve data about an author using their ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "author_id",
                    "type": "STRING",
                    "description": "The ID of the author.",
                    "default": ""
                }
            ],
            "statuscode": 200
        },
        {
            "name": "author_works",
            "url": "https://openlibrary.org/authors/{author_id}/works.json",
            "description": "Fetch works by a specific author using their ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "author_id",
                    "type": "STRING",
                    "description": "The ID of the author.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "limit",
                    "type": "INTEGER",
                    "description": "Number of works to return.",
                    "default": 50
                },
                {
                    "name": "offset",
                    "type": "INTEGER",
                    "description": "The starting offset in the collection of works.",
                    "default": 0
                }
            ],
            "statuscode": 200
        },
        {
            "name": "book_by_isbn",
            "url": "https://openlibrary.org/isbn/{isbn}.json",
            "description": "Retrieve book information using its ISBN.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "isbn",
                    "type": "STRING",
                    "description": "The ISBN of the book.",
                    "default": ""
                }
            ],
            "statuscode": 200
        }
    ]
}
```