**### api.py**

```python
import requests
from typing import Optional

BASE_URL = "https://hacker-news.firebaseio.com/v0"
TOOLBENCH_RAPIDAPI_KEY = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'


def get_item(item_id: int, toolbench_rapidapi_key: str = TOOLBENCH_RAPIDAPI_KEY):
    """
    Get a specific item by ID.
    Parameters:
        item_id [Required]: integer - The item's unique ID.
    """
    url = f"{BASE_URL}/item/{item_id}.json"
    response = requests.get(url)
    return response.json()


def get_user(user_id: str, toolbench_rapidapi_key: str = TOOLBENCH_RAPIDAPI_KEY):
    """
    Get a specific user by ID.
    Parameters:
        user_id [Required]: string - The user's unique username (case-sensitive).
    """
    url = f"{BASE_URL}/user/{user_id}.json"
    response = requests.get(url)
    return response.json()


def get_max_item(toolbench_rapidapi_key: str = TOOLBENCH_RAPIDAPI_KEY):
    """
    Get the current largest item ID.
    """
    url = f"{BASE_URL}/maxitem.json"
    response = requests.get(url)
    return response.json()


def get_top_stories(toolbench_rapidapi_key: str = TOOLBENCH_RAPIDAPI_KEY):
    """
    Get up to 500 of the top stories.
    """
    url = f"{BASE_URL}/topstories.json"
    response = requests.get(url)
    return response.json()


def get_new_stories(toolbench_rapidapi_key: str = TOOLBENCH_RAPIDAPI_KEY):
    """
    Get up to 500 of the newest stories.
    """
    url = f"{BASE_URL}/newstories.json"
    response = requests.get(url)
    return response.json()


def get_best_stories(toolbench_rapidapi_key: str = TOOLBENCH_RAPIDAPI_KEY):
    """
    Get up to 500 of the best stories.
    """
    url = f"{BASE_URL}/beststories.json"
    response = requests.get(url)
    return response.json()


def get_ask_stories(toolbench_rapidapi_key: str = TOOLBENCH_RAPIDAPI_KEY):
    """
    Get up to 200 of the latest Ask HN stories.
    """
    url = f"{BASE_URL}/askstories.json"
    response = requests.get(url)
    return response.json()


def get_show_stories(toolbench_rapidapi_key: str = TOOLBENCH_RAPIDAPI_KEY):
    """
    Get up to 200 of the latest Show HN stories.
    """
    url = f"{BASE_URL}/showstories.json"
    response = requests.get(url)
    return response.json()


def get_job_stories(toolbench_rapidapi_key: str = TOOLBENCH_RAPIDAPI_KEY):
    """
    Get up to 200 of the latest Job stories.
    """
    url = f"{BASE_URL}/jobstories.json"
    response = requests.get(url)
    return response.json()


def get_updates(toolbench_rapidapi_key: str = TOOLBENCH_RAPIDAPI_KEY):
    """
    Get changed items and profiles.
    """
    url = f"{BASE_URL}/updates.json"
    response = requests.get(url)
    return response.json()
```

**### api_test.py**

```python
import unittest
from api import (
    get_item,
    get_user,
    get_max_item,
    get_top_stories,
    get_new_stories,
    get_best_stories,
    get_ask_stories,
    get_show_stories,
    get_job_stories,
    get_updates,
)


class TestHackerNewsAPI(unittest.TestCase):

    def test_get_item(self):
        result = get_item(8863)
        self.assertIn("id", result)
        self.assertEqual(result["id"], 8863)

    def test_get_user(self):
        result = get_user("jl")
        self.assertIn("id", result)
        self.assertEqual(result["id"], "jl")

    def test_get_max_item(self):
        result = get_max_item()
        self.assertIsInstance(result, int)

    def test_get_top_stories(self):
        result = get_top_stories()
        self.assertIsInstance(result, list)

    def test_get_new_stories(self):
        result = get_new_stories()
        self.assertIsInstance(result, list)

    def test_get_best_stories(self):
        result = get_best_stories()
        self.assertIsInstance(result, list)

    def test_get_ask_stories(self):
        result = get_ask_stories()
        self.assertIsInstance(result, list)

    def test_get_show_stories(self):
        result = get_show_stories()
        self.assertIsInstance(result, list)

    def test_get_job_stories(self):
        result = get_job_stories()
        self.assertIsInstance(result, list)

    def test_get_updates(self):
        result = get_updates()
        self.assertIn("items", result)
        self.assertIn("profiles", result)


if __name__ == '__main__':
    unittest.main()
```

**### hackernews.json**

```json
{
    "tool_name": "hackernews",
    "tool_description": "Hacker News API provides access to the public Hacker News data in near real-time via Firebase.",
    "title": "Hacker News API",
    "pricing": "FREE",
    "score": {
        "avgServiceLevel": 95,
        "avgLatency": 100,
        "avgSuccessRate": 97,
        "popularityScore": 9.0,
        "__typename": "Score"
    },
    "home_url": "https://github.com/HackerNews/API",
    "host": "hacker-news.firebaseio.com",
    "api_list": [
        {
            "name": "get_item",
            "url": "https://hacker-news.firebaseio.com/v0/item/<id>.json",
            "description": "Retrieve a specific item by its unique ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "item_id",
                    "type": "INTEGER",
                    "description": "The item's unique ID."
                }
            ],
            "optional_parameters": [],
            "statuscode": 200,
            "response_example": {
                "id": 8863,
                "by": "dhouston",
                "title": "My YC app: Dropbox - Throw away your USB drive",
                "text": null,
                "type": "story",
                "url": "http://www.getdropbox.com/u/2/screencast.html"
            }
        },
        {
            "name": "get_user",
            "url": "https://hacker-news.firebaseio.com/v0/user/<id>.json",
            "description": "Retrieve a specific user by their unique username.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "user_id",
                    "type": "STRING",
                    "description": "The user's unique username (case-sensitive)."
                }
            ],
            "optional_parameters": [],
            "statuscode": 200,
            "response_example": {
                "id": "jl",
                "created": 1173923446,
                "karma": 2937,
                "about": "This is a test"
            }
        },
        {
            "name": "get_max_item",
            "url": "https://hacker-news.firebaseio.com/v0/maxitem.json",
            "description": "Get the current largest item ID.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200,
            "response_example": 9130260
        },
        {
            "name": "get_top_stories",
            "url": "https://hacker-news.firebaseio.com/v0/topstories.json",
            "description": "Fetch up to 500 top stories.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200,
            "response_example": [9129911, 9129199, 9127761]
        },
        {
            "name": "get_new_stories",
            "url": "https://hacker-news.firebaseio.com/v0/newstories.json",
            "description": "Fetch up to 500 new stories.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200,
            "response_example": [9129911, 9129199, 9127761]
        },
        {
            "name": "get_best_stories",
            "url": "https://hacker-news.firebaseio.com/v0/beststories.json",
            "description": "Fetch up to 500 best stories.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200,
            "response_example": [9129911, 9129199, 9127761]
        },
        {
            "name": "get_ask_stories",
            "url": "https://hacker-news.firebaseio.com/v0/askstories.json",
            "description": "Fetch up to 200 Ask HN stories.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200,
            "response_example": [9127232, 9128437, 9130049]
        },
        {
            "name": "get_show_stories",
            "url": "https://hacker-news.firebaseio.com/v0/showstories.json",
            "description": "Fetch up to 200 Show HN stories.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200,
            "response_example": [9127232, 9128437, 9130049]
        },
        {
            "name": "get_job_stories",
            "url": "https://hacker-news.firebaseio.com/v0/jobstories.json",
            "description": "Fetch up to 200 Job stories.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200,
            "response_example": [9127232, 9128437, 9130049]
        },
        {
            "name": "get_updates",
            "url": "https://hacker-news.firebaseio.com/v0/updates.json",
            "description": "Get recent changes in items and profiles.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200,
            "response_example": {
                "items": [8423305, 8420805],
                "profiles": ["thefox", "mdda"]
            }
        }
    ]
}
```