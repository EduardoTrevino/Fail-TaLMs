### api.py
```python
import requests
from typing import Optional

def forward_geocode(location: str, output_format: Optional[str] = "json", region: Optional[str] = None, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Perform forward geocoding to convert a place name into geographic coordinates.
    Parameters:
    location [Required]: The location as a string (e.g., street address, postal code).
    output_format [Optional]: Format of the output (default is "json"). Allowed values: "xml", "json", "csv".
    region [Optional]: Limit search to a specific region (e.g., "UK").
    """
    url = "https://geocode.xyz/"
    params = {
        'locate': location,
        'auth': toolbench_rapidapi_key
    }
    
    if output_format == "json":
        params['json'] = 1
    elif output_format:
        params['geoit'] = output_format
        
    if region:
        params['region'] = region

    response = requests.get(url, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def reverse_geocode(latitude: float, longitude: float, output_format: Optional[str] = "json", region: Optional[str] = None, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Perform reverse geocoding to convert geographic coordinates into a descriptive location.
    Parameters:
    latitude [Required]: The latitude as a float.
    longitude [Required]: The longitude as a float.
    output_format [Optional]: Format of the output (default is "json"). Allowed values: "xml", "json", "csv".
    region [Optional]: Limit search to a specific region (e.g., "UK").
    """
    url = "https://geocode.xyz/"
    params = {
        'locate': f"{latitude},{longitude}",
        'auth': toolbench_rapidapi_key
    }
    
    if output_format == "json":
        params['json'] = 1
    elif output_format:
        params['geoit'] = output_format
        
    if region:
        params['region'] = region

    response = requests.get(url, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def geoparse(scantext: str, output_format: Optional[str] = "json", sentiment: Optional[bool] = False, region: Optional[str] = None, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Geoparse free-text descriptions to extract and geocode place names.
    Parameters:
    scantext [Required]: Free-form text containing locations.
    output_format [Optional]: Format of the output (default is "json"). Allowed values: "xml", "json", "geojson".
    sentiment [Optional]: Perform sentiment analysis as well (default is False). Allowed values: True, False.
    region [Optional]: Limit search to a specific region (e.g., "NL").
    """
    url = "https://geocode.xyz/"
    params = {
        'scantext': scantext,
        'auth': toolbench_rapidapi_key
    }
    
    if output_format == "json":
        params['json'] = 1
    elif output_format == "geojson":
        params['geojson'] = 1
    elif output_format:
        params['geoit'] = output_format
    
    if sentiment:
        params['sentiment'] = 1
        
    if region:
        params['region'] = region

    response = requests.post(url, data=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}
```

### api_test.py
```python
import unittest
from api import forward_geocode, reverse_geocode, geoparse

class TestGeocodeAPI(unittest.TestCase):

    def test_forward_geocode(self):
        result = forward_geocode("Hauptstr., 57632 Berzhausen")
        self.assertIn('latt', result)
        self.assertIn('longt', result)

    def test_reverse_geocode(self):
        result = reverse_geocode(51.50354, -0.12768)
        self.assertIn('standard', result)
        self.assertIn('latt', result)
        self.assertIn('longt', result)

    def test_geoparse(self):
        result = geoparse("The most important museums of Amsterdam are located on the Museumplein.")
        self.assertIsInstance(result, dict)
        self.assertIn('matches', result)

    def test_forward_geocode_with_output_format(self):
        result = forward_geocode("Hauptstr., 57632 Berzhausen", "xml")
        self.assertIsInstance(result, str)  # XML response is a string and not a dictionary

    def test_reverse_geocode_with_output_format(self):
        result = reverse_geocode(51.50354, -0.12768, "csv")
        self.assertIsInstance(result, str)  # CSV response is a string

    def test_geoparse_with_sentiment_analysis(self):
        result = geoparse("The most important museums of Amsterdam are located on the Museumplein.", sentiment=True)
        self.assertIn('matches', result)
        self.assertIn('sentiment', result)

if __name__ == '__main__':
    unittest.main()
```

### geocode.json
```json
{
    "tool_name": "geocode",
    "tool_description": "API to perform Geocoding, Reverse Geocoding and Geoparsing. Supports multiple output formats worldwide.",
    "title": "Geocode.xyz API",
    "pricing": "FREE and Paid tiers available",
    "score": {
        "avgServiceLevel": 90,
        "avgLatency": 200,
        "avgSuccessRate": 97,
        "popularityScore": 9.0,
        "__typename": "Score"
    },
    "home_url": "https://geocode.xyz/",
    "host": "geocode.xyz",
    "api_list": [
        {
            "name": "forward_geocode",
            "url": "https://geocode.xyz/",
            "description": "Converts a place name into geographic coordinates.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "location",
                    "type": "STRING",
                    "description": "The location as a string, e.g., street address."
                }
            ],
            "optional_parameters": [
                {
                    "name": "output_format",
                    "type": "STRING",
                    "description": "Output format, e.g., json, xml, csv.",
                    "default": "json"
                },
                {
                    "name": "region",
                    "type": "STRING",
                    "description": "Region to limit the search."
                }
            ]
        },
        {
            "name": "reverse_geocode",
            "url": "https://geocode.xyz/",
            "description": "Converts geographic coordinates into a descriptive location.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "latitude",
                    "type": "FLOAT",
                    "description": "The latitude of the location."
                },
                {
                    "name": "longitude",
                    "type": "FLOAT",
                    "description": "The longitude of the location."
                }
            ],
            "optional_parameters": [
                {
                    "name": "output_format",
                    "type": "STRING",
                    "description": "Output format, e.g., json, xml, csv.",
                    "default": "json"
                },
                {
                    "name": "region",
                    "type": "STRING",
                    "description": "Region to limit the search."
                }
            ]
        },
        {
            "name": "geoparse",
            "url": "https://geocode.xyz/",
            "description": "Parses free-text descriptions to extract and geocode place names.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "scantext",
                    "type": "STRING",
                    "description": "Free-form text containing locations."
                }
            ],
            "optional_parameters": [
                {
                    "name": "output_format",
                    "type": "STRING",
                    "description": "Output format, e.g., json, geojson, xml.",
                    "default": "json"
                },
                {
                    "name": "sentiment",
                    "type": "BOOLEAN",
                    "description": "Perform sentiment analysis.",
                    "default": "false"
                },
                {
                    "name": "region",
                    "type": "STRING",
                    "description": "Region to limit the search."
                }
            ]
        }
    ]
}
```