### api.py
```python
import requests
from typing import Optional


def query_cep(cep: str, return_format: str = 'json', toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: Retrieve information for a given ZIP code in Brazil.
    Parameters:
    cep [Required]: string [Description: ZIP code in the format of 8 digits.]
    return_format [Optional]: string [Description: Format of the return data (json or xml). Default is 'json'.]
    """
    if len(cep) != 8 or not cep.isdigit():
        return {"error": "Invalid ZIP code format. Must be 8 digits."}

    url = f"https://viacep.com.br/ws/{cep}/{return_format}/"
    response = requests.get(url)
    try:
        return response.json() if return_format == 'json' else response.text
    except Exception as e:
        return {"error": str(e), "response": response.text}


def search_address(state: str, city: str, street: str, return_format: str = 'json', toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: Search for a ZIP code based on the address details.
    Parameters:
    state [Required]: string [Description: Two-letter state code in Brazil.]
    city [Required]: string [Description: Name of the city. Must have at least 3 characters.]
    street [Required]: string [Description: Name of the street. Must have at least 3 characters.]
    return_format [Optional]: string [Description: Format of the return data (json or xml). Default is 'json'.]
    """
    if len(city) < 3 or len(street) < 3:
        return {"error": "City and street names must be at least 3 characters long."}

    url = f"https://viacep.com.br/ws/{state}/{city}/{street}/{return_format}/"
    response = requests.get(url)
    try:
        return response.json() if return_format == 'json' else response.text
    except Exception as e:
        return {"error": str(e), "response": response.text}
```

### api_test.py
```python
import unittest
from api import query_cep, search_address


class TestViaCepAPI(unittest.TestCase):

    def test_query_cep_valid(self):
        result = query_cep('01001000')
        self.assertIn('cep', result)
        self.assertEqual(result['cep'], '01001-000')

    def test_query_cep_invalid_format(self):
        result = query_cep('01000-000')
        self.assertIn('error', result)
        self.assertEqual(result['error'], 'Invalid ZIP code format. Must be 8 digits.')

    def test_query_cep_nonexistent(self):
        result = query_cep('99999999')
        self.assertIn('erro', result)
        self.assertTrue(result['erro'])

    def test_search_address_valid(self):
        result = search_address('RS', 'Porto Alegre', 'Domingos')
        self.assertIsInstance(result, list)
        if len(result) > 0:
            self.assertIn('cep', result[0])
    
    def test_search_address_invalid_params(self):
        result = search_address('RS', 'Po', 'Domingos')
        self.assertIn('error', result)
        self.assertEqual(result['error'], 'City and street names must be at least 3 characters long.')

    def test_search_address_no_results(self):
        result = search_address('RS', 'Porto Alegre', 'Nonexistent Street')
        self.assertEqual(result, [])  # Expect an empty list if no results are found


if __name__ == '__main__':
    unittest.main()
```

### viacep.json
```json
{
    "tool_name": "viacep",
    "tool_description": "Free high-performance webservice for consulting Brazilian Postal Codes (CEPs).",
    "title": "ViaCEP API",
    "pricing": "FREE",
    "score": {
        "avgServiceLevel": 99,
        "avgLatency": 50,
        "avgSuccessRate": 98,
        "popularityScore": 9.8
    },
    "home_url": "https://viacep.com.br",
    "host": "viacep.com.br",
    "api_list": [
        {
            "name": "query_cep",
            "url": "https://viacep.com.br/ws/{cep}/{return_format}/",
            "description": "Retrieve information for a given ZIP code in Brazil.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "cep",
                    "type": "STRING",
                    "description": "ZIP code in the format of 8 digits."
                }
            ],
            "optional_parameters": [
                {
                    "name": "return_format",
                    "type": "STRING",
                    "description": "Format of the return data (json or xml).",
                    "default": "json"
                }
            ],
            "code": "import requests\n\nurl = 'https://viacep.com.br/ws/{cep}/json/'\nresponse = requests.get(url)\nprint(response.json())",
            "statuscode": 200,
            "body": {
                "cep": "string",
                "logradouro": "string",
                "complemento": "string",
                "bairro": "string",
                "localidade": "string",
                "uf": "string",
                "ibge": "string",
                "gia": "string",
                "ddd": "string",
                "siafi": "string"
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "cep": {
                        "type": "string"
                    },
                    "logradouro": {
                        "type": "string"
                    },
                    "complemento": {
                        "type": "string"
                    }
                }
            }
        },
        {
            "name": "search_address",
            "url": "https://viacep.com.br/ws/{state}/{city}/{street}/{return_format}/",
            "description": "Search for a ZIP code based on the address details.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "state",
                    "type": "STRING",
                    "description": "Two-letter state code in Brazil."
                },
                {
                    "name": "city",
                    "type": "STRING",
                    "description": "Name of the city. Must have at least 3 characters."
                },
                {
                    "name": "street",
                    "type": "STRING",
                    "description": "Name of the street. Must have at least 3 characters."
                }
            ],
            "optional_parameters": [
                {
                    "name": "return_format",
                    "type": "STRING",
                    "description": "Format of the return data (json or xml).",
                    "default": "json"
                }
            ],
            "code": "import requests\n\nurl = 'https://viacep.com.br/ws/{state}/{city}/{street}/json/'\nresponse = requests.get(url)\nprint(response.json())",
            "statuscode": 200,
            "body": [
                {
                    "cep": "string",
                    "logradouro": "string",
                    "complemento": "string",
                    "bairro": "string",
                    "localidade": "string",
                    "uf": "string",
                    "ibge": "string",
                    "gia": "string",
                    "ddd": "string",
                    "siafi": "string"
                }
            ],
            "headers": {},
            "schema": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "cep": {
                            "type": "string"
                        },
                        "logradouro": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    ]
}
```