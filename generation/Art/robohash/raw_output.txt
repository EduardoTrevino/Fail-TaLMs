### Creating the `api.py` to interact with the Robohash API

```python
import requests
from typing import Optional, Union

def generate_image(text: str, 
                   format: Optional[str] = 'png', 
                   set: Optional[str] = 'set1', 
                   size: Optional[str] = '200x200', 
                   bgset: Optional[str] = None, 
                   gravatar: Optional[Union[str, bool]] = None, 
                   ignoreext: Optional[bool] = None, 
                   toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Generate a unique image for any text.
    
    Parameters:
    - text [Required]: The text to generate the image from
    - format [Optional]: Format of the image (default: 'png')
    - set [Optional]: Set of images (default: 'set1')
    - size [Optional]: Size of the image (default: '200x200')
    - bgset [Optional]: Background set for the image
    - gravatar [Optional]: Whether to use gravatar, and if email is provided, whether to hash it
    - ignoreext [Optional]: Whether to include the extension in the hash calculation 
    """
    url = f"https://robohash.org/{text}.{format}"
    params = {
        'set': set,
        'size': size,
    }
    if bgset:
        params['bgset'] = bgset
    if gravatar:
        params['gravatar'] = 'hashed' if gravatar == 'hashed' else 'yes'
    if ignoreext:
        params['ignoreext'] = 'false'
    
    response = requests.get(url, params=params)
    try:
        # Return the content of the image
        return response.content
    except Exception as e:
        return {"error": str(e), "response": response.text}
```

### Creating test cases for `api_test.py`

```python
import unittest
import api

class TestRoboHashAPI(unittest.TestCase):

    def test_generate_image_default(self):
        response = api.generate_image(text="example")
        self.assertIsInstance(response, bytes)
        self.assertTrue(len(response) > 0)

    def test_generate_image_with_format(self):
        response = api.generate_image(text="example", format="jpg")
        self.assertIsInstance(response, bytes)
        self.assertTrue(len(response) > 0)

    def test_generate_image_with_set(self):
        response = api.generate_image(text="example", set="set2")
        self.assertIsInstance(response, bytes)
        self.assertTrue(len(response) > 0)

    def test_generate_image_with_size(self):
        response = api.generate_image(text="example", size="300x300")
        self.assertIsInstance(response, bytes)
        self.assertTrue(len(response) > 0)

    def test_generate_image_with_bgset(self):
        response = api.generate_image(text="example", bgset="bg1")
        self.assertIsInstance(response, bytes)
        self.assertTrue(len(response) > 0)

    def test_generate_image_with_gravatar(self):
        response = api.generate_image(text="example@example.com", gravatar="yes")
        self.assertIsInstance(response, bytes)
        self.assertTrue(len(response) > 0)

    def test_generate_image_with_ignoreext(self):
        response = api.generate_image(text="example.png", ignoreext=True)
        self.assertIsInstance(response, bytes)
        self.assertTrue(len(response) > 0)

if __name__ == '__main__':
    unittest.main()
```

### Creating the metadata JSON file `robohash.json`

```json
{
    "tool_name": "robohash",
    "tool_description": "Generate unique images from any text. Robohash makes it easy to provide unique, robot/monster/alien images for any input text.",
    "title": "Robohash API",
    "pricing": "FREE",
    "score": {
        "avgServiceLevel": 95,
        "avgLatency": 150,
        "avgSuccessRate": 98,
        "popularityScore": 9.5,
        "__typename": "Score"
    },
    "home_url": "https://robohash.org",
    "host": "robohash.org",
    "api_list": [
        {
            "name": "generate_image",
            "url": "https://robohash.org/{text}.{format}",
            "description": "Generate a unique image for any text.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "text",
                    "type": "STRING",
                    "description": "The text to generate the image from.",
                    "default": ""
                }
            ],
            "optional_parameters": [
                {
                    "name": "format",
                    "type": "STRING",
                    "description": "Format of the image.",
                    "default": "png"
                },
                {
                    "name": "set",
                    "type": "STRING",
                    "description": "Set of images.",
                    "default": "set1"
                },
                {
                    "name": "size",
                    "type": "STRING",
                    "description": "Size of the image.",
                    "default": "200x200"
                },
                {
                    "name": "bgset",
                    "type": "STRING",
                    "description": "Background set for the image.",
                    "default": ""
                },
                {
                    "name": "gravatar",
                    "type": "STRING",
                    "description": "Whether to use gravatar and how.",
                    "default": null
                },
                {
                    "name": "ignoreext",
                    "type": "BOOLEAN",
                    "description": "Whether to include the extension in the hash calculation.",
                    "default": null
                }
            ],
            "code": "import requests\n\nurl = 'https://robohash.org/{text}.{format}'\nparams = {'set': set, 'size': size, 'bgset': bgset, 'gravatar': gravatar, 'ignoreext': ignoreext}\nresponse = requests.get(url, params=params)\nprint(response.content)",
            "statuscode": 200,
            "body": {
                "image": "binary"
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "image": {
                        "type": "binary"
                    }
                }
            }
        }
    ]
}
```

This setup should allow you to interact with the Robohash API, run tests to verify its functionality, and have a metadata file describing the interaction with the API.