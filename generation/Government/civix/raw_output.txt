**### api.py**

```python
import requests
from typing import Optional


def get_content(aspect: str = 'complete', toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Retrieve a list of documents within an aspect of the CiviX Server API content library.
    
    Parameters:
    - aspect: str (default: 'complete'): Aspect to retrieve content from.
    """
    url = f"http://www.bclaws.ca/civix/content/{aspect}/"
    response = requests.get(url)
    try:
        return response.content  # Returning the XML content
    except Exception as e:
        return {"error": str(e), "response": response.text}


def get_document(index_id: str, document_id: str, aspect: str = 'complete', xml: bool = False, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Retrieve a document from the CiviX Server API repository.
    
    Parameters:
    - index_id: str: Unique index identifier.
    - document_id: str: Unique document identifier.
    - aspect: str (default 'complete'): Aspect of the document.
    - xml: bool (default False): If True, retrieves the document in XML format.
    """
    url = f"http://www.bclaws.ca/civix/document/id/{aspect}/{index_id}/{document_id}"
    if xml:
        url += "/xml"
    response = requests.get(url)
    try:
        return response.content  # Returning the document content, either HTML or XML
    except Exception as e:
        return {"error": str(e), "response": response.text}


def search_content(query: str, aspect: str = 'complete', start: int = 0, end: int = 20, n_frag: int = 5, l_frag: int = 100, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Search for occurrences of a query term within an aspect of the CiviX Server API.
    
    Parameters:
    - query: str: Query term to search for.
    - aspect: str (default 'complete'): Aspect to search within.
    - start: int (default 0): First hit to return.
    - end: int (default 20): Last hit to return. Cannot be more than 100 away from start.
    - n_frag: int (default 5): Number of fragment snippets to return. Must be less than 10.
    - l_frag: int (default 100): Length of each fragment. Must be less than 200.
    """
    params = {
        'q': query,
        's': start,
        'e': end,
        'nFrag': n_frag,
        'lFrag': l_frag
    }
    url = f"http://www.bclaws.ca/civix/search/{aspect}/fullsearch"
    response = requests.get(url, params=params)
    try:
        return response.content  # Returning the search results as XML
    except Exception as e:
        return {"error": str(e), "response": response.text}
```

**### api_test.py**

```python
import unittest
from api import get_content, get_document, search_content


class TestCiviXAPI(unittest.TestCase):

    def test_get_content(self):
        response = get_content(aspect='complete')
        self.assertIn(b"<root>", response)  # Checking if response contains XML root

    def test_get_document(self):
        response = get_document(index_id='statreg', document_id='01009_01', xml=True)
        self.assertIn(b"<act:act", response)  # Checking if response contains act namespace

    def test_search_content(self):
        response = search_content(query='water', aspect='complete')
        self.assertIn(b"<results", response)  # Checking if response contains results tag


if __name__ == '__main__':
    unittest.main()
```

**### civix.json**

```json
{
    "tool_name": "civix",
    "tool_description": "API for accessing British Columbia's law and bylaw content.",
    "title": "CiviX Server API",
    "pricing": "FREE",
    "score": {
        "avgServiceLevel": 90,
        "avgLatency": 200,
        "avgSuccessRate": 95,
        "popularityScore": 8.0,
        "__typename": "Score"
    },
    "home_url": "http://www.bclaws.ca/",
    "host": "www.bclaws.ca",
    "api_list": [
        {
            "name": "get_content",
            "url": "http://www.bclaws.ca/civix/content/{aspect}/",
            "description": "Retrieve a list of documents within a specific aspect of the content library.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "aspect",
                    "type": "STRING",
                    "description": "Aspect to retrieve content from.",
                    "default": "complete"
                }
            ]
        },
        {
            "name": "get_document",
            "url": "http://www.bclaws.ca/civix/document/id/{aspect}/{index_id}/{document_id}",
            "description": "Retrieve a document from the repository by its index and document identifier.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "index_id",
                    "type": "STRING",
                    "description": "Unique index identifier."
                },
                {
                    "name": "document_id",
                    "type": "STRING",
                    "description": "Unique document identifier."
                }
            ],
            "optional_parameters": [
                {
                    "name": "aspect",
                    "type": "STRING",
                    "description": "Aspect of the document.",
                    "default": "complete"
                },
                {
                    "name": "xml",
                    "type": "BOOLEAN",
                    "description": "Retrieve document in XML format if true.",
                    "default": "false"
                }
            ]
        },
        {
            "name": "search_content",
            "url": "http://www.bclaws.ca/civix/search/{aspect}/fullsearch",
            "description": "Perform a search within an aspect of the content library.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "query",
                    "type": "STRING",
                    "description": "Query term to search for."
                }
            ],
            "optional_parameters": [
                {
                    "name": "aspect",
                    "type": "STRING",
                    "description": "Aspect to search within.",
                    "default": "complete"
                },
                {
                    "name": "start",
                    "type": "INTEGER",
                    "description": "First hit to return.",
                    "default": "0"
                },
                {
                    "name": "end",
                    "type": "INTEGER",
                    "description": "Last hit to return.",
                    "default": "20"
                },
                {
                    "name": "n_frag",
                    "type": "INTEGER",
                    "description": "Number of fragment snippets to return.",
                    "default": "5"
                },
                {
                    "name": "l_frag",
                    "type": "INTEGER",
                    "description": "Length of each fragment.",
                    "default": "100"
                }
            ]
        }
    ]
}
```