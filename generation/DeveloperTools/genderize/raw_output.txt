### api.py
```python
import requests
from typing import Optional, List, Dict, Union

def check_gender(name: str, country_id: Optional[str] = None, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff') -> Union[Dict, List[Dict]]:
    """
    Predicts the gender of a single name. Optionally, the country_id can be used for localization.
    
    Parameters:
    name [Required]: string - The name to predict gender for.
    country_id [Optional]: string - Country code for localization following ISO 3166-1 alpha-2.

    Returns a dictionary with keys 'name', 'gender', 'probability', 'count', and possibly 'country_id'.
    """
    url = "https://api.genderize.io"
    params = {
        'name': name
    }
    if country_id:
        params['country_id'] = country_id
    
    response = requests.get(url, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def check_genders(names: List[str], country_id: Optional[str] = None, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff') -> Union[Dict, List[Dict]]:
    """
    Predicts the gender of multiple names in one request. Optionally, the country_id can be used for localization.
    
    Parameters:
    names [Required]: list of strings - The names to predict genders for, maximum 10 names.
    country_id [Optional]: string - Country code for localization following ISO 3166-1 alpha-2.

    Returns a list of dictionaries each containing 'name', 'gender', 'probability', 'count', and possibly 'country_id'.
    """
    url = "https://api.genderize.io"
    params = {
        'name[]': names
    }
    if country_id:
        params['country_id'] = country_id
    
    response = requests.get(url, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}
```

### api_test.py
```python
import unittest
from api import check_gender, check_genders

class TestGenderizeAPI(unittest.TestCase):

    def test_check_gender(self):
        result = check_gender(name="peter")
        self.assertIn('name', result)
        self.assertIn('gender', result)
        self.assertIn('probability', result)
        self.assertIn('count', result)

    def test_check_gender_with_country(self):
        result = check_gender(name="kim", country_id="US")
        self.assertIn('name', result)
        self.assertIn('gender', result)
        self.assertIn('probability', result)
        self.assertIn('count', result)
        self.assertIn('country_id', result)
        self.assertEqual(result['country_id'], "US")

    def test_check_genders(self):
        result = check_genders(names=["peter", "lois", "stewie"])
        self.assertIsInstance(result, list)
        self.assertGreater(len(result), 0)
        for gender_info in result:
            self.assertIn('name', gender_info)
            self.assertIn('gender', gender_info)
            self.assertIn('probability', gender_info)
            self.assertIn('count', gender_info)

    def test_check_genders_with_country(self):
        result = check_genders(names=["kim", "sasha"], country_id="DK")
        self.assertIsInstance(result, list)
        self.assertGreater(len(result), 0)
        for gender_info in result:
            self.assertIn('country_id', gender_info)
            self.assertEqual(gender_info['country_id'], "DK")

if __name__ == "__main__":
    unittest.main()
```

### genderize.json
```json
{
    "tool_name": "genderize",
    "tool_description": "API to predict the gender of a person based on a first name, including support for localization by country.",
    "title": "Genderize API",
    "pricing": "FREE for up to 100 names/day; Subscription available for higher usage.",
    "score": {
        "avgServiceLevel": null,
        "avgLatency": null,
        "avgSuccessRate": null,
        "popularityScore": null,
        "__typename": "Score"
    },
    "home_url": "https://api.genderize.io",
    "host": "api.genderize.io",
    "api_list": [
        {
            "name": "check_gender",
            "url": "https://api.genderize.io",
            "description": "Predicts the gender of a single name, optionally scoped to a specific country.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "name",
                    "type": "STRING",
                    "description": "The name to predict gender for."
                }
            ],
            "optional_parameters": [
                {
                    "name": "country_id",
                    "type": "STRING",
                    "description": "Country code for localization following ISO 3166-1 alpha-2."
                }
            ],
            "code": "import requests\n\nurl = \"https://api.genderize.io\"\nparams = {'name': name, 'country_id': country_id}\nresponse = requests.get(url, params=params)\nprint(response.json())",
            "statuscode": 200,
            "body": {
                "count": "int",
                "name": "str",
                "gender": "str",
                "probability": "float",
                "country_id": "str"
            },
            "headers": {
                "Content-Type": "application/json"
            },
            "schema": {
                "type": "object",
                "properties": {
                    "count": { "type": "integer" },
                    "name": { "type": "string" },
                    "gender": { "type": "string" },
                    "probability": { "type": "number" },
                    "country_id": { "type": "string" }
                }
            }
        },
        {
            "name": "check_genders",
            "url": "https://api.genderize.io",
            "description": "Predicts the gender of multiple names in one request, optionally scoped to a specific country.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "names",
                    "type": "LIST OF STRINGS",
                    "description": "The names to predict genders for, maximum 10 names."
                }
            ],
            "optional_parameters": [
                {
                    "name": "country_id",
                    "type": "STRING",
                    "description": "Country code for localization following ISO 3166-1 alpha-2."
                }
            ],
            "code": "import requests\n\nurl = \"https://api.genderize.io\"\nparams = {'name[]': names, 'country_id': country_id}\nresponse = requests.get(url, params=params)\nprint(response.json())",
            "statuscode": 200,
            "body": [
                {
                    "count": "int",
                    "name": "str",
                    "gender": "str",
                    "probability": "float",
                    "country_id": "str"
                }
            ],
            "headers": {
                "Content-Type": "application/json"
            },
            "schema": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "count": { "type": "integer" },
                        "name": { "type": "string" },
                        "gender": { "type": "string" },
                        "probability": { "type": "number" },
                        "country_id": { "type": "string" }
                    }
                }
            }
        }
    ]
}
```