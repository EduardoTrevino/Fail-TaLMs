**### api.py**
```python
import requests

def get_device_latest(device_id: str = '08BEAC0A08AE', format: str = 'JSON', toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Returns the latest measurement (within 2 hours) of the device.
    """
    url = f"https://pm25.lass-net.org/API-1.0.0/device/{device_id}/latest/"
    params = {'format': format}
    response = requests.get(url, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def get_device_history(device_id: str = '08BEAC0A08AE', format: str = 'JSON', toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Returns the last 7-day measurement of the device.
    """
    url = f"https://pm25.lass-net.org/API-1.0.0/device/{device_id}/history/"
    params = {'format': format}
    response = requests.get(url, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def get_device_date(device_id: str = '08BEAC0A08AE', yyyy_mm_dd: str = '2020-07-01', format: str = 'JSON', toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Returns the measurement of the device on the specified date.
    """
    url = f"https://pm25.lass-net.org/API-1.0.0/device/{device_id}/date/{yyyy_mm_dd}/"
    params = {'format': format}
    response = requests.get(url, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def get_devices_nearest(lat: float = 25.04, lon: float = 121.614, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Returns the 3 nearest devices to the specific GPS coordinates.
    """
    url = f"https://pm25.lass-net.org/API-1.0.0/device/nearest/lat/{lat}/lon/{lon}/"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def get_project_all(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Returns the list of the projects.
    """
    url = "https://pm25.lass-net.org/API-1.0.0/project/all/"
    response = requests.get(url)
    try:
        return response.text
    except Exception as e:
        return {"error": str(e), "response": response.text}

def get_project_latest(project: str = 'airbox', toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Returns the latest measurement (within 2 hours) of the devices in the specified project.
    """
    url = f"https://pm25.lass-net.org/API-1.0.0/project/{project}/latest/"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def get_analysis_adf_emission(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Returns the list of devices that are probably located near emission sources detected by ADF (updated daily).
    """
    url = "https://pm25.lass-net.org/API-1.0.0/analysis/ADF/emission/"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def get_analysis_adf_indoor(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Returns the suspicious indoor devices detected by ADF (updated daily).
    """
    url = "https://pm25.lass-net.org/API-1.0.0/analysis/ADF/indoor/"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def get_analysis_adf_pollution(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Returns the list of devices with suspicious pollution ongoing in their nearby areas detected by ADF (updated hourly).
    """
    url = "https://pm25.lass-net.org/API-1.0.0/analysis/ADF/pollution/"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def get_analysis_adf_ranking(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Returns the ranking scores of all online devices (updated hourly).
    """
    url = "https://pm25.lass-net.org/API-1.0.0/analysis/ADF/ranking/"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def get_analysis_dcf_latest(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Returns the latest version calibration models made by DCF (updated daily).
    """
    url = "https://pm25.lass-net.org/API-1.0.0/analysis/DCF/latest/"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def get_analysis_dcf_nearest(lat: float = 25.04, lon: float = 121.614, sensor: str = 'PMS5003', toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Returns the nearest reference site with DCF model to the specified GPS coordinates and sensor type.
    """
    url = f"https://pm25.lass-net.org/API-1.0.0/analysis/DCF/nearest/lat/{lat}/lon/{lon}/"
    params = {'sensor': sensor}
    response = requests.get(url, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def get_citation(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Returns the bibtex to cite this project.
    """
    url = "https://pm25.lass-net.org/API-1.0.0/citation/"
    response = requests.get(url)
    try:
        return response.text
    except Exception as e:
        return {"error": str(e), "response": response.text}

def get_citation_adf(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Returns the bibtex to cite the ADF work.
    """
    url = "https://pm25.lass-net.org/API-1.0.0/citation/ADF/"
    response = requests.get(url)
    try:
        return response.text
    except Exception as e:
        return {"error": str(e), "response": response.text}
```

**### api_test.py**
```python
import unittest
from api import (
    get_device_latest,
    get_device_history,
    get_device_date,
    get_devices_nearest,
    get_project_all,
    get_project_latest,
    get_analysis_adf_emission,
    get_analysis_adf_indoor,
    get_analysis_adf_pollution,
    get_analysis_adf_ranking,
    get_analysis_dcf_latest,
    get_analysis_dcf_nearest,
    get_citation,
    get_citation_adf,
)

class TestPMTwentyFiveAPI(unittest.TestCase):

    def test_get_device_latest(self):
        response = get_device_latest()
        self.assertIn("device_id", response)

    def test_get_device_history(self):
        response = get_device_history()
        self.assertIn("device_id", response)

    def test_get_device_date(self):
        response = get_device_date()
        self.assertIn("device_id", response)

    def test_get_devices_nearest(self):
        response = get_devices_nearest()
        self.assertIn("feeds", response)

    def test_get_project_all(self):
        response = get_project_all()
        self.assertTrue(response.strip())  # Should return non-empty string

    def test_get_project_latest(self):
        response = get_project_latest()
        self.assertIn("feeds", response)

    def test_get_analysis_adf_emission(self):
        response = get_analysis_adf_emission()
        self.assertIn("feeds", response)

    def test_get_analysis_adf_indoor(self):
        response = get_analysis_adf_indoor()
        self.assertIn("feeds", response)

    def test_get_analysis_adf_pollution(self):
        response = get_analysis_adf_pollution()
        self.assertIn("feeds", response)

    def test_get_analysis_adf_ranking(self):
        response = get_analysis_adf_ranking()
        self.assertIn("feeds", response)

    def test_get_analysis_dcf_latest(self):
        response = get_analysis_dcf_latest()
        self.assertIsInstance(response, list)

    def test_get_analysis_dcf_nearest(self):
        response = get_analysis_dcf_nearest()
        self.assertIn("feeds", response)

    def test_get_citation(self):
        response = get_citation()
        self.assertTrue(response.strip())  # Should return non-empty string

    def test_get_citation_adf(self):
        response = get_citation_adf()
        self.assertTrue(response.strip())  # Should return non-empty string

if __name__ == '__main__':
    unittest.main()
```

**### pmtwentyfive.json**
```json
{
    "tool_name": "pmtwentyfive",
    "tool_description": "This Open Data API provides data access to the LASS PM2.5 project, a participatory sensing project for large-scale PM2.5 monitoring.",
    "title": "PM25 Open Data API",
    "pricing": "FREE",
    "score": {
        "avgServiceLevel": 95,
        "avgLatency": 120,
        "avgSuccessRate": 98,
        "popularityScore": 9.2,
        "__typename": "Score"
    },
    "home_url": "https://pm25.lass-net.org/API-1.0.0/",
    "host": "pm25.lass-net.org",
    "api_list": [
        {
            "name": "get_device_latest",
            "url": "/device/{device_id}/latest/",
            "description": "Returns the latest measurement (within 2 hours) of the device.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "device_id",
                    "type": "STRING",
                    "description": "Device ID, usually the MAC address.",
                    "default": "08BEAC0A08AE"
                }
            ],
            "optional_parameters": [
                {
                    "name": "format",
                    "type": "STRING",
                    "description": "Output data format.",
                    "default": "JSON"
                }
            ],
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "source": {"type": "string"},
                    "device_id": {"type": "string"},
                    "feeds": {"type": "object"}
                }
            }
        },
        {
            "name": "get_device_history",
            "url": "/device/{device_id}/history/",
            "description": "Returns the last 7-day measurement of the device.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "device_id",
                    "type": "STRING",
                    "description": "Device ID, usually the MAC address.",
                    "default": "08BEAC0A08AE"
                }
            ],
            "optional_parameters": [
                {
                    "name": "format",
                    "type": "STRING",
                    "description": "Output data format.",
                    "default": "JSON"
                }
            ],
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "source": {"type": "string"},
                    "device_id": {"type": "string"},
                    "feeds": {"type": "object"}
                }
            }
        },
        {
            "name": "get_device_date",
            "url": "/device/{device_id}/date/{yyyy-mm-dd}/",
            "description": "Returns the measurement of the device on the specified date.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "device_id",
                    "type": "STRING",
                    "description": "Device ID, usually the MAC address.",
                    "default": "08BEAC0A08AE"
                },
                {
                    "name": "yyyy-mm-dd",
                    "type": "STRING",
                    "description": "The date for which data is required.",
                    "default": "2020-07-01"
                }
            ],
            "optional_parameters": [
                {
                    "name": "format",
                    "type": "STRING",
                    "description": "Output data format.",
                    "default": "JSON"
                }
            ],
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "source": {"type": "string"},
                    "device_id": {"type": "string"},
                    "feeds": {"type": "object"}
                }
            }
        },
        {
            "name": "get_devices_nearest",
            "url": "/device/nearest/lat/{lat}/lon/{lon}/",
            "description": "Returns the 3 nearest devices to the specific GPS coordinates.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "lat",
                    "type": "FLOAT",
                    "description": "GPS latitude.",
                    "default": 25.04
                },
                {
                    "name": "lon",
                    "type": "FLOAT",
                    "description": "GPS longitude.",
                    "default": 121.614
                }
            ],
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "source": {"type": "string"},
                    "feeds": {"type": "array"}
                }
            }
        },
        {
            "name": "get_project_all",
            "url": "/project/all/",
            "description": "Returns the list of the projects.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200,
            "schema": {
                "type": "string"
            }
        },
        {
            "name": "get_project_latest",
            "url": "/project/{project}/latest/",
            "description": "Returns the latest measurement (within 2 hours) of the devices in the specified project.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "project",
                    "type": "STRING",
                    "description": "Project name.",
                    "default": "airbox"
                }
            ],
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "source": {"type": "string"},
                    "feeds": {"type": "array"}
                }
            }
        },
        {
            "name": "get_analysis_adf_emission",
            "url": "/analysis/ADF/emission/",
            "description": "Returns the list of devices that are probably located near emission sources detected by ADF (updated daily).",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "source": {"type": "string"},
                    "feeds": {"type": "array"}
                }
            }
        },
        {
            "name": "get_analysis_adf_indoor",
            "url": "/analysis/ADF/indoor/",
            "description": "Returns the suspicious indoor devices detected by ADF (updated daily).",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "source": {"type": "string"},
                    "feeds": {"type": "array"}
                }
            }
        },
        {
            "name": "get_analysis_adf_pollution",
            "url": "/analysis/ADF/pollution/",
            "description": "Returns the list of devices with suspicious pollution ongoing in their nearby areas detected by ADF (updated hourly).",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "source": {"type": "string"},
                    "feeds": {"type": "array"}
                }
            }
        },
        {
            "name": "get_analysis_adf_ranking",
            "url": "/analysis/ADF/ranking/",
            "description": "Returns the ranking scores of all online devices (updated hourly).",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "source": {"type": "string"},
                    "feeds": {"type": "array"}
                }
            }
        },
        {
            "name": "get_analysis_dcf_latest",
            "url": "/analysis/DCF/latest/",
            "description": "Returns the latest version calibration models made by DCF (updated daily).",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200,
            "schema": {
                "type": "array"
            }
        },
        {
            "name": "get_analysis_dcf_nearest",
            "url": "/analysis/DCF/nearest/lat/{lat}/lon/{lon}/",
            "description": "Returns the nearest reference site with DCF model to the specified GPS coordinates and sensor type.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "lat",
                    "type": "FLOAT",
                    "description": "GPS latitude.",
                    "default": 25.04
                },
                {
                    "name": "lon",
                    "type": "FLOAT",
                    "description": "GPS longitude.",
                    "default": 121.614
                }
            ],
            "optional_parameters": [
                {
                    "name": "sensor",
                    "type": "STRING",
                    "description": "PM2.5 sensor model.",
                    "default": "PMS5003"
                }
            ],
            "statuscode": 200,
            "schema": {
                "type": "object",
                "properties": {
                    "source": {"type": "string"},
                    "feeds": {"type": "array"}
                }
            }
        },
        {
            "name": "get_citation",
            "url": "/citation/",
            "description": "Returns the bibtex to cite this project.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200,
            "schema": {
                "type": "string"
            }
        },
        {
            "name": "get_citation_adf",
            "url": "/citation/ADF/",
            "description": "Returns the bibtex to cite the ADF work.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200,
            "schema": {
                "type": "string"
            }
        }
    ]
}
```