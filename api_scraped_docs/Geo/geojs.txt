Packed full of features
HTTPS only
Multiple formats
Highly available and geo routed
IPv4 and IPv6
No rate limits (yet)
Cross-origin resource sharing (CORS)
And most importantly, ChatOps integration. Lookup IPs from the comfort of chat.

Getting started is easy!
Checkout the text below, its generated on the fly by GeoJS itself.

Hello 128.2.149.108. The IP you're behind has a country code of US.

All that from this little snippet:

Hello <span id="user_ip"><span class="icon"><i class="loader"></i></span></span>. The IP you're behind has a country code of <span id="user_countrycode"><span class="icon"><i class="loader"></i></span></span>.
<script type="application/javascript">
function geoip(json){
var userip      = document.getElementById("user_ip");
var countrycode = document.getElementById("user_countrycode");
userip.textContent      = json.ip;
countrycode.textContent = json.country_code;
}
</script>
<script async src="https://get.geojs.io/v1/ip/geo.js"></script>

Documentation
IP

json
yes
jsonp
yes
text
yes
Returns the requesting IP in multiple formats

Country

json
yes
jsonp
yes
text
yes
Returns the country information about an IP

Geo

json
yes
jsonp
yes
text
no
Contains all available geographical information about an IP

PTR

json
yes
jsonp
yes
text
yes
Returns PTR (pointer record) information about an IP

Sponsors
GeoJS is powered by the DigitalOcean cloud and Cloudflare network that enables us to cache our heavily dynamic API. Use our referral link to get $100 free credit on DigitalOcean upon signup.

DigitalOcean logo
DNS Spy logo
Cloudflare logo
Notes & Acknowledgements
I'd like to thank Telize for inspiring me to create this and MaxMind, as all GeoIP data is sourced from their GeoLite database, available at maxmind.com.

GeoJS is made with  by jloh. I can be found online at my blog, Twitter, GitHub and Keybase.

This endpoint returns the requesters IP. You can specify a custom callback for the JSONP endpoint. You cannot lookup multiple IPs on this endpoint.

URIs
Type	URI
Plain text	https://get.geojs.io/v1/ip
JSON	https://get.geojs.io/v1/ip.json
JSONP	https://get.geojs.io/v1/ip.js
Query Parameters
Paramater	Default	Description	Endpoint
callback	geoip	JSONP callback	/v1/ip.js
Properties
Property	Type	Description	Example
ip	String	Requested IP	8.8.8.8
Examples
Plain text
8.8.8.8
JSON
{
  "ip": "8.8.8.8"
}
JSONP
geoip({
  "ip": "202.168.51.151"
})

This endpoint returns the country of the requesting IP. It has multiple plain text endpoints allowing you to choose whether you want the full country name or just the country code.

URIs
Type	URI
Plain text	https://get.geojs.io/v1/ip/country{/ip address}
Plain text	https://get.geojs.io/v1/ip/country/full{/ip address}
JSON	https://get.geojs.io/v1/ip/country.json
https://get.geojs.io/v1/ip/country/{ip address}.json
JSONP	https://get.geojs.io/v1/ip/country.js
https://get.geojs.io/v1/ip/country/{ip address}.js
Query Parameters
Paramater	Default	Description	Endpoint
ip	None	Allows searching of multiple IPs at once	All
callback	countryip	JSONP callback	/v1/ip/country.js
Properties
Property	Type	Description	Example
ip	String	Requested IP	8.8.8.8
country	String	Two letter country code	US
country_3	String	Three letter country code	USA
name	String	Country name in English	United States
Examples
Plain text
This endpoint features two plain text versions. One returns the two letter country code, the other returns the full country name in English.

The below two examples are from the normal plain text endpoint (/v1/ip/country). The first is hitting the endpoint without any args, the second is specifying two IP args (/v1/ip/country?ip=8.8.8.8,198.35.26.96):

US
8.8.8.8: US
198.35.26.96: US
The below two examples are the same as the above, but are hitting the full URL endpoint (/v1/ip/country/full):

United States
And multiple IP lookups:

8.8.8.8: United States
198.35.26.96: United States
JSON
{
  "country": "US",
  "country_3": "USA",
  "ip": "198.35.26.96",
  "name": "United States"
}
When multiple IPs are queried using the the ip arg on a request you get a response like this:

[
  {
    "country": "US",
    "country_3": "USA",
    "ip": "8.8.8.8",
    "name": "United States"
  },
  {
    "country": "US",
    "country_3": "USA",
    "ip": "198.35.26.96",
    "name": "United States"
  }
]
JSONP
countryip({
  "country": "US",
  "country_3": "USA",
  "ip": "198.35.26.96",
  "name": "United States"
})
When querying multiple IPs using the ip arg the return becomes a list like below:

countryip([{
  "country": "US",
  "country_3": "USA",
  "ip": "8.8.8.8",
  "name": "United States"
}, {
  "country": "US",
  "country_3": "USA",
  "ip": "198.35.26.96",
  "name": "United States"
}])

Unlike other endpoints the Geo endpoint doesn't have a text based version, it simply contains too much information to be useful. If people think otherwise, please reach out and let me know.

This endpoint contains geographical information about an IP, such as its latitude and longitude, along with the owning (ASN) organisiation.

URIs
Type	URI
JSON	https://get.geojs.io/v1/ip/geo.json
https://get.geojs.io/v1/ip/geo/{ip address}.json
JSONP	https://get.geojs.io/v1/ip/geo.js
https://get.geojs.io/v1/ip/geo/{ip address}.js
Query Parameters
Paramater	Default	Description	Endpoint
ip	None	Allows searching of multiple IPs at once	All
callback	geoip	JSONP callback	/v1/ip/geo.js
Properties
Property	Type	Description	Example
ip	String	Requested IP	8.8.8.8
country	String	Country name in English	Australia
country_code	String	Two letter country code	AU
country_code3	String	Three letter country code	AUS
continent_code	String	Three letter continent code	OC
city	String	City name in English	Mountain View
region	String	Subdivison of the country the IP is within (State, region etc)	California
latitude	String	IP latitude (Note: this is a string due to historic reasons)	37.4056
longitude	String	IP longitude (Note: this is a string due to historic reasons)	-122.0775
accuracy	Integer	Radius in kilometers around the specified location where the IP address is likely to be	5
timezone	String	Time zone as specified by the IANA Time Zone Database	America/Los_Angeles
organization_name	String	The organization that the IP is registered to (Note: Unknown is returned when this field is unknown)	Google LLC
asn	Integer	The autonomous system number associated with the IP address (Note: 64512 is returned when the ASN is unknown)	15169
organization	String	The ASN and organization field combined (Note: this field is depricated)	AS15169 Google LLC
Examples
JSON
{
  "accuracy": 1000,
  "area_code": "0",
  "asn": 15169,
  "continent_code": "NA",
  "country": "United States",
  "country_code": "US",
  "country_code3": "USA",
  "ip": "8.8.8.8",
  "latitude": "37.751",
  "longitude": "-97.822",
  "organization": "AS15169 Google LLC",
  "organization_name": "Google LLC"
}
When multiple IPs are queried using the the ip arg on a request you get a response like this:

[
  {
    "accuracy": 1000,
    "area_code": "0",
    "asn": 15169,
    "continent_code": "NA",
    "country": "United States",
    "country_code": "US",
    "country_code3": "USA",
    "ip": "8.8.8.8",
    "latitude": "37.751",
    "longitude": "-97.822",
    "organization": "AS15169 Google LLC",
    "organization_name": "Google LLC"
  },
  {
    "accuracy": 1000,
    "area_code": "0",
    "asn": 14907,
    "continent_code": "NA",
    "country": "United States",
    "country_code": "US",
    "country_code3": "USA",
    "ip": "198.35.26.96",
    "latitude": "37.751",
    "longitude": "-97.822",
    "organization": "AS14907 Wikimedia Foundation Inc.",
    "organization_name": "Wikimedia Foundation Inc."
  }
]
JSONP
geoip({
  "organization_name": "Google LLC",
  "accuracy": 1000,
  "asn": 15169,
  "organization": "AS15169 Google LLC",
  "longitude": "-97.822",
  "country_code3": "USA",
  "area_code": "0",
  "ip": "8.8.8.8",
  "country": "United States",
  "continent_code": "NA",
  "country_code": "US",
  "latitude": "37.751"
})
When querying multiple IPs using the ip arg the return becomes a list like below:

geoip([{
  "organization_name": "Google LLC",
  "accuracy": 1000,
  "asn": 15169,
  "organization": "AS15169 Google LLC",
  "longitude": "-97.822",
  "country_code3": "USA",
  "area_code": "0",
  "ip": "8.8.8.8",
  "country": "United States",
  "continent_code": "NA",
  "country_code": "US",
  "latitude": "37.751"
}, {
  "organization_name": "Wikimedia Foundation Inc.",
  "accuracy": 1000,
  "asn": 14907,
  "organization": "AS14907 Wikimedia Foundation Inc.",
  "longitude": "-97.822",
  "country_code3": "USA",
  "area_code": "0",
  "ip": "198.35.26.96",
  "country": "United States",
  "continent_code": "NA",
  "country_code": "US",
  "latitude": "37.751"
}])

This endpoint is unique since it doesn't return geographical information about an IP but DNS pointer record information. This is mostly used in the GeoJS App but is documented here for other people to use.

Note: You cannot lookup multiple PTR records at once with this endpoint, the ip parameter only lets you look up a single record, not a comma separated list.

URIs
Type	URI
Plain text	https://get.geojs.io/v1/dns/ptr
https://get.geojs.io/v1/dns/ptr/{ip address}
JSON	https://get.geojs.io/v1/dns/ptr.json
https://get.geojs.io/v1/dns/ptr/{ip address}.json
JSONP	https://get.geojs.io/v1/dns/ptr.js
https://get.geojs.io/v1/dns/ptr/{ip address}.js
Query Parameters
Paramater	Default	Description	Endpoint
ip	None	Allows searching of a specific PTR	All
callback	ptr	JSONP callback	/v1/ip/geo.js
Examples
Plain text
google-public-dns-a.google.com
JSON
{
  "ptr": "google-public-dns-a.google.com"
}
JSONP
ptr({
  "ptr": "google-public-dns-a.google.com"
})
