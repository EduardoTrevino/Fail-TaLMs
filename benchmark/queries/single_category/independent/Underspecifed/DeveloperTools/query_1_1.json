[
    {
        "api_list": [
            {
                "category_name": "DeveloperTools",
                "tool_name": "agify",
                "api_name": "estimate_age",
                "api_description": "Estimate the age of a person based on their first name.",
                "required_parameters": [
                    {
                        "name": "name",
                        "type": "STRING",
                        "description": "The first name to estimate age for.",
                        "default": "John"
                    }
                ],
                "optional_parameters": [
                    {
                        "name": "country_id",
                        "type": "STRING",
                        "description": "The country code to improve estimation accuracy.",
                        "default": "US"
                    }
                ],
                "method": "GET",
                "template_response": {
                    "count": "int",
                    "name": "str",
                    "age": "int",
                    "country_id": "str"
                }
            },
            {
                "category_name": "DeveloperTools",
                "tool_name": "apicagent",
                "api_name": "get_user_agent_info",
                "api_description": "Retrieve parsed information about a user agent string using the GET method.",
                "required_parameters": [
                    {
                        "name": "ua",
                        "type": "STRING",
                        "description": "The user agent string URL encoded.",
                        "default": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36"
                    }
                ],
                "optional_parameters": [],
                "method": "GET",
                "template_response": {
                    "browser_family": "str",
                    "client": {
                        "engine": "str",
                        "engine_version": "str",
                        "name": "str",
                        "type": "str",
                        "version": "str"
                    },
                    "device": {
                        "brand": "str",
                        "model": "str",
                        "type": "str"
                    },
                    "os": {
                        "name": "str",
                        "platform": "str",
                        "version": "str"
                    },
                    "os_family": "str"
                }
            }
        ],
        "query": "What is the estimated age of my best friend and what detailed information can you provide about the user agent 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36'?",
        "relevant APIs": [],
        "query_id": 1
    }
]    "query": "What is the estimated age of someone named John and what detailed information can you provide about the user agent 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36'?"


class TestAgifyAPI(unittest.TestCase):

    def test_estimate_age(self):
        response = estimate_age(name="michael")
        self.assertIn("age", response)
        self.assertIn("count", response)
        self.assertEqual(response["name"], "michael")

    def test_estimate_age_with_country(self):
        response = estimate_age(name="michael", country_id="US")
        self.assertIn("age", response)
        self.assertIn("count", response)
        self.assertEqual(response["name"], "michael")
        self.assertEqual(response["country_id"], "US")

    def test_estimate_age_batch(self):
        response = estimate_age_batch(names=["michael", "matthew", "jane"])
        self.assertIsInstance(response, list)
        self.assertEqual(len(response), 3)
        for item in response:
            self.assertIn("age", item)
            self.assertIn("count", item)
            self.assertIn("name", item)

    def test_estimate_age_batch_with_country(self):
        response = estimate_age_batch(names=["michael", "matthew", "jane"], country_id="US")
        self.assertIsInstance(response, list)
        self.assertEqual(len(response), 3)
        for item in response:
            self.assertIn("age", item)
            self.assertIn("count", item)
            self.assertIn("name", item)
            self.assertEqual(item.get("country_id"), "US")

            import unittest
            from api import get_user_agent_info
            
            class TestApicAgentAPI(unittest.TestCase):
            
                def test_get_user_agent_info(self):
                    ua_string = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36"
                    response = get_user_agent_info(ua_string)
                    
                    # Check if the response has expected keys
                    self.assertIn("browser_family", response)
                    self.assertIn("client", response)
                    self.assertIn("device", response)
                    self.assertIn("os", response)
                    self.assertIn("os_family", response)
            
                    # Check if "browser_family" is as expected
                    self.assertEqual(response.get("browser_family"), "Chrome")
            
            if __name__ == '__main__':
                unittest.main()