### api.py

```python
import requests
from typing import Optional

def generate_chart(chart_config: str, width: Optional[int] = 500, height: Optional[int] = 300, 
                   device_pixel_ratio: Optional[int] = 2, background_color: Optional[str] = 'transparent', 
                   version: Optional[str] = '2', format: Optional[str] = 'png', 
                   encoding: Optional[str] = 'url', method: Optional[str] = 'GET',
                   toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    This function generates a chart image based on Chart.js configuration using the QuickChart API.
    
    Parameters:
    chart_config [Required]: str - Chart.js configuration object in Javascript or JSON format.
    width [Optional]: int - Width of image in pixels. Defaults to 500.
    height [Optional]: int - Height of image in pixels. Defaults to 300.
    device_pixel_ratio [Optional]: int - Device pixel ratio of output. Defaults to 2.
    background_color [Optional]: str - Background color. Defaults to transparent.
    version [Optional]: str - Chart.js version. Defaults to 2.
    format [Optional]: str - Output format. Defaults to png.
    encoding [Optional]: str - Encoding type, url or base64. Defaults to url.
    method [Optional]: str - HTTP method to use, 'GET' or 'POST'. Defaults to 'GET'.
    """
    url = "https://quickchart.io/chart"

    params = {
        'c': chart_config,
        'w': width,
        'h': height,
        'devicePixelRatio': device_pixel_ratio,
        'bkg': background_color,
        'v': version,
        'format': format,
        'encoding': encoding
    }
    
    if method.upper() == 'GET':
        response = requests.get(url, params=params)
    elif method.upper() == 'POST':
        # when using POST, the entire config is sent as 'chart' parameter in JSON format
        json_data = {
            'chart': chart_config,
            'width': width,
            'height': height,
            'devicePixelRatio': device_pixel_ratio,
            'backgroundColor': background_color,
            'version': version,
            'format': format,
            'encoding': encoding
        }
        response = requests.post(url, json=json_data)
    else:
        return {"error": f"Invalid HTTP method: {method}"}

    try:
        # If encoding is 'base64', the response contains base64 data
        if encoding == 'base64':
            return response.content
        else:
            return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}
```

### api_test.py

```python
import unittest
from api import generate_chart

class TestQuickChartAPI(unittest.TestCase):
    
    def test_generate_chart_get(self):
        chart_config = "{type:'bar',data:{labels:[2012,2013,2014,2015,2016],datasets:[{label:'Users',data:[120,60,50,180,120]}]}}"
        response = generate_chart(chart_config)
        
        self.assertIsInstance(response, bytes)  # Should return image data for URL encoding by default.

    def test_generate_chart_post(self):
        chart_config = "{type:'bar',data:{labels:[2012,2013,2014,2015,2016],datasets:[{label:'Users',data:[120,60,50,180,120]}]}}"
        response = generate_chart(chart_config, method='POST')
        
        self.assertIsInstance(response, bytes)  # Should return image data for URL encoding by default.

    def test_generate_chart_with_options(self):
        chart_config = "{type:'line',data:{labels:[2012,2013,2014,2015,2016],datasets:[{label:'Sales',data:[30,20,50,60,90]}]}}"
        response = generate_chart(chart_config, width=800, height=600, device_pixel_ratio=1, encoding='base64', method='POST')
        
        self.assertIsInstance(response, bytes)  # Base64 encoded data should be returned as bytes.

    def test_generate_chart_invalid_method(self):
        chart_config = "{type:'pie',data:{labels:['Red','Blue','Yellow'],datasets:[{data:[10,20,30]}]}}"
        response = generate_chart(chart_config, method='UPDATE')
        
        self.assertDictEqual(response, {"error": "Invalid HTTP method: UPDATE"})  # Invalid method should return an error.

if __name__ == '__main__':
    unittest.main()
```

### quickchart.json

```json
{
    "tool_name": "quickchart",
    "tool_description": "QuickChart is a web service that generates chart images on-the-fly using Chart.js configurations, suitable for embedding in various formats.",
    "title": "QuickChart API",
    "pricing": "FREE",
    "score": {
        "avgServiceLevel": 97,
        "avgLatency": 100,
        "avgSuccessRate": 99,
        "popularityScore": 9.8,
        "__typename": "Score"
    },
    "home_url": "https://quickchart.io/",
    "host": "quickchart.io",
    "api_list": [
        {
            "name": "generate_chart",
            "url": "https://quickchart.io/chart",
            "description": "Generates a chart image from a given Chart.js configuration.",
            "method": "GET or POST",
            "required_parameters": [
                {
                    "name": "chart_config",
                    "type": "STRING",
                    "description": "The Chart.js configuration object in Javascript or JSON format."
                }
            ],
            "optional_parameters": [
                {
                    "name": "width",
                    "type": "INTEGER",
                    "description": "Width of image in pixels.",
                    "default": "500"
                },
                {
                    "name": "height",
                    "type": "INTEGER",
                    "description": "Height of image in pixels.",
                    "default": "300"
                },
                {
                    "name": "device_pixel_ratio",
                    "type": "INTEGER",
                    "description": "Device pixel ratio, 1 for normal resolution, 2 for retina.",
                    "default": "2"
                },
                {
                    "name": "background_color",
                    "type": "STRING",
                    "description": "Background color of the chart.",
                    "default": "transparent"
                },
                {
                    "name": "version",
                    "type": "STRING",
                    "description": "Chart.js version to use.",
                    "default": "2"
                },
                {
                    "name": "format",
                    "type": "STRING",
                    "description": "Output format for the chart.",
                    "default": "png"
                },
                {
                    "name": "encoding",
                    "type": "STRING",
                    "description": "Output encoding, url or base64.",
                    "default": "url"
                },
                {
                    "name": "method",
                    "type": "STRING",
                    "description": "HTTP method to use, 'GET' or 'POST'.",
                    "default": "GET"
                }
            ],
            "code": "import requests\n\nurl = 'https://quickchart.io/chart'\nparams = {\n    'c': chart_config,\n    'w': width,\n    'h': height,\n    'devicePixelRatio': device_pixel_ratio,\n    'bkg': background_color,\n    'v': version,\n    'format': format,\n    'encoding': encoding\n}\nresponse = requests.get(url, params=params)\n",
            "statuscode": 200,
            "body": "An image in bytes or base64 string.",
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "c": "Chart.js configuration",
                    "w": "Width",
                    "h": "Height",
                    "devicePixelRatio": "Device pixel ratio",
                    "bkg": "Background color",
                    "v": "Chart.js version",
                    "format": "Format of the image",
                    "encoding": "Encoding type"
                }
            }
        }
    ]
}
```