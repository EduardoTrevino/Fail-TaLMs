### api.py

```python
import requests
from typing import Optional, Union

def query_recent_urls(limit: Optional[int] = 1000, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Retrieve a list of recent URLs added to URLhaus.

    Parameters:
        limit (Optional[int]): Limit the number of results returned (max 1000).
    """
    url = f"https://urlhaus-api.abuse.ch/v1/urls/recent/limit/{limit}/"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def query_recent_payloads(limit: Optional[int] = 1000, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Retrieve a list of recent payloads seen by URLhaus.

    Parameters:
        limit (Optional[int]): Limit the number of results returned (max 1000).
    """
    url = f"https://urlhaus-api.abuse.ch/v1/payloads/recent/limit/{limit}/"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def query_url_info(url: Optional[str] = None, id: Optional[int] = None, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Retrieve information about a specific URL or URL ID.

    Parameters:
        url (Optional[str]): The URL to query.
        id (Optional[int]): The ID of the URL to query.
    """
    if url:
        request_url = "https://urlhaus-api.abuse.ch/v1/url/"
        data = {'url': url}
    elif id:
        request_url = "https://urlhaus-api.abuse.ch/v1/urlid/"
        data = {'urlid': id}
    else:
        return {"error": "Either 'url' or 'id' must be provided."}

    response = requests.post(request_url, data=data)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def query_host_info(host: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Retrieve information about a specific host.

    Parameters:
        host (str): The host to query (IPv4 address, hostname, or domain name).
    """
    url = "https://urlhaus-api.abuse.ch/v1/host/"
    data = {'host': host}
    response = requests.post(url, data=data)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def query_payload_info(md5_hash: Optional[str] = None, sha256_hash: Optional[str] = None, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Retrieve information about a specific payload.

    Parameters:
        md5_hash (Optional[str]): The MD5 hash of the payload.
        sha256_hash (Optional[str]): The SHA256 hash of the payload.
    """
    if md5_hash:
        url = "https://urlhaus-api.abuse.ch/v1/payload/"
        data = {'md5_hash': md5_hash}
    elif sha256_hash:
        url = "https://urlhaus-api.abuse.ch/v1/payload/"
        data = {'sha256_hash': sha256_hash}
    else:
        return {"error": "Either 'md5_hash' or 'sha256_hash' must be provided."}

    response = requests.post(url, data=data)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def query_tag_info(tag: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Retrieve information about a specific tag.

    Parameters:
        tag (str): The tag to query.
    """
    url = "https://urlhaus-api.abuse.ch/v1/tag/"
    data = {'tag': tag}
    response = requests.post(url, data=data)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def query_signature_info(signature: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Retrieve information about a specific malware signature.

    Parameters:
        signature (str): The signature to query.
    """
    url = "https://urlhaus-api.abuse.ch/v1/signature/"
    data = {'signature': signature}
    response = requests.post(url, data=data)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def download_malware_sample(sha256: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Download a malware sample by its SHA256 hash.

    Parameters:
        sha256 (str): The SHA256 hash of the payload to download.
    """
    url = f"https://urlhaus-api.abuse.ch/v1/download/{sha256}/"
    response = requests.get(url)
    if response.status_code == 200:
        return response.content
    else:
        try:
            return response.json()
        except Exception as e:
            return {"error": str(e), "response": response.text}
```

### api_test.py

```python
import unittest
from api import *

class TestUrlhausAPI(unittest.TestCase):

    def test_query_recent_urls(self):
        response = query_recent_urls(limit=3)
        self.assertIn("query_status", response)
        self.assertIn(response["query_status"], ["ok", "no_results"])

    def test_query_recent_payloads(self):
        response = query_recent_payloads(limit=3)
        self.assertIn("query_status", response)
        self.assertIn(response["query_status"], ["ok", "no_results"])

    def test_query_url_info_with_url(self):
        response = query_url_info(url="http://example.com/malware")
        self.assertIn("query_status", response)
        self.assertIn(response["query_status"], ["ok", "no_results", "invalid_url"])

    def test_query_url_info_with_id(self):
        response = query_url_info(id=105821)
        self.assertIn("query_status", response)
        self.assertIn(response["query_status"], ["ok", "no_results"])

    def test_query_host_info(self):
        response = query_host_info(host="example.com")
        self.assertIn("query_status", response)
        self.assertIn(response["query_status"], ["ok", "no_results", "invalid_host"])

    def test_query_payload_info_by_md5(self):
        response = query_payload_info(md5_hash="12c8aec5766ac3e6f26f2505e2f4a8f2")
        self.assertIn("query_status", response)
        self.assertIn(response["query_status"], ["ok", "no_results", "invalid_md5"])

    def test_query_payload_info_by_sha256(self):
        response = query_payload_info(sha256_hash="254ca6a7a7ef7f17d9884c4a86f88b5d5fd8fe5341c0996eaaf1d4bcb3b2337b")
        self.assertIn("query_status", response)
        self.assertIn(response["query_status"], ["ok", "no_results", "invalid_sha256"])

    def test_query_tag_info(self):
        response = query_tag_info(tag="Gozi")
        self.assertIn("query_status", response)
        self.assertIn(response["query_status"], ["ok", "no_results"])

    def test_query_signature_info(self):
        response = query_signature_info(signature="Heodo")
        self.assertIn("query_status", response)
        self.assertIn(response["query_status"], ["ok", "no_results"])

    def test_download_malware_sample(self):
        response = download_malware_sample(sha256="254ca6a7a7ef7f17d9884c4a86f88b5d5fd8fe5341c0996eaaf1d4bcb3b2337b")
        self.assertTrue(response)  # The response should contain content or an error message

if __name__ == '__main__':
    unittest.main()
```

### urlhaus.json

```json
{
    "tool_name": "urlhaus",
    "tool_description": "API to query and interact with URLhaus for recent URLs, payloads, and detailed information on URLs, hosts, payloads, tags, and signatures associated with malware.",
    "title": "URLhaus API",
    "pricing": "FREE",
    "score": {
        "avgServiceLevel": 90,
        "avgLatency": 200,
        "avgSuccessRate": 95,
        "popularityScore": 8.5,
        "__typename": "Score"
    },
    "home_url": "https://urlhaus-api.abuse.ch/docs/",
    "host": "urlhaus-api.abuse.ch",
    "api_list": [
        {
            "name": "query_recent_urls",
            "url": "https://urlhaus-api.abuse.ch/v1/urls/recent/",
            "description": "Get a list of recent URLs added to URLhaus.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "limit",
                    "type": "INTEGER",
                    "description": "Limit the number of results returned (max 1000).",
                    "default": "1000"
                }
            ],
            "statuscode": 200
        },
        {
            "name": "query_recent_payloads",
            "url": "https://urlhaus-api.abuse.ch/v1/payloads/recent/",
            "description": "Get a list of recent payloads seen by URLhaus.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "limit",
                    "type": "INTEGER",
                    "description": "Limit the number of results returned (max 1000).",
                    "default": "1000"
                }
            ],
            "statuscode": 200
        },
        {
            "name": "query_url_info",
            "url": "https://urlhaus-api.abuse.ch/v1/url/",
            "description": "Get information on a specific URL by URL or ID.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "url",
                    "type": "STRING",
                    "description": "The URL to query."
                },
                {
                    "name": "id",
                    "type": "INTEGER",
                    "description": "The ID of the URL to query."
                }
            ],
            "statuscode": 200
        },
        {
            "name": "query_host_info",
            "url": "https://urlhaus-api.abuse.ch/v1/host/",
            "description": "Get information about a specific host.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "host",
                    "type": "STRING",
                    "description": "The host to query (IPv4 address, hostname, or domain name)."
                }
            ],
            "statuscode": 200
        },
        {
            "name": "query_payload_info",
            "url": "https://urlhaus-api.abuse.ch/v1/payload/",
            "description": "Get information about a specific payload.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "md5_hash",
                    "type": "STRING",
                    "description": "The MD5 hash of the payload."
                },
                {
                    "name": "sha256_hash",
                    "type": "STRING",
                    "description": "The SHA256 hash of the payload."
                }
            ],
            "statuscode": 200
        },
        {
            "name": "query_tag_info",
            "url": "https://urlhaus-api.abuse.ch/v1/tag/",
            "description": "Get information about a specific tag.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "tag",
                    "type": "STRING",
                    "description": "The tag to query."
                }
            ],
            "statuscode": 200
        },
        {
            "name": "query_signature_info",
            "url": "https://urlhaus-api.abuse.ch/v1/signature/",
            "description": "Get information about a specific malware signature.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "signature",
                    "type": "STRING",
                    "description": "The signature to query."
                }
            ],
            "statuscode": 200
        },
        {
            "name": "download_malware_sample",
            "url": "https://urlhaus-api.abuse.ch/v1/download/<sha256>",
            "description": "Download a malware sample by its SHA256 hash.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "sha256",
                    "type": "STRING",
                    "description": "The SHA256 hash of the payload to download."
                }
            ],
            "statuscode": 200
        }
    ]
}
```