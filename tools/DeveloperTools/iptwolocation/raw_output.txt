**### api.py**  
```python
import requests
from typing import Optional, List


def ip_geolocation(ip: Optional[str] = None, format: Optional[str] = 'json', lang: Optional[str] = None, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: Get geolocation information for a given IP address.
    Parameters:
    ip [Optional]: string [Description: IP address (IPv4 or IPv6), if not provided, the caller's IP will be used]
    format [Optional]: string [Description: Response format, valid values: json | xml, default is json]
    lang [Optional]: string [Description: Translation language in ISO639-1, applicable for certain plans only]
    """
    url = "https://api.ip2location.io/"
    params = {
        'ip': ip,
        'key': toolbench_rapidapi_key,
        'format': format
    }
    if lang:
        params['lang'] = lang

    response = requests.get(url, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def domain_whois(domain: str, format: Optional[str] = 'json', toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: Get WHOIS data for a given domain name.
    Parameters:
    domain [Required]: string [Description: Domain name for the WHOIS lookup]
    format [Optional]: string [Description: Response format, valid values: json | xml, default is json]
    """
    url = "https://api.ip2whois.com/v2"
    params = {
        'domain': domain,
        'key': toolbench_rapidapi_key,
        'format': format
    }

    response = requests.get(url, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def bulk_ip_geolocation(ips: List[str], format: Optional[str] = 'json', fields: Optional[str] = None, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Endpoint description: Get geolocation information for multiple IP addresses in bulk.
    Parameters:
    ips [Required]: list of strings [Description: IP addresses (IPv4 or IPv6) to lookup]
    format [Optional]: string [Description: Response format, valid values: json | csv, default is json]
    fields [Optional]: string [Description: Custom fields to return, separated by commas, defaults to all fields]
    """
    url = "https://bulk.ip2location.io/"
    params = {
        'key': toolbench_rapidapi_key,
        'format': format,
    }
    if fields:
        params['fields'] = fields
    
    headers = {
        'Content-Type': 'application/json'
    }
    response = requests.post(url, params=params, headers=headers, json=ips)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}
```

**### api_test.py**  
```python
import unittest
from api import ip_geolocation, domain_whois, bulk_ip_geolocation


class TestIPTwoLocationAPI(unittest.TestCase):

    def test_ip_geolocation(self):
        response = ip_geolocation(ip='8.8.8.8')
        self.assertIsInstance(response, dict)
        self.assertIn('ip', response)

    def test_domain_whois(self):
        response = domain_whois(domain='google.com')
        self.assertIsInstance(response, dict)
        self.assertIn('domain', response)

    def test_bulk_ip_geolocation(self):
        ips = ['1.1.1.1', '2.2.2.2']
        response = bulk_ip_geolocation(ips=ips)
        self.assertIsInstance(response, dict)
        for ip in ips:
            self.assertIn(ip, response)

    def test_ip_geolocation_invalid_ip(self):
        response = ip_geolocation(ip='999.999.999.999')
        self.assertIsInstance(response, dict)
        self.assertIn('error', response)

    def test_domain_whois_not_found(self):
        response = domain_whois(domain='doesnotexist.tld')
        self.assertIsInstance(response, dict)
        self.assertIn('error', response)


if __name__ == '__main__':
    unittest.main()
```

**### iptwolocation.json**  
```json
{
    "tool_name": "iptwolocation",
    "tool_description": "API providing IP geolocation and domain WHOIS data.",
    "title": "IP2Location and IP2WHOIS API",
    "pricing": "FREE for limited queries",
    "score": {
        "avgServiceLevel": 98,
        "avgLatency": 200,
        "avgSuccessRate": 99,
        "popularityScore": 9.2,
        "__typename": "Score"
    },
    "home_url": "https://www.ip2location.com/web-service/ip2location",
    "host": "api.ip2location.io",
    "api_list": [
        {
            "name": "ip_geolocation",
            "url": "https://api.ip2location.io/",
            "description": "Get geolocation information for a given IP address.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "ip",
                    "type": "STRING",
                    "description": "IP address to lookup.",
                    "default": null
                },
                {
                    "name": "format",
                    "type": "STRING",
                    "description": "Response format, valid values: json | xml.",
                    "default": "json"
                },
                {
                    "name": "lang",
                    "type": "STRING",
                    "description": "Translation language in ISO639-1, applicable for certain plans.",
                    "default": null
                }
            ],
            "statuscode": 200,
            "body": {
                "ip": "str",
                "country_code": "str",
                "country_name": "str",
                "region_name": "str",
                "city_name": "str",
                "latitude": "float",
                "longitude": "float",
                "zip_code": "str",
                "time_zone": "str",
                "asn": "str",
                "is_proxy": "bool"
            }
        },
        {
            "name": "domain_whois",
            "url": "https://api.ip2whois.com/v2",
            "description": "Get WHOIS data for a given domain name.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "domain",
                    "type": "STRING",
                    "description": "Domain name for the WHOIS lookup."
                }
            ],
            "optional_parameters": [
                {
                    "name": "format",
                    "type": "STRING",
                    "description": "Response format, valid values: json | xml.",
                    "default": "json"
                }
            ],
            "statuscode": 200,
            "body": {
                "domain": "str",
                "create_date": "str",
                "update_date": "str",
                "expire_date": "str",
                "domain_age": "int"
            }
        },
        {
            "name": "bulk_ip_geolocation",
            "url": "https://bulk.ip2location.io/",
            "description": "Get geolocation information for multiple IP addresses in bulk.",
            "method": "POST",
            "required_parameters": [
                {
                    "name": "ips",
                    "type": "LIST",
                    "description": "List of IP addresses to lookup."
                }
            ],
            "optional_parameters": [
                {
                    "name": "format",
                    "type": "STRING",
                    "description": "Response format, valid values: json | csv.",
                    "default": "json"
                },
                {
                    "name": "fields",
                    "type": "STRING",
                    "description": "Custom fields to return, separated by commas.",
                    "default": null
                }
            ],
            "statuscode": 200,
            "body": {
                "ip": {
                    "country_code": "str",
                    "country_name": "str",
                    "region_name": "str",
                    "city_name": "str",
                    "latitude": "float",
                    "longitude": "float",
                    "zip_code": "str",
                    "time_zone": "str",
                    "asn": "str",
                    "is_proxy": "bool"
                }
            }
        }
    ]
}
```