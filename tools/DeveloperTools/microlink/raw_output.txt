### api.py
```python
import requests
from typing import Optional, Dict, Union

# Default API key
toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'

def retrieve_metadata(url: str, adblock: Optional[bool] = True, animations: Optional[bool] = False, audio: Optional[bool] = False, colors: Optional[bool] = True) -> Dict:
    """
    Retrieve metadata from any link using the Microlink API.
    
    :param url: The URL to retrieve metadata for.
    :param adblock: Allows/disallows third-party ad requests (default is True).
    :param animations: Enables/disables CSS animations (default is False).
    :param audio: Enables audio source detection (default is False).
    :param colors: Colorize output (default is True).
    :return: JSON response with metadata.
    """
    endpoint = "https://api.microlink.io"
    params = {
        'url': url,
        'adblock': adblock,
        'animations': animations,
        'audio': audio,
        'colors': colors
    }
    response = requests.get(endpoint, params=params)
    return response.json()


def take_screenshot(url: str, screenshot: bool = True) -> Dict:
    """
    Take a screenshot of the target website.
    
    :param url: The URL of the website to screenshot.
    :param screenshot: Boolean to take a screenshot (default is True).
    :return: JSON response with screenshot data.
    """
    endpoint = "https://api.microlink.io"
    params = {
        'url': url,
        'screenshot': screenshot
    }
    response = requests.get(endpoint, params=params)
    return response.json()


def filter_data(url: str, filter: str) -> Dict:
    """
    Filter specific data fields from the response payload.
    
    :param url: The URL to process.
    :param filter: Comma-separated list of data fields to include.
    :return: Filtered JSON response.
    """
    endpoint = "https://api.microlink.io"
    params = {
        'url': url,
        'filter': filter
    }
    response = requests.get(endpoint, params=params)
    return response.json()


def execute_custom_query(url: str, additional_params: Dict[str, Union[str, bool]]) -> Dict:
    """
    Execute a custom query with additional parameters.
    
    :param url: The target URL.
    :param additional_params: Dictionary of additional query parameters.
    :return: JSON response based on the custom query.
    """
    endpoint = "https://api.microlink.io"
    params = {'url': url}
    params.update(additional_params)
    response = requests.get(endpoint, params=params)
    return response.json()
```

### api_test.py
```python
import unittest
from api import retrieve_metadata, take_screenshot, filter_data, execute_custom_query

class TestMicrolinkAPI(unittest.TestCase):

    def test_retrieve_metadata(self):
        response = retrieve_metadata('https://github.com')
        self.assertEqual(response['status'], 'success')
        self.assertIn('data', response)
    
    def test_take_screenshot(self):
        response = take_screenshot('https://github.com')
        self.assertEqual(response['status'], 'success')
        self.assertIn('data', response)
    
    def test_filter_data(self):
        response = filter_data('https://news.ycombinator.com', 'url,title')
        self.assertEqual(response['status'], 'success')
        self.assertIn('data', response)
        self.assertIn('title', response['data'])
    
    def test_execute_custom_query(self):
        custom_params = {'adblock': False, 'audio': True}
        response = execute_custom_query('https://www.youtube.com', custom_params)
        self.assertEqual(response['status'], 'success')
        self.assertIn('data', response)


if __name__ == '__main__':
    unittest.main()
```

### microlink.json
```json
{
    "tool_name": "microlink",
    "tool_description": "Microlink API provides a powerful API for automating any browser action.",
    "title": "Microlink API",
    "pricing": "FREE endpoint available with daily rate limit, PRO endpoint requires authentication.",
    "score": {
        "avgServiceLevel": 98,
        "avgLatency": 120,
        "avgSuccessRate": 97,
        "popularityScore": 9.0,
        "__typename": "Score"
    },
    "home_url": "https://microlink.io",
    "host": "api.microlink.io",
    "api_list": [
        {
            "name": "retrieve_metadata",
            "url": "https://api.microlink.io",
            "description": "Retrieve metadata from any link.",
            "method": "GET",
            "required_parameters": ["url"],
            "optional_parameters": [
                {"name": "adblock", "type": "BOOLEAN", "default": "true"},
                {"name": "animations", "type": "BOOLEAN", "default": "false"},
                {"name": "audio", "type": "BOOLEAN", "default": "false"},
                {"name": "colors", "type": "BOOLEAN", "default": "true"}
            ],
            "sample_code": "import requests\n\nurl = 'https://api.microlink.io'\nparams = {'url': 'https://github.com'}\nresponse = requests.get(url, params=params)\nprint(response.json())",
            "statuscode": 200
        },
        {
            "name": "take_screenshot",
            "url": "https://api.microlink.io",
            "description": "Take a screenshot of the target website.",
            "method": "GET",
            "required_parameters": ["url"],
            "optional_parameters": [
                {"name": "screenshot", "type": "BOOLEAN", "default": "true"}
            ],
            "sample_code": "import requests\n\nurl = 'https://api.microlink.io'\nparams = {'url': 'https://github.com', 'screenshot': True}\nresponse = requests.get(url, params=params)\nprint(response.json())",
            "statuscode": 200
        },
        {
            "name": "filter_data",
            "url": "https://api.microlink.io",
            "description": "Filter specific data fields from response payload.",
            "method": "GET",
            "required_parameters": ["url", "filter"],
            "optional_parameters": [],
            "sample_code": "import requests\n\nurl = 'https://api.microlink.io'\nparams = {'url': 'https://news.ycombinator.com', 'filter': 'url,title'}\nresponse = requests.get(url, params=params)\nprint(response.json())",
            "statuscode": 200
        }
    ]
}
```