**### api.py**

```python
import requests
from typing import Optional

API_BASE_URL = "https://statsapi.web.nhl.com/api/v1"

def get_awards(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/awards"
    response = requests.get(url)
    return response.json()

def get_award(award_id: int, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/awards/{award_id}"
    response = requests.get(url)
    return response.json()

def get_conferences(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/conferences"
    response = requests.get(url)
    return response.json()

def get_conference(conference_id: int, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/conferences/{conference_id}"
    response = requests.get(url)
    return response.json()

def get_divisions(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/divisions"
    response = requests.get(url)
    return response.json()

def get_division(division_id: int, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/divisions/{division_id}"
    response = requests.get(url)
    return response.json()

def get_franchises(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/franchises"
    response = requests.get(url)
    return response.json()

def get_franchise(franchise_id: int, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/franchises/{franchise_id}"
    response = requests.get(url)
    return response.json()

def get_tournament_types(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/tournamentTypes"
    response = requests.get(url)
    return response.json()

def get_tournaments_playoffs(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/tournaments/playoffs"
    response = requests.get(url)
    return response.json()

def get_venues(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/venues"
    response = requests.get(url)
    return response.json()

def get_venue(venue_id: int, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/venues/{venue_id}"
    response = requests.get(url)
    return response.json()

def get_game_live_feed(game_id: int, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/game/{game_id}/feed/live"
    response = requests.get(url)
    return response.json()

def get_game_boxscore(game_id: int, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/game/{game_id}/boxscore"
    response = requests.get(url)
    return response.json()

def get_game_linescore(game_id: int, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/game/{game_id}/linescore"
    response = requests.get(url)
    return response.json()

def get_game_content(game_id: int, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/game/{game_id}/content"
    response = requests.get(url)
    return response.json()

def get_game_statuses(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/gameStatus"
    response = requests.get(url)
    return response.json()

def get_game_types(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/gameTypes"
    response = requests.get(url)
    return response.json()

def get_play_types(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/playTypes"
    response = requests.get(url)
    return response.json()

def get_draft(year: Optional[int] = None, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/draft"
    if year:
        url += f"/{year}"
    response = requests.get(url)
    return response.json()

def get_people(person_id: int, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/people/{person_id}"
    response = requests.get(url)
    return response.json()

def get_people_stats(person_id: int, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/people/{person_id}/stats"
    response = requests.get(url)
    return response.json()

def get_positions(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/positions"
    response = requests.get(url)
    return response.json()

def get_prospects(prospect_id: Optional[int] = None, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/draft/prospects"
    if prospect_id:
        url += f"/{prospect_id}"
    response = requests.get(url)
    return response.json()

def get_schedule(start_date: Optional[str] = None, end_date: Optional[str] = None, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/schedule"
    params = {}
    if start_date:
        params['startDate'] = start_date
    if end_date:
        params['endDate'] = end_date
    response = requests.get(url, params=params)
    return response.json()

def get_seasons(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/seasons"
    response = requests.get(url)
    return response.json()

def get_season(season_id: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/seasons/{season_id}"
    response = requests.get(url)
    return response.json()

def get_current_season(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/seasons/current"
    response = requests.get(url)
    return response.json()

def get_standings(season: Optional[str] = None, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/standings"
    if season:
        url += f"?season={season}"
    response = requests.get(url)
    return response.json()

def get_standings_types(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/standingsTypes"
    response = requests.get(url)
    return response.json()

def get_team_stats(team_id: int, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/teams/{team_id}/stats"
    response = requests.get(url)
    return response.json()

def get_teams(team_id: Optional[int] = None, expand: Optional[str] = None, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/teams"
    if team_id:
        url += f"/{team_id}"
    params = {}
    if expand:
        params['expand'] = expand
    response = requests.get(url, params=params)
    return response.json()

def get_team_roster(team_id: int, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/teams/{team_id}/roster"
    response = requests.get(url)
    return response.json()

def get_configurations(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    url = f"{API_BASE_URL}/configurations"
    response = requests.get(url)
    return response.json()
```

**### api_test.py**

```python
import unittest
from api import *

class TestNHLAPI(unittest.TestCase):

    def test_get_awards(self):
        response = get_awards()
        self.assertIn('awards', response)

    def test_get_award(self):
        response = get_award(1)
        self.assertIn('awards', response)

    def test_get_conferences(self):
        response = get_conferences()
        self.assertIn('conferences', response)

    def test_get_conference(self):
        response = get_conference(6)
        self.assertIn('conferences', response)
    
    def test_get_divisions(self):
        response = get_divisions()
        self.assertIn('divisions', response)

    def test_get_division(self):
        response = get_division(17)
        self.assertIn('divisions', response)

    def test_get_franchises(self):
        response = get_franchises()
        self.assertIn('franchises', response)

    def test_get_franchise(self):
        response = get_franchise(1)
        self.assertIn('franchises', response)

    def test_get_tournament_types(self):
        response = get_tournament_types()
        self.assertIn('types', response)

    def test_get_tournaments_playoffs(self):
        response = get_tournaments_playoffs()
        self.assertIn('name', response)

    def test_get_venues(self):
        response = get_venues()
        self.assertIn('venues', response)

    def test_get_venue(self):
        response = get_venue(5064)
        self.assertIn('venues', response)

    def test_get_game_live_feed(self):
        response = get_game_live_feed(2017020010)
        self.assertIn('gameData', response)

    def test_get_game_boxscore(self):
        response = get_game_boxscore(2017020010)
        self.assertIn('teams', response)

    def test_get_game_linescore(self):
        response = get_game_linescore(2017020010)
        self.assertIn('teams', response)

    def test_get_game_content(self):
        response = get_game_content(2017020010)
        self.assertIn('media', response)

    def test_get_game_statuses(self):
        response = get_game_statuses()
        self.assertIsInstance(response, list)

    def test_get_game_types(self):
        response = get_game_types()
        self.assertIsInstance(response, list)

    def test_get_play_types(self):
        response = get_play_types()
        self.assertIsInstance(response, list)

    def test_get_draft(self):
        response = get_draft()
        self.assertIn('drafts', response)

    def test_get_draft_year(self):
        response = get_draft(2021)
        self.assertIn('drafts', response)

    def test_get_people(self):
        response = get_people(8477474)
        self.assertIn('people', response)

    def test_get_people_stats(self):
        response = get_people_stats(8477474)
        self.assertIn('stats', response)

    def test_get_positions(self):
        response = get_positions()
        self.assertIsInstance(response, list)

    def test_get_prospects(self):
        response = get_prospects()
        self.assertIn('prospects', response)

    def test_get_schedule(self):
        response = get_schedule()
        self.assertIn('dates', response)

    def test_get_seasons(self):
        response = get_seasons()
        self.assertIn('seasons', response)

    def test_get_season(self):
        response = get_season("20172018")
        self.assertIn('seasons', response)

    def test_get_current_season(self):
        response = get_current_season()
        self.assertIn('seasons', response)

    def test_get_standings(self):
        response = get_standings()
        self.assertIn('teamRecords', response)

    def test_get_standings_types(self):
        response = get_standings_types()
        self.assertIsInstance(response, list)

    def test_get_team_stats(self):
        response = get_team_stats(5)
        self.assertIn('stats', response)

    def test_get_teams(self):
        response = get_teams()
        self.assertIn('teams', response)

    def test_get_team_roster(self):
        response = get_team_roster(5)
        self.assertIn('roster', response)

    def test_get_configurations(self):
        response = get_configurations()
        self.assertIsInstance(response, dict)

if __name__ == '__main__':
    unittest.main()
```

**### nhl.json**

```json
{
    "tool_name": "nhl",
    "tool_description": "API to access a wide range of NHL data including league details, games, player stats, and team info.",
    "title": "NHL Stats API",
    "pricing": "FREE",
    "score": {
        "avgServiceLevel": 99,
        "avgLatency": 200,
        "avgSuccessRate": 99,
        "popularityScore": 9.8,
        "__typename": "Score"
    },
    "home_url": "https://statsapi.web.nhl.com",
    "host": "statsapi.web.nhl.com",
    "api_list": [
        {
            "name": "get_awards",
            "url": "https://statsapi.web.nhl.com/api/v1/awards",
            "description": "Get all NHL Awards.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": []
        },
        {
            "name": "get_award",
            "url": "https://statsapi.web.nhl.com/api/v1/awards/{award_id}",
            "description": "Get an NHL Award by ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "award_id",
                    "type": "INTEGER",
                    "description": "The ID of the award",
                    "default": null
                }
            ],
            "optional_parameters": []
        },
        {
            "name": "get_conferences",
            "url": "https://statsapi.web.nhl.com/api/v1/conferences",
            "description": "Get all current NHL conferences.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": []
        },
        {
            "name": "get_conference",
            "url": "https://statsapi.web.nhl.com/api/v1/conferences/{conference_id}",
            "description": "Get a specific NHL conference by ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "conference_id",
                    "type": "INTEGER",
                    "description": "The ID of the conference",
                    "default": null
                }
            ],
            "optional_parameters": []
        },
        {
            "name": "get_divisions",
            "url": "https://statsapi.web.nhl.com/api/v1/divisions",
            "description": "Get all current NHL divisions.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": []
        },
        {
            "name": "get_division",
            "url": "https://statsapi.web.nhl.com/api/v1/divisions/{division_id}",
            "description": "Get a specific NHL division by ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "division_id",
                    "type": "INTEGER",
                    "description": "The ID of the division",
                    "default": null
                }
            ],
            "optional_parameters": []
        },
        {
            "name": "get_franchises",
            "url": "https://statsapi.web.nhl.com/api/v1/franchises",
            "description": "Get a list of all franchises.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": []
        },
        {
            "name": "get_franchise",
            "url": "https://statsapi.web.nhl.com/api/v1/franchises/{franchise_id}",
            "description": "Get information on a specific franchise by ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "franchise_id",
                    "type": "INTEGER",
                    "description": "The ID of the franchise",
                    "default": null
                }
            ],
            "optional_parameters": []
        },
        {
            "name": "get_tournament_types",
            "url": "https://statsapi.web.nhl.com/api/v1/tournamentTypes",
            "description": "Get the possible different tournament types.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": []
        },
        {
            "name": "get_tournaments_playoffs",
            "url": "https://statsapi.web.nhl.com/api/v1/tournaments/playoffs",
            "description": "Get tracking data for nested tournaments, specifically the Playoffs.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": []
        },
        {
            "name": "get_venues",
            "url": "https://statsapi.web.nhl.com/api/v1/venues",
            "description": "Get all NHL Venues in API database.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": []
        },
        {
            "name": "get_venue",
            "url": "https://statsapi.web.nhl.com/api/v1/venues/{venue_id}",
            "description": "Get an NHL Venue by ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "venue_id",
                    "type": "INTEGER",
                    "description": "The ID of the venue",
                    "default": null
                }
            ],
            "optional_parameters": []
        },
        {
            "name": "get_game_live_feed",
            "url": "https://statsapi.web.nhl.com/api/v1/game/{game_id}/feed/live",
            "description": "Get all data about a specified game id including play data.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "game_id",
                    "type": "INTEGER",
                    "description": "The ID of the game",
                    "default": null
                }
            ],
            "optional_parameters": []
        },
        {
            "name": "get_game_boxscore",
            "url": "https://statsapi.web.nhl.com/api/v1/game/{game_id}/boxscore",
            "description": "Get post-game details for a specified game id.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "game_id",
                    "type": "INTEGER",
                    "description": "The ID of the game",
                    "default": null
                }
            ],
            "optional_parameters": []
        },
        {
            "name": "get_game_linescore",
            "url": "https://statsapi.web.nhl.com/api/v1/game/{game_id}/linescore",
            "description": "Get basic game details for a specified game id.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "game_id",
                    "type": "INTEGER",
                    "description": "The ID of the game",
                    "default": null
                }
            ],
            "optional_parameters": []
        },
        {
            "name": "get_game_content",
            "url": "https://statsapi.web.nhl.com/api/v1/game/{game_id}/content",
            "description": "Get media content for a specified game id.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "game_id",
                    "type": "INTEGER",
                    "description": "The ID of the game",
                    "default": null
                }
            ],
            "optional_parameters": []
        },
        {
            "name": "get_game_statuses",
            "url": "https://statsapi.web.nhl.com/api/v1/gameStatus",
            "description": "Get list of all possible game statuses.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": []
        },
        {
            "name": "get_game_types",
            "url": "https://statsapi.web.nhl.com/api/v1/gameTypes",
            "description": "Get list of possible game types.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": []
        },
        {
            "name": "get_play_types",
            "url": "https://statsapi.web.nhl.com/api/v1/playTypes",
            "description": "Get all possible play types.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": []
        },
        {
            "name": "get_draft",
            "url": "https://statsapi.web.nhl.com/api/v1/draft",
            "description": "Get round-by-round data for the current or specified year's NHL Entry Draft.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "year",
                    "type": "INTEGER",
                    "description": "The year of the draft",
                    "default": "current"
                }
            ]
        },
        {
            "name": "get_people",
            "url": "https://statsapi.web.nhl.com/api/v1/people/{person_id}",
            "description": "Get details for a player using their ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "person_id",
                    "type": "INTEGER",
                    "description": "The ID of the person",
                    "default": null
                }
            ],
            "optional_parameters": []
        },
        {
            "name": "get_people_stats",
            "url": "https://statsapi.web.nhl.com/api/v1/people/{person_id}/stats",
            "description": "Get stats for a player using their ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "person_id",
                    "type": "INTEGER",
                    "description": "The ID of the person",
                    "default": null
                }
            ],
            "optional_parameters": []
        },
        {
            "name": "get_positions",
            "url": "https://statsapi.web.nhl.com/api/v1/positions",
            "description": "Get all eligible positions in the NHL.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": []
        },
        {
            "name": "get_prospects",
            "url": "https://statsapi.web.nhl.com/api/v1/draft/prospects",
            "description": "Get all NHL Entry Draft prospects or a specific prospect by ID.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "prospect_id",
                    "type": "INTEGER",
                    "description": "The ID of the prospect",
                    "default": null
                }
            ]
        },
        {
            "name": "get_schedule",
            "url": "https://statsapi.web.nhl.com/api/v1/schedule",
            "description": "Get schedule data for a specified date range or current day.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "start_date",
                    "type": "STRING",
                    "description": "Start date for the schedule search",
                    "default": "current day"
                },
                {
                    "name": "end_date",
                    "type": "STRING",
                    "description": "End date for the schedule search",
                    "default": null
                }
            ]
        },
        {
            "name": "get_seasons",
            "url": "https://statsapi.web.nhl.com/api/v1/seasons",
            "description": "Get data on each season.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": []
        },
        {
            "name": "get_season",
            "url": "https://statsapi.web.nhl.com/api/v1/seasons/{season_id}",
            "description": "Get data for a specific season by ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "season_id",
                    "type": "STRING",
                    "description": "The season ID (e.g., 20172018)",
                    "default": null
                }
            ],
            "optional_parameters": []
        },
        {
            "name": "get_current_season",
            "url": "https://statsapi.web.nhl.com/api/v1/seasons/current",
            "description": "Get the current season data.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": []
        },
        {
            "name": "get_standings",
            "url": "https://statsapi.web.nhl.com/api/v1/standings",
            "description": "Get ordered standings data.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "season",
                    "type": "STRING",
                    "description": "Season ID for standings (e.g., 20032004)",
                    "default": "current season"
                }
            ]
        },
        {
            "name": "get_standings_types",
            "url": "https://statsapi.web.nhl.com/api/v1/standingsTypes",
            "description": "Get all the standings types.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": []
        },
        {
            "name": "get_team_stats",
            "url": "https://statsapi.web.nhl.com/api/v1/teams/{team_id}/stats",
            "description": "Get current season stats and rankings for a specific team by ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "team_id",
                    "type": "INTEGER",
                    "description": "The ID of the team",
                    "default": null
                }
            ],
            "optional_parameters": []
        },
        {
            "name": "get_teams",
            "url": "https://statsapi.web.nhl.com/api/v1/teams",
            "description": "Get data about all teams or a specific team by ID.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "team_id",
                    "type": "INTEGER",
                    "description": "The ID of the team",
                    "default": null
                },
                {
                    "name": "expand",
                    "type": "STRING",
                    "description": "A comma-separated list of items to expand (e.g., team.roster, team.stats)",
                    "default": null
                }
            ]
        },
        {
            "name": "get_team_roster",
            "url": "https://statsapi.web.nhl.com/api/v1/teams/{team_id}/roster",
            "description": "Get entire roster for a team by ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "team_id",
                    "type": "INTEGER",
                    "description": "The ID of the team",
                    "default": null
                }
            ],
            "optional_parameters": []
        },
        {
            "name": "get_configurations",
            "url": "https://statsapi.web.nhl.com/api/v1/configurations",
            "description": "Get a list of other endpoints in the NHL API.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": []
        }
    ]
}
```