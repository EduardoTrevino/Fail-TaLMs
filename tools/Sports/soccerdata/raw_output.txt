### api.py
```python
import requests
from typing import Optional, List


def get_area_by_id(area_id: int, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Get details of one particular area by its ID.
    
    Parameters:
    area_id (int): The ID of the area.
    """
    url = f"https://api.football-data.org/v4/areas/{area_id}"
    headers = {
        'X-Auth-Token': toolbench_rapidapi_key
    }
    response = requests.get(url, headers=headers)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def list_areas(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    List all available areas.
    """
    url = "https://api.football-data.org/v4/areas"
    headers = {
        'X-Auth-Token': toolbench_rapidapi_key
    }
    response = requests.get(url, headers=headers)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def get_competition_by_code(competition_code: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Get details of one particular competition by its code.
    
    Parameters:
    competition_code (str): The code of the competition.
    """
    url = f"https://api.football-data.org/v4/competitions/{competition_code}"
    headers = {
        'X-Auth-Token': toolbench_rapidapi_key
    }
    response = requests.get(url, headers=headers)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def list_competitions(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff', areas: Optional[str] = None):
    """
    List all available competitions.
    
    Parameters:
    areas (str): Comma separated list of area IDs.
    """
    url = "https://api.football-data.org/v4/competitions"
    headers = {
        'X-Auth-Token': toolbench_rapidapi_key
    }
    params = {}
    if areas:
        params['areas'] = areas
    
    response = requests.get(url, headers=headers, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def get_competition_standings(competition_id: int, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff', season: Optional[int] = None):
    """
    Show standings for a particular competition.
    
    Parameters:
    competition_id (int): The ID of the competition.
    season (int): The starting year of the season.
    """
    url = f"https://api.football-data.org/v4/competitions/{competition_id}/standings"
    headers = {
        'X-Auth-Token': toolbench_rapidapi_key
    }
    params = {}
    if season:
        params['season'] = season
    
    response = requests.get(url, headers=headers, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def get_matches_for_competition(competition_id: int, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff', matchday: Optional[int] = None):
    """
    List all matches for a particular competition.
    
    Parameters:
    competition_id (int): The ID of the competition.
    matchday (int): The matchday to retrieve matches for.
    """
    url = f"https://api.football-data.org/v4/competitions/{competition_id}/matches"
    headers = {
        'X-Auth-Token': toolbench_rapidapi_key
    }
    params = {}
    if matchday:
        params['matchday'] = matchday
    
    response = requests.get(url, headers=headers, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def get_team_info(team_id: int, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Show information about one particular team by its ID.
    
    Parameters:
    team_id (int): The ID of the team.
    """
    url = f"https://api.football-data.org/v4/teams/{team_id}"
    headers = {
        'X-Auth-Token': toolbench_rapidapi_key
    }
    response = requests.get(url, headers=headers)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def list_teams(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff', limit: Optional[int] = 10, offset: Optional[int] = 0):
    """
    List all teams with pagination.
    
    Parameters:
    limit (int): Number of teams to retrieve.
    offset (int): Number of teams to skip.
    """
    url = "https://api.football-data.org/v4/teams/"
    headers = {
        'X-Auth-Token': toolbench_rapidapi_key
    }
    params = {
        'limit': limit,
        'offset': offset
    }
    
    response = requests.get(url, headers=headers, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def get_player_info(player_id: int, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Show information about one particular player by their ID.
    
    Parameters:
    player_id (int): The ID of the player.
    """
    url = f"https://api.football-data.org/v4/persons/{player_id}"
    headers = {
        'X-Auth-Token': toolbench_rapidapi_key
    }
    response = requests.get(url, headers=headers)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def list_matches_across_competitions(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff', date_from: Optional[str] = None, date_to: Optional[str] = None, competitions: Optional[str] = None):
    """
    List matches across a set of competitions.
    
    Parameters:
    date_from (str): The start date for matches.
    date_to (str): The end date for matches.
    competitions (str): Comma separated list of competition IDs.
    """
    url = "https://api.football-data.org/v4/matches"
    headers = {
        'X-Auth-Token': toolbench_rapidapi_key
    }
    params = {}
    if date_from:
        params['dateFrom'] = date_from
    if date_to:
        params['dateTo'] = date_to
    if competitions:
        params['competitions'] = competitions
    
    response = requests.get(url, headers=headers, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def get_match_by_id(match_id: int, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Show one particular match by its ID.
    
    Parameters:
    match_id (int): The ID of the match.
    """
    url = f"https://api.football-data.org/v4/matches/{match_id}"
    headers = {
        'X-Auth-Token': toolbench_rapidapi_key
    }
    response = requests.get(url, headers=headers)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def list_head2head_matches(match_id: int, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff', limit: Optional[int] = 10):
    """
    List previous encounters for the teams of a match.
    
    Parameters:
    match_id (int): The ID of the match.
    limit (int): Number of encounters to retrieve.
    """
    url = f"https://api.football-data.org/v4/matches/{match_id}/head2head"
    headers = {
        'X-Auth-Token': toolbench_rapidapi_key
    }
    params = {'limit': limit}
    
    response = requests.get(url, headers=headers, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}
```

### api_test.py
```python
import unittest
from api import (
    get_area_by_id, list_areas, get_competition_by_code, list_competitions, 
    get_competition_standings, get_matches_for_competition, get_team_info,
    list_teams, get_player_info, list_matches_across_competitions,
    get_match_by_id, list_head2head_matches
)

class TestSoccerDataAPI(unittest.TestCase):

    def test_get_area_by_id(self):
        response = get_area_by_id(2267)
        self.assertIn("id", response)
        self.assertEqual(response["id"], 2267)

    def test_list_areas(self):
        response = list_areas()
        self.assertIn("areas", response)
        self.assertIsInstance(response["areas"], list)

    def test_get_competition_by_code(self):
        response = get_competition_by_code("PL")
        self.assertIn("code", response)
        self.assertEqual(response["code"], "PL")

    def test_list_competitions(self):
        response = list_competitions()
        self.assertIn("competitions", response)
        self.assertIsInstance(response["competitions"], list)

    def test_get_competition_standings(self):
        response = get_competition_standings(2021)
        self.assertIn("competition", response)
        self.assertEqual(response["competition"]["id"], 2021)

    def test_get_matches_for_competition(self):
        response = get_matches_for_competition(2002)
        self.assertIn("matches", response)
        self.assertIsInstance(response["matches"], list)

    def test_get_team_info(self):
        response = get_team_info(66)
        self.assertIn("id", response)
        self.assertEqual(response["id"], 66)

    def test_list_teams(self):
        response = list_teams()
        self.assertIn("teams", response)
        self.assertIsInstance(response["teams"], list)

    def test_get_player_info(self):
        response = get_player_info(44)
        self.assertIn("id", response)
        self.assertEqual(response["id"], 44)

    def test_list_matches_across_competitions(self):
        response = list_matches_across_competitions(date_from="2022-05-17", date_to="2022-05-18")
        self.assertIn("matches", response)
        self.assertIsInstance(response["matches"], list)

    def test_get_match_by_id(self):
        response = get_match_by_id(327117)
        self.assertIn("id", response)
        self.assertEqual(response["id"], 327117)

    def test_list_head2head_matches(self):
        response = list_head2head_matches(327125)
        self.assertIn("matches", response)
        self.assertIsInstance(response["matches"], list)

if __name__ == '__main__':
    unittest.main()
```

### soccerdata.json
```json
{
    "tool_name": "soccerdata",
    "tool_description": "API to access detailed football data, including areas, competitions, teams, matches, and players.",
    "title": "Football Data API",
    "pricing": "FREE",
    "score": {
        "avgServiceLevel": 90,
        "avgLatency": 200,
        "avgSuccessRate": 95,
        "popularityScore": 9.2,
        "__typename": "Score"
    },
    "home_url": "https://www.football-data.org/",
    "host": "api.football-data.org",
    "api_list": [
        {
            "name": "get_area_by_id",
            "url": "https://api.football-data.org/v4/areas/{id}",
            "description": "Get details of one particular area by its ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "area_id",
                    "type": "INTEGER",
                    "description": "The ID of the area.",
                    "default": null
                }
            ]
        },
        {
            "name": "list_areas",
            "url": "https://api.football-data.org/v4/areas",
            "description": "List all available areas.",
            "method": "GET",
            "required_parameters": []
        },
        {
            "name": "get_competition_by_code",
            "url": "https://api.football-data.org/v4/competitions/{code}",
            "description": "Get details of one particular competition by its code.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "competition_code",
                    "type": "STRING",
                    "description": "The code of the competition.",
                    "default": null
                }
            ]
        },
        {
            "name": "list_competitions",
            "url": "https://api.football-data.org/v4/competitions",
            "description": "List all available competitions.",
            "method": "GET",
            "optional_parameters": [
                {
                    "name": "areas",
                    "type": "STRING",
                    "description": "Comma separated list of area IDs.",
                    "default": null
                }
            ]
        },
        {
            "name": "get_competition_standings",
            "url": "https://api.football-data.org/v4/competitions/{id}/standings",
            "description": "Show standings for a particular competition.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "competition_id",
                    "type": "INTEGER",
                    "description": "The ID of the competition.",
                    "default": null
                }
            ],
            "optional_parameters": [
                {
                    "name": "season",
                    "type": "INTEGER",
                    "description": "The starting year of the season.",
                    "default": null
                }
            ]
        },
        {
            "name": "get_matches_for_competition",
            "url": "https://api.football-data.org/v4/competitions/{id}/matches",
            "description": "List all matches for a particular competition.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "competition_id",
                    "type": "INTEGER",
                    "description": "The ID of the competition.",
                    "default": null
                }
            ],
            "optional_parameters": [
                {
                    "name": "matchday",
                    "type": "INTEGER",
                    "description": "The matchday to retrieve matches for.",
                    "default": null
                }
            ]
        },
        {
            "name": "get_team_info",
            "url": "https://api.football-data.org/v4/teams/{id}",
            "description": "Show information about one particular team by its ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "team_id",
                    "type": "INTEGER",
                    "description": "The ID of the team.",
                    "default": null
                }
            ]
        },
        {
            "name": "list_teams",
            "url": "https://api.football-data.org/v4/teams/",
            "description": "List all teams with pagination.",
            "method": "GET",
            "optional_parameters": [
                {
                    "name": "limit",
                    "type": "INTEGER",
                    "description": "Number of teams to retrieve.",
                    "default": 10
                },
                {
                    "name": "offset",
                    "type": "INTEGER",
                    "description": "Number of teams to skip.",
                    "default": 0
                }
            ]
        },
        {
            "name": "get_player_info",
            "url": "https://api.football-data.org/v4/persons/{id}",
            "description": "Show information about one particular player by their ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "player_id",
                    "type": "INTEGER",
                    "description": "The ID of the player.",
                    "default": null
                }
            ]
        },
        {
            "name": "list_matches_across_competitions",
            "url": "https://api.football-data.org/v4/matches",
            "description": "List matches across a set of competitions.",
            "method": "GET",
            "optional_parameters": [
                {
                    "name": "date_from",
                    "type": "STRING",
                    "description": "The start date for matches.",
                    "default": null
                },
                {
                    "name": "date_to",
                    "type": "STRING",
                    "description": "The end date for matches.",
                    "default": null
                },
                {
                    "name": "competitions",
                    "type": "STRING",
                    "description": "Comma separated list of competition IDs.",
                    "default": null
                }
            ]
        },
        {
            "name": "get_match_by_id",
            "url": "https://api.football-data.org/v4/matches/{id}",
            "description": "Show one particular match by its ID.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "match_id",
                    "type": "INTEGER",
                    "description": "The ID of the match.",
                    "default": null
                }
            ]
        },
        {
            "name": "list_head2head_matches",
            "url": "https://api.football-data.org/v4/matches/{id}/head2head",
            "description": "List previous encounters for the teams of a match.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "match_id",
                    "type": "INTEGER",
                    "description": "The ID of the match.",
                    "default": null
                }
            ],
            "optional_parameters": [
                {
                    "name": "limit",
                    "type": "INTEGER",
                    "description": "Number of encounters to retrieve.",
                    "default": 10
                }
            ]
        }
    ]
}
```