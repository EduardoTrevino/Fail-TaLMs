### api.py
```python
import requests
from typing import Optional

def get_elevation(dataset_name: str, locations: str, samples: Optional[int] = None, 
                  interpolation: Optional[str] = 'bilinear', nodata_value: Optional[str] = 'null', 
                  format: Optional[str] = 'json', 
                  toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Fetches elevation data for specific locations using a specified dataset.
    
    Parameters:
    dataset_name [Required]: string - The name of the dataset to query.
    locations [Required]: string - Either latitude,longitude pairs separated by | or a Google polyline.
    samples [Optional]: int - Number of samples to query along the path specified by locations.
    interpolation [Optional]: string - Interpolation method (nearest, bilinear, cubic). Default is 'bilinear'.
    nodata_value [Optional]: string - What to return for NODATA values (null, nan, or an integer like -9999).
    format [Optional]: string - Response format (json or geojson). Default is 'json'.
    """
    url = f"https://api.opentopodata.org/v1/{dataset_name}"
    params = {
        'locations': locations,
        'samples': samples,
        'interpolation': interpolation,
        'nodata_value': nodata_value,
        'format': format,
    }
    
    # Clean up optional parameters if they are not provided
    params = {k: v for k, v in params.items() if v is not None}
    
    response = requests.get(url, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def get_health(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Healthcheck endpoint for the Open Topo Data API.
    """
    url = "https://api.opentopodata.org/health"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def get_datasets(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Retrieves a list of available datasets on the Open Topo Data server.
    """
    url = "https://api.opentopodata.org/datasets"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}
```

### api_test.py
```python
import unittest
from api import get_elevation, get_health, get_datasets

class TestOpenTopoDataAPI(unittest.TestCase):

    def test_get_elevation(self):
        response = get_elevation(dataset_name="test-dataset", locations="56,123")
        self.assertEqual(response['status'], "OK")
        self.assertIn('results', response)
        self.assertIsInstance(response['results'], list)

    def test_get_health(self):
        response = get_health()
        self.assertEqual(response['status'], "OK")

    def test_get_datasets(self):
        response = get_datasets()
        self.assertEqual(response['status'], "OK")
        self.assertIn('results', response)
        self.assertIsInstance(response['results'], list)

if __name__ == '__main__':
    unittest.main()
```

### opentopodata.json
```json
{
    "tool_name": "opentopodata",
    "tool_description": "Open Topo Data is an elevation API that provides elevation data from multiple datasets.",
    "title": "Open Topo Data API",
    "pricing": "FREE",
    "score": {
        "avgServiceLevel": 90,
        "avgLatency": 200,
        "avgSuccessRate": 99,
        "popularityScore": 9.0,
        "__typename": "Score"
    },
    "home_url": "https://api.opentopodata.org/",
    "host": "api.opentopodata.org",
    "api_list": [
        {
            "name": "get_elevation",
            "url": "https://api.opentopodata.org/v1/<dataset_name>",
            "description": "Reads the elevation from a given dataset based on specified locations.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "dataset_name",
                    "type": "STRING",
                    "description": "The name of the dataset."
                },
                {
                    "name": "locations",
                    "type": "STRING",
                    "description": "Coordinates in latitude,longitude format or Google polyline."
                }
            ],
            "optional_parameters": [
                {
                    "name": "samples",
                    "type": "INTEGER",
                    "description": "Query elevation for sample equally-spaced points."
                },
                {
                    "name": "interpolation",
                    "type": "STRING",
                    "description": "Interpolation method (nearest, bilinear, cubic)."
                },
                {
                    "name": "nodata_value",
                    "type": "STRING",
                    "description": "Value to return for NODATA."
                },
                {
                    "name": "format",
                    "type": "STRING",
                    "description": "Response format (json or geojson)."
                }
            ],
            "statuscode": 200,
            "body": {
                "results": [
                    {
                        "elevation": "FLOAT",
                        "location": {
                            "lat": "FLOAT",
                            "lng": "FLOAT"
                        },
                        "dataset": "STRING"
                    }
                ],
                "status": "STRING"
            }
        },
        {
            "name": "get_health",
            "url": "https://api.opentopodata.org/health",
            "description": "Healthcheck endpoint.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200,
            "body": {
                "status": "STRING"
            }
        },
        {
            "name": "get_datasets",
            "url": "https://api.opentopodata.org/datasets",
            "description": "Fetches the list of datasets available on the server.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200,
            "body": {
                "results": [
                    {
                        "name": "STRING",
                        "child_datasets": "ARRAY"
                    }
                ],
                "status": "STRING"
            }
        }
    ]
}
```