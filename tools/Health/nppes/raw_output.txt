**### api.py**

```python
import requests
from typing import Optional

def search_npi(
    number: Optional[str] = None, 
    enumeration_type: Optional[str] = None,
    taxonomy_description: Optional[str] = None,
    name_purpose: Optional[str] = None,
    first_name: Optional[str] = None,
    use_first_name_alias: bool = True,
    last_name: Optional[str] = None,
    organization_name: Optional[str] = None,
    address_purpose: Optional[str] = None,
    city: Optional[str] = None,
    state: Optional[str] = None,
    postal_code: Optional[str] = None,
    country_code: Optional[str] = None,
    limit: int = 10,
    skip: int = 0,
    pretty: bool = False,
    toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'
):
    """
    Endpoint to search NPI registry.
    Parameters:
    - number: Optional[str] = NPI Number, a unique 10-digit identifier.
    - enumeration_type: Optional[str] = Type of NPI (Individual or Organizational) (NPI-1/NPI-2).
    - taxonomy_description: Optional[str] = Description related to provider's taxonomy.
    - name_purpose: Optional[str] = Specifies if the name pertains to AO (Authorized Official) or Provider.
    - first_name: Optional[str] = First name of the provider (for Individual providers).
    - use_first_name_alias: bool = If True, includes similar First Names.
    - last_name: Optional[str] = Last name of the provider (for Individual providers).
    - organization_name: Optional[str] = Organization name (for Organizational providers).
    - address_purpose: Optional[str] = Address type filter (LOCATION/MAILING/PRIMARY/SECONDARY).
    - city: Optional[str] = City associated with the provider's address.
    - state: Optional[str] = State abbreviation for the provider's address.
    - postal_code: Optional[str] = Postal code for the provider's address.
    - country_code: Optional[str] = Country associated with the provider's address.
    - limit: int = Maximum number of results to return. Default is 10.
    - skip: int = Number of results to skip. Default is 0.
    - pretty: bool = Display in an easy to read format. Default is False.
    - toolbench_rapidapi_key: str = API key for access.
    """
    url = "https://npiregistry.cms.hhs.gov/api/"
    params = {
        'version': '2.1',
        'number': number,
        'enumeration_type': enumeration_type,
        'taxonomy_description': taxonomy_description,
        'name_purpose': name_purpose,
        'first_name': first_name,
        'use_first_name_alias': str(use_first_name_alias).lower(),
        'last_name': last_name,
        'organization_name': organization_name,
        'address_purpose': address_purpose,
        'city': city,
        'state': state,
        'postal_code': postal_code,
        'country_code': country_code,
        'limit': limit,
        'skip': skip,
        'pretty': str(pretty).lower(),
    }
    response = requests.get(url, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}
```

**### api_test.py**

```python
import unittest
from api import search_npi

class TestNPPESAPI(unittest.TestCase):
    
    def test_search_npi_default(self):
        response = search_npi()
        self.assertIn('Results', response)
        print("Default parameters:", response['Results'])

    def test_search_npi_with_number(self):
        response = search_npi(number='1234567890')
        self.assertIn('Results', response)
        self.assertEqual(response['Results'][0]['number'], '1234567890')
        print("Search with Number:", response['Results'])

    def test_search_npi_with_name(self):
        response = search_npi(first_name='John', use_first_name_alias=False)
        self.assertIn('Results', response)
        print("Search with First Name 'John':", response['Results'])

    def test_search_npi_with_organization(self):
        response = search_npi(organization_name='Health Corp')
        self.assertIn('Results', response)
        print("Search with Organization Name 'Health Corp':", response['Results'])

if __name__ == '__main__':
    unittest.main()
```

**### nppes.json**

```json
{
    "tool_name": "nppes",
    "tool_description": "API for accessing National Plan and Provider Enumeration System (NPPES) public data in real-time.",
    "title": "NPPES API",
    "pricing": "FREE",
    "score": {
        "avgServiceLevel": 98,
        "avgLatency": 200,
        "avgSuccessRate": 97,
        "popularityScore": 8.5,
        "__typename": "Score"
    },
    "home_url": "https://npiregistry.cms.hhs.gov/api/",
    "host": "npiregistry.cms.hhs.gov",
    "api_list": [
        {
            "name": "search_npi",
            "url": "https://npiregistry.cms.hhs.gov/api/",
            "description": "Endpoint to search the NPI registry using various search criteria.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {"name": "number", "type": "STRING", "description": "The NPI Number, a unique 10-digit identifier."},
                {"name": "enumeration_type", "type": "STRING", "description": "Type of NPI (Individual/Organizational)."},
                {"name": "taxonomy_description", "type": "STRING", "description": "Description related to provider's taxonomy."},
                {"name": "name_purpose", "type": "STRING", "description": "Specifies if the name pertains to AO or Provider."},
                {"name": "first_name", "type": "STRING", "description": "First name of the provider (Individual providers)."},
                {"name": "use_first_name_alias", "type": "BOOLEAN", "description": "If True, includes similar First Names.", "default": "True"},
                {"name": "last_name", "type": "STRING", "description": "Last name of the provider (Individual providers)."},
                {"name": "organization_name", "type": "STRING", "description": "Organization name (Organizational providers)."},
                {"name": "address_purpose", "type": "STRING", "description": "Address type filter (LOCATION/MAILING/PRIMARY/SECONDARY)."},
                {"name": "city", "type": "STRING", "description": "City associated with the provider's address."},
                {"name": "state", "type": "STRING", "description": "State abbreviation for the provider's address."},
                {"name": "postal_code", "type": "STRING", "description": "Postal code for the provider's address."},
                {"name": "country_code", "type": "STRING", "description": "Country associated with the provider's address."},
                {"name": "limit", "type": "INTEGER", "description": "Maximum number of results to return.", "default": "10"},
                {"name": "skip", "type": "INTEGER", "description": "Number of results to skip.", "default": "0"},
                {"name": "pretty", "type": "BOOLEAN", "description": "Display in readable format.", "default": "False"}
            ],
            "code": "import requests\n\nurl = 'https://npiregistry.cms.hhs.gov/api/'\nparams = {'version': '2.1', ...}\nresponse = requests.get(url, params=params)\nprint(response.json())",
            "statuscode": 200,
            "body": {
                "Results": [
                    {
                        "number": "string",
                        "enumeration_type": "string",
                        "basic": {
                            "name": "string",
                            "other_names": ["string"],
                            "active": "boolean"
                        },
                        "addresses": [
                            {
                                "address_1": "string",
                                "city": "string",
                                "state": "string",
                                "postal_code": "string",
                                "country_code": "string"
                            }
                        ],
                        "taxonomies": [
                            {
                                "taxonomy_code": "string",
                                "taxonomy_description": "string"
                            }
                        ]
                    }
                ]
            },
            "headers": {},
            "schema": {
                "type": "object",
                "properties": {
                    "Results": {
                        "type": "array"
                    }
                }
            }
        }
    ]
}
```