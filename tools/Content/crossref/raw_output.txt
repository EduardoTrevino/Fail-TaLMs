### api.py
```python
import requests
from typing import Optional

def search_works(query: str, rows: Optional[int] = 20, sort: Optional[str] = None, order: Optional[str] = 'desc', mailto: Optional[str] = None, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Search for works by a free text query.

    Args:
        query: The query string to search for within the works.
        rows: The number of rows to return per page.
        sort: The field to sort results by.
        order: The order of results, either ascending ('asc') or descending ('desc').
        mailto: The email address used to identify requests in the polite pool.

    Returns:
        JSON response with details of the works.
    """
    url = "https://api.crossref.org/works"
    params = {
        'query': query,
        'rows': rows,
        'sort': sort,
        'order': order,
        'mailto': mailto
    }
    response = requests.get(url, params=params)
    return response.json()

def get_funders(query: Optional[str] = None, filter: Optional[str] = None, rows: Optional[int] = 20, mailto: Optional[str] = None, offset: Optional[int] = 0, toolbench_rapidapi_key: str ='088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Retrieve a list of funders.

    Args:
        query: Free text query for funders.
        filter: Filters for searching funders by specific criteria.
        rows: Number of results per page.
        mailto: Email address to identify requests in the polite pool.
        offset: Number of rows to skip before returning results.

    Returns:
        JSON response with details of the funders.
    """
    url = "https://api.crossref.org/funders"
    params = {
        'query': query,
        'filter': filter,
        'rows': rows,
        'mailto': mailto,
        'offset': offset
    }
    response = requests.get(url, params=params)
    return response.json()

def get_funder_details(funder_id: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Retrieve metadata for a specific funder and their suborganizations by funder ID.

    Args:
        funder_id: The ID of the funder.

    Returns:
        JSON response with details of the funder.
    """
    url = f"https://api.crossref.org/funders/{funder_id}"
    response = requests.get(url)
    return response.json()

def list_journals(query: Optional[str] = None, rows: Optional[int] = 20, mailto: Optional[str] = None, offset: Optional[int] = 0, sort: Optional[str] = None, order: Optional[str] = 'desc', toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    List journals based on a query.

    Args:
        query: Free text query for journals.
        rows: Number of results per page.
        mailto: Email address to identify requests in the polite pool.
        offset: Number of rows to skip before returning results.
        sort: The field to sort results by.
        order: The order of results, either ascending ('asc') or descending ('desc').

    Returns:
        JSON response with details of the journals.
    """
    url = "https://api.crossref.org/journals"
    params = {
        'query': query,
        'rows': rows,
        'mailto': mailto,
        'offset': offset,
        'sort': sort,
        'order': order
    }
    response = requests.get(url, params=params)
    return response.json()

def get_journal_details(issn: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Retrieve information about a journal by its ISSN.

    Args:
        issn: The ISSN identifier associated with the journal.

    Returns:
        JSON response with details of the journal.
    """
    url = f"https://api.crossref.org/journals/{issn}"
    response = requests.get(url)
    return response.json()

def get_works_by_journal(issn: str, query: Optional[str] = None, rows: Optional[int] = 20, sort: Optional[str] = None, order: Optional[str] = 'desc', mailto: Optional[str] = None, offset: Optional[int] = 0, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Retrieve a list of works in a journal identified by ISSN.

    Args:
        issn: The ISSN identifier of the journal.
        query: Free text query for works.
        rows: Number of results per page.
        sort: The field to sort results by.
        order: The order of results, either ascending ('asc') or descending ('desc').
        mailto: Email address to identify requests in the polite pool.
        offset: Number of rows to skip before returning results.

    Returns:
        JSON response with details of the works in the journal.
    """
    url = f"https://api.crossref.org/journals/{issn}/works"
    params = {
        'query': query,
        'rows': rows,
        'sort': sort,
        'order': order,
        'mailto': mailto,
        'offset': offset
    }
    response = requests.get(url, params=params)
    return response.json()
```

### api_test.py
```python
import unittest
from api import search_works, get_funders, get_funder_details, list_journals, get_journal_details, get_works_by_journal

class TestCrossrefAPI(unittest.TestCase):

    def test_search_works(self):
        result = search_works("machine learning")
        self.assertIsInstance(result, dict)
        self.assertIn('status', result)

    def test_get_funders(self):
        result = get_funders(query="research foundation")
        self.assertIsInstance(result, dict)
        self.assertIn('status', result)

    def test_get_funder_details(self):
        result = get_funder_details("501100006004")
        self.assertIsInstance(result, dict)
        self.assertIn('status', result)

    def test_list_journals(self):
        result = list_journals(query="pharmacy health")
        self.assertIsInstance(result, dict)
        self.assertIn('status', result)

    def test_get_journal_details(self):
        result = get_journal_details("03064530")
        self.assertIsInstance(result, dict)
        self.assertIn('status', result)

    def test_get_works_by_journal(self):
        result = get_works_by_journal("03064530", query="neuroscience")
        self.assertIsInstance(result, dict)
        self.assertIn('status', result)

if __name__ == '__main__':
    unittest.main()
```

### crossref.json
```json
{
    "tool_name": "crossref",
    "tool_description": "Public REST API that provides access to the metadata related to scholarly publications registered with Crossref.",
    "title": "Crossref REST API",
    "pricing": "FREE",
    "score": {
        "avgServiceLevel": null,
        "avgLatency": null,
        "avgSuccessRate": null,
        "popularityScore": null,
        "__typename": "Score"
    },
    "home_url": "https://api.crossref.org/",
    "host": "api.crossref.org",
    "api_list": [
        {
            "name": "search_works",
            "url": "https://api.crossref.org/works",
            "description": "Search for works by a free text query.",
            "method": "GET",
            "required_parameters": ["query"],
            "optional_parameters": [
                {"name": "rows", "type": "INTEGER", "description": "Number of results per page.", "default": 20},
                {"name": "sort", "type": "STRING", "description": "Field by which results are sorted."},
                {"name": "order", "type": "STRING", "description": "Order of results, ascending or descending.", "default": "desc"},
                {"name": "mailto", "type": "STRING", "description": "Identifier for polite pool requests."}
            ],
            "statuscode": 200
        },
        {
            "name": "get_funders",
            "url": "https://api.crossref.org/funders",
            "description": "Retrieve a list of funders.",
            "method": "GET",
            "optional_parameters": [
                {"name": "query", "type": "STRING", "description": "Search query for funders."},
                {"name": "filter", "type": "STRING", "description": "Filters for funders."},
                {"name": "rows", "type": "INTEGER", "description": "Number of funders per page.", "default": 20},
                {"name": "mailto", "type": "STRING", "description": "Identifier for polite pool requests."},
                {"name": "offset", "type": "INTEGER", "description": "Offset for paging.", "default": 0}
            ],
            "statuscode": 200
        },
        {
            "name": "get_funder_details",
            "url": "https://api.crossref.org/funders/{id}",
            "description": "Retrieve metadata for a specific funder by funder ID.",
            "method": "GET",
            "required_parameters": ["funder_id"],
            "statuscode": 200
        },
        {
            "name": "list_journals",
            "url": "https://api.crossref.org/journals",
            "description": "List journals based on a query.",
            "method": "GET",
            "optional_parameters": [
                {"name": "query", "type": "STRING", "description": "Free text query for journals."},
                {"name": "rows", "type": "INTEGER", "description": "Number of journals per page.", "default": 20},
                {"name": "mailto", "type": "STRING", "description": "Identifier for polite pool requests."},
                {"name": "offset", "type": "INTEGER", "description": "Offset for paging.", "default": 0},
                {"name": "sort", "type": "STRING", "description": "Field by which results are sorted."},
                {"name": "order", "type": "STRING", "description": "Order of results, ascending or descending.", "default": "desc"}
            ],
            "statuscode": 200
        },
        {
            "name": "get_journal_details",
            "url": "https://api.crossref.org/journals/{issn}",
            "description": "Retrieve information about a journal by its ISSN.",
            "method": "GET",
            "required_parameters": ["issn"],
            "statuscode": 200
        },
        {
            "name": "get_works_by_journal",
            "url": "https://api.crossref.org/journals/{issn}/works",
            "description": "Retrieve a list of works in a journal identified by ISSN.",
            "method": "GET",
            "required_parameters": ["issn"],
            "optional_parameters": [
                {"name": "query", "type": "STRING", "description": "Search query for works."},
                {"name": "rows", "type": "INTEGER", "description": "Number of works per page.", "default": 20},
                {"name": "sort", "type": "STRING", "description": "Field by which results are sorted."},
                {"name": "order", "type": "STRING", "description": "Order of results, ascending or descending.", "default": "desc"},
                {"name": "mailto", "type": "STRING", "description": "Identifier for polite pool requests."},
                {"name": "offset", "type": "INTEGER", "description": "Offset for paging.", "default": 0}
            ],
            "statuscode": 200
        }
    ]
}
```