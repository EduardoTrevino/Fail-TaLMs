### api.py
```python
import requests
from typing import Optional, List, Dict

def get_pairs_by_chain_and_address(chain_id: str, pair_addresses: List[str], 
                                   toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff') -> Dict:
    """
    Get one or multiple pairs by chain and pair addresses.
    
    Parameters:
    chain_id (str): The blockchain chain id such as ethereum, bsc, polygon, etc.
    pair_addresses (List[str]): One or multiple, comma-separated pair addresses (up to 30 addresses).
    
    Returns:
    Dict: JSON response containing pairs information.
    """
    url = f"https://api.dexscreener.com/latest/dex/pairs/{chain_id}/" + ','.join(pair_addresses)
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def get_pairs_by_token_address(token_addresses: List[str],
                               toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff') -> Dict:
    """
    Get one or multiple pairs by token addresses.
    
    Parameters:
    token_addresses (List[str]): One or multiple, comma-separated token addresses (up to 30 addresses).
    
    Returns:
    Dict: JSON response containing pairs information.
    """
    url = "https://api.dexscreener.com/latest/dex/tokens/" + ','.join(token_addresses)
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def search_pairs(query: str, 
                 toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff') -> Dict:
    """
    Search for pairs matching the query.
    
    Parameters:
    query (str): Query that includes pair address, token address, token name, or token symbol.
    
    Returns:
    Dict: JSON response containing matching pairs information.
    """
    url = f"https://api.dexscreener.com/latest/dex/search/?q={query}"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}
```

### api_test.py
```python
import unittest
from api import get_pairs_by_chain_and_address, get_pairs_by_token_address, search_pairs

class TestDexScreenerAPI(unittest.TestCase):

    def test_get_pairs_by_chain_and_address(self):
        response = get_pairs_by_chain_and_address('bsc', ['0x7213a321F1855CF1779f42c0CD85d3D95291D34C'])
        self.assertIsInstance(response, dict)
        self.assertIn('pairs', response)

    def test_get_pairs_by_token_address(self):
        response = get_pairs_by_token_address(['0x2170Ed0880ac9A755fd29B2688956BD959F933F8'])
        self.assertIsInstance(response, dict)
        self.assertIn('pairs', response)

    def test_search_pairs(self):
        response = search_pairs('WBNB USDC')
        self.assertIsInstance(response, dict)
        self.assertIn('pairs', response)

if __name__ == '__main__':
    unittest.main()
```

### dexscreener.json
```json
{
    "tool_name": "dexscreener",
    "tool_description": "An API for retrieving DEX pair information for various blockchain networks.",
    "title": "DEX Screener API",
    "pricing": "FREE",
    "score": {
        "avgServiceLevel": 90,
        "avgLatency": 100,
        "avgSuccessRate": 97,
        "popularityScore": 8.5,
        "__typename": "Score"
    },
    "home_url": "https://api.dexscreener.com/docs/",
    "host": "api.dexscreener.com",
    "api_list": [
        {
            "name": "get_pairs_by_chain_and_address",
            "url": "https://api.dexscreener.com/latest/dex/pairs/:chainId/:pairAddresses",
            "description": "Get one or multiple pairs by chain and pair addresses.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "chain_id",
                    "type": "STRING",
                    "description": "The blockchain chain id (e.g., ethereum, bsc, polygon)."
                },
                {
                    "name": "pair_addresses",
                    "type": "LIST",
                    "description": "Comma-separated pair addresses (up to 30 addresses)."
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = f'https://api.dexscreener.com/latest/dex/pairs/{chain_id}/' + ','.join(pair_addresses)\nresponse = requests.get(url)\nprint(response.json())",
            "statuscode": 200
        },
        {
            "name": "get_pairs_by_token_address",
            "url": "https://api.dexscreener.com/latest/dex/tokens/:tokenAddresses",
            "description": "Get one or multiple pairs by token addresses.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "token_addresses",
                    "type": "LIST",
                    "description": "Comma-separated token addresses (up to 30 addresses)."
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = 'https://api.dexscreener.com/latest/dex/tokens/' + ','.join(token_addresses)\nresponse = requests.get(url)\nprint(response.json())",
            "statuscode": 200
        },
        {
            "name": "search_pairs",
            "url": "https://api.dexscreener.com/latest/dex/search/?q=:q",
            "description": "Search for pairs matching the query.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "query",
                    "type": "STRING",
                    "description": "Query that includes pair address, token address, token name, or token symbol."
                }
            ],
            "optional_parameters": [],
            "code": "import requests\n\nurl = f'https://api.dexscreener.com/latest/dex/search/?q={query}'\nresponse = requests.get(url)\nprint(response.json())",
            "statuscode": 200
        }
    ]
}
```