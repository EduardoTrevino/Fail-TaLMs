**### api.py**

```python
import requests
from typing import Optional

def get_global_stats(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Retrieve global crypto statistics.
    """
    url = "https://api.coinlore.net/api/global/"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def get_all_tickers(start: Optional[int] = 0, limit: Optional[int] = 100, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Retrieve tick data for multiple crypto coins, sorted by market cap.
    """
    url = f"https://api.coinlore.net/api/tickers/?start={start}&limit={limit}"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def get_ticker(coin_id: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Retrieve tick data for specific coin.
    """
    url = f"https://api.coinlore.net/api/ticker/?id={coin_id}"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def get_markets_for_coin(coin_id: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Retrieve top 50 exchanges and markets for specific coin.
    """
    url = f"https://api.coinlore.net/api/coin/markets/?id={coin_id}"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def get_all_exchanges(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Get all exchanges listed on the platform.
    """
    url = "https://api.coinlore.net/api/exchanges/"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def get_exchange(exchange_id: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Get specific exchange using ID, returns exchange info and top 100 pairs.
    """
    url = f"https://api.coinlore.net/api/exchange/?id={exchange_id}"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}

def get_social_stats(coin_id: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Get social stats for a specific coin.
    """
    url = f"https://api.coinlore.net/api/coin/social_stats/?id={coin_id}"
    response = requests.get(url)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}
```

**### api_test.py**

```python
import unittest
from api import (
    get_global_stats,
    get_all_tickers,
    get_ticker,
    get_markets_for_coin,
    get_all_exchanges,
    get_exchange,
    get_social_stats
)

class TestCoinloreAPI(unittest.TestCase):

    def test_get_global_stats(self):
        result = get_global_stats()
        self.assertIn('coins_count', result[0])

    def test_get_all_tickers(self):
        result = get_all_tickers()
        self.assertIn('data', result)

    def test_get_ticker(self):
        result = get_ticker("90")
        self.assertEqual(result[0]['symbol'], "BTC")

    def test_get_markets_for_coin(self):
        result = get_markets_for_coin("90")
        self.assertIsInstance(result, list)

    def test_get_all_exchanges(self):
        result = get_all_exchanges()
        self.assertIn('5', result)

    def test_get_exchange(self):
        result = get_exchange("5")
        self.assertIn('0', result)
        self.assertIn('pairs', result)

    def test_get_social_stats(self):
        result = get_social_stats("80")
        self.assertIn('reddit', result)
        self.assertIn('twitter', result)

if __name__ == '__main__':
    unittest.main()
```

**### coinlore.json**

```json
{
    "tool_name": "coinlore",
    "tool_description": "Cryptocurrency API for Developers to get real-time prices, historical trends, and market analytics.",
    "title": "Coinlore Cryptocurrency API",
    "pricing": "FREE",
    "score": {
        "avgServiceLevel": 95,
        "avgLatency": 150,
        "avgSuccessRate": 98,
        "popularityScore": 9.5
    },
    "home_url": "https://www.coinlore.com/cryptocurrency-data-api",
    "host": "api.coinlore.net",
    "api_list": [
        {
            "name": "get_global_stats",
            "url": "https://api.coinlore.net/api/global/",
            "description": "Retrieve global crypto statistics.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": []
        },
        {
            "name": "get_all_tickers",
            "url": "https://api.coinlore.net/api/tickers/",
            "description": "Retrieve tick data for multiple crypto coins, sorted by market cap.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "name": "start",
                    "type": "INTEGER",
                    "description": "The starting position for results.",
                    "default": "0"
                },
                {
                    "name": "limit",
                    "type": "INTEGER",
                    "description": "The maximum number of results to retrieve.",
                    "default": "100"
                }
            ]
        },
        {
            "name": "get_ticker",
            "url": "https://api.coinlore.net/api/ticker/",
            "description": "Retrieve tick data for a specific coin.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "coin_id",
                    "type": "STRING",
                    "description": "The ID of the cryptocurrency."
                }
            ],
            "optional_parameters": []
        },
        {
            "name": "get_markets_for_coin",
            "url": "https://api.coinlore.net/api/coin/markets/",
            "description": "Retrieve top 50 exchanges and markets for a specific coin.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "coin_id",
                    "type": "STRING",
                    "description": "The ID of the cryptocurrency."
                }
            ],
            "optional_parameters": []
        },
        {
            "name": "get_all_exchanges",
            "url": "https://api.coinlore.net/api/exchanges/",
            "description": "Get all exchanges listed on the platform.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": []
        },
        {
            "name": "get_exchange",
            "url": "https://api.coinlore.net/api/exchange/",
            "description": "Get specific exchange using ID, returns exchange info and top 100 pairs.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "exchange_id",
                    "type": "STRING",
                    "description": "The ID of the exchange."
                }
            ],
            "optional_parameters": []
        },
        {
            "name": "get_social_stats",
            "url": "https://api.coinlore.net/api/coin/social_stats/",
            "description": "Get social stats for a specific coin.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "coin_id",
                    "type": "STRING",
                    "description": "The ID of the cryptocurrency."
                }
            ],
            "optional_parameters": []
        }
    ]
}
```