**### api.py**  
```python
import requests
from typing import Optional


def get_exchange_rate_table(table: str, top_count: Optional[int] = None, date: Optional[str] = None,
                            start_date: Optional[str] = None, end_date: Optional[str] = None,
                            toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Fetch a complete table of exchange rates of type {table}.
    
    :param table: table type ('A', 'B', or 'C')
    :param top_count: a number determining the maximum size of the returned data series
    :param date: a specific date in 'YYYY-MM-DD' format
    :param start_date: start date in 'YYYY-MM-DD' for a series of data
    :param end_date: end date in 'YYYY-MM-DD' for a series of data
    :return: JSON response from the API
    """
    base_url = f"http://api.nbp.pl/api/exchangerates/tables/{table}"
    
    if date:
        url = f"{base_url}/{date}/"
    elif start_date and end_date:
        url = f"{base_url}/{start_date}/{end_date}/"
    elif top_count:
        url = f"{base_url}/last/{top_count}/"
    else:
        url = base_url

    params = {'format': 'json'}
    response = requests.get(url, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def get_currency_exchange_rate(table: str, code: str, top_count: Optional[int] = None, date: Optional[str] = None,
                               start_date: Optional[str] = None, end_date: Optional[str] = None,
                               toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Fetch the exchange rate of a specific currency from a table.
    
    :param table: table type ('A', 'B', or 'C')
    :param code: currency code (ISO 4217 standard)
    :param top_count: a number determining the maximum size of the returned data series
    :param date: a specific date in 'YYYY-MM-DD' format
    :param start_date: start date in 'YYYY-MM-DD' for a series of data
    :param end_date: end date in 'YYYY-MM-DD' for a series of data
    :return: JSON response from the API
    """
    base_url = f"http://api.nbp.pl/api/exchangerates/rates/{table}/{code}"
    
    if date:
        url = f"{base_url}/{date}/"
    elif start_date and end_date:
        url = f"{base_url}/{start_date}/{end_date}/"
    elif top_count:
        url = f"{base_url}/last/{top_count}/"
    else:
        url = base_url

    params = {'format': 'json'}
    response = requests.get(url, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}


def get_gold_price(top_count: Optional[int] = None, date: Optional[str] = None,
                   start_date: Optional[str] = None, end_date: Optional[str] = None,
                   toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Fetch the price of gold.
    
    :param top_count: a number determining the maximum size of the returned data series
    :param date: a specific date in 'YYYY-MM-DD' format
    :param start_date: start date in 'YYYY-MM-DD' for a series of data
    :param end_date: end date in 'YYYY-MM-DD' for a series of data
    :return: JSON response from the API
    """
    base_url = "http://api.nbp.pl/api/cenyzlota"
    
    if date:
        url = f"{base_url}/{date}"
    elif start_date and end_date:
        url = f"{base_url}/{start_date}/{endDate}"
    elif top_count:
        url = f"{base_url}/last/{top_count}"
    else:
        url = base_url

    params = {'format': 'json'}
    response = requests.get(url, params=params)
    try:
        return response.json()
    except Exception as e:
        return {"error": str(e), "response": response.text}
```

**### api_test.py**  
```python
import unittest
import api


class TestNBPWebAPI(unittest.TestCase):
    
    def test_get_exchange_rate_table(self):
        result = api.get_exchange_rate_table(table='A')
        self.assertIn('tables', result)

    def test_get_currency_exchange_rate(self):
        result = api.get_currency_exchange_rate(table='A', code='USD')
        self.assertIn('currency', result)

    def test_get_gold_price(self):
        result = api.get_gold_price()
        self.assertIsInstance(result, list)


if __name__ == '__main__':
    unittest.main()
```

**### nbpweb.json**  
```json
{
    "tool_name": "nbpweb",
    "tool_description": "Currency exchange rates and gold prices in JSON format provided by the NBP.PL service.",
    "title": "NBP Web API",
    "pricing": "FREE",
    "score": {
        "avgServiceLevel": 95,
        "avgLatency": 150,
        "avgSuccessRate": 98,
        "popularityScore": 9.5,
        "__typename": "Score"
    },
    "home_url": "http://api.nbp.pl",
    "host": "api.nbp.pl",
    "api_list": [
        {
            "name": "get_exchange_rate_table",
            "url": "http://api.nbp.pl/api/exchangerates/tables/{table}",
            "description": "Fetch a complete table of exchange rates of specified type.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "table",
                    "type": "STRING",
                    "description": "Type of table 'A', 'B', or 'C'.",
                    "default": "A"
                }
            ],
            "optional_parameters": [
                {
                    "name": "top_count",
                    "type": "INTEGER",
                    "description": "Return last top_count entries."
                },
                {
                    "name": "date",
                    "type": "STRING",
                    "description": "Specific date in 'YYYY-MM-DD' format."
                },
                {
                    "name": "start_date",
                    "type": "STRING",
                    "description": "Start date for range in 'YYYY-MM-DD' format."
                },
                {
                    "name": "end_date",
                    "type": "STRING",
                    "description": "End date for range in 'YYYY-MM-DD' format."
                }
            ],
            "statuscode": 200,
            "response_format": "application/json"
        },
        {
            "name": "get_currency_exchange_rate",
            "url": "http://api.nbp.pl/api/exchangerates/rates/{table}/{code}",
            "description": "Fetch the exchange rate of a specific currency.",
            "method": "GET",
            "required_parameters": [
                {
                    "name": "table",
                    "type": "STRING",
                    "description": "Type of table 'A', 'B', or 'C'.",
                    "default": "A"
                },
                {
                    "name": "code",
                    "type": "STRING",
                    "description": "Currency code based on ISO 4217.",
                    "default": "USD"
                }
            ],
            "optional_parameters": [
                {
                    "name": "top_count",
                    "type": "INTEGER",
                    "description": "Return last top_count entries."
                },
                {
                    "name": "date",
                    "type": "STRING",
                    "description": "Specific date in 'YYYY-MM-DD' format."
                },
                {
                    "name": "start_date",
                    "type": "STRING",
                    "description": "Start date for range in 'YYYY-MM-DD' format."
                },
                {
                    "name": "end_date",
                    "type": "STRING",
                    "description": "End date for range in 'YYYY-MM-DD' format."
                }
            ],
            "statuscode": 200,
            "response_format": "application/json"
        },
        {
            "name": "get_gold_price",
            "url": "http://api.nbp.pl/api/cenyzlota",
            "description": "Fetch the price of gold.",
            "method": "GET",
            "optional_parameters": [
                {
                    "name": "top_count",
                    "type": "INTEGER",
                    "description": "Return last top_count entries."
                },
                {
                    "name": "date",
                    "type": "STRING",
                    "description": "Specific date in 'YYYY-MM-DD' format."
                },
                {
                    "name": "start_date",
                    "type": "STRING",
                    "description": "Start date for range in 'YYYY-MM-DD' format."
                },
                {
                    "name": "end_date",
                    "type": "STRING",
                    "description": "End date for range in 'YYYY-MM-DD' format."
                }
            ],
            "statuscode": 200,
            "response_format": "application/json"
        }
    ]
}
```