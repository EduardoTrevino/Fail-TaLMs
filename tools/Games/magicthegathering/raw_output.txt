**### api.py**

```python
import requests
from typing import Optional, List

BASE_URL = "https://api.magicthegathering.io/v1"

def get_all_cards(page: Optional[int] = 1, page_size: Optional[int] = 100, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff', **filters):
    """
    Get all cards with optional filtering.

    Parameters:
    - page: The page number to retrieve.
    - page_size: The number of cards to retrieve per page.
    - filters: Additional query parameters to filter cards.

    Returns:
    A JSON response containing cards.
    """
    url = f"{BASE_URL}/cards"
    params = {
        'page': page,
        'pageSize': page_size,
        **filters
    }
    response = requests.get(url, params=params)
    return response.json()

def get_card_by_id(card_id: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Get a specific card by its ID.

    Parameters:
    - card_id: The unique id or multiverseid of the card.

    Returns:
    A JSON response containing the card details.
    """
    url = f"{BASE_URL}/cards/{card_id}"
    response = requests.get(url)
    return response.json()

def get_all_sets(name: Optional[str] = None, block: Optional[str] = None, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Get all sets with optional filtering by name and block.

    Parameters:
    - name: Filter sets by set name.
    - block: Filter sets by block name.

    Returns:
    A JSON response containing sets.
    """
    url = f"{BASE_URL}/sets"
    params = {
        'name': name,
        'block': block
    }
    response = requests.get(url, params=params)
    return response.json()

def get_set_by_code(set_code: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Get a specific set by set code.

    Parameters:
    - set_code: The code of the set.

    Returns:
    A JSON response containing the set details.
    """
    url = f"{BASE_URL}/sets/{set_code}"
    response = requests.get(url)
    return response.json()

def generate_booster_pack(set_code: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Generate a booster pack for a specific set.

    Parameters:
    - set_code: The code of the set to generate a booster pack for.

    Returns:
    A JSON response containing the booster pack details.
    """
    url = f"{BASE_URL}/sets/{set_code}/booster"
    response = requests.get(url)
    return response.json()

def get_all_types(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Get all card types.

    Returns:
    A JSON response containing all card types.
    """
    url = f"{BASE_URL}/types"
    response = requests.get(url)
    return response.json()

def get_all_subtypes(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Get all card subtypes.

    Returns:
    A JSON response containing all card subtypes.
    """
    url = f"{BASE_URL}/subtypes"
    response = requests.get(url)
    return response.json()

def get_all_supertypes(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Get all card supertypes.

    Returns:
    A JSON response containing all card supertypes.
    """
    url = f"{BASE_URL}/supertypes"
    response = requests.get(url)
    return response.json()

def get_all_formats(toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Get all game formats.

    Returns:
    A JSON response containing all game formats.
    """
    url = f"{BASE_URL}/formats"
    response = requests.get(url)
    return response.json()

def get_cards_by_name(name: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Get cards by name.

    Parameters:
    - name: The name of the card to search for.

    Returns:
    A JSON response containing cards matching the name.
    """
    url = f"{BASE_URL}/cards"
    params = {'name': name}
    response = requests.get(url, params=params)
    return response.json()

def get_cards_by_foreign_name(name: str, language: str, toolbench_rapidapi_key: str = '088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    Get cards by foreign name.

    Parameters:
    - name: The name of the card to search for.
    - language: The language to search the card name in.

    Returns:
    A JSON response containing cards matching the foreign name.
    """
    url = f"{BASE_URL}/cards"
    params = {'name': name, 'language': language}
    response = requests.get(url, params=params)
    return response.json()
```

**### api_test.py**

```python
from api import (
    get_all_cards, get_card_by_id, get_all_sets, get_set_by_code,
    generate_booster_pack, get_all_types, get_all_subtypes,
    get_all_supertypes, get_all_formats, get_cards_by_name,
    get_cards_by_foreign_name
)

def test_get_all_cards():
    response = get_all_cards(page=1, page_size=2)
    assert 'cards' in response, "Cards key not in response"

def test_get_card_by_id():
    response = get_card_by_id("02ea5ddc89d7847abc77a0fbcbf2bc74e6456559")
    assert 'card' in response, "Card key not in response"
    assert response['card']['name'] == 'Archangel Avacyn', "Card name does not match"

def test_get_all_sets():
    response = get_all_sets()
    assert 'sets' in response, "Sets key not in response"

def test_get_set_by_code():
    response = get_set_by_code("KTK")
    assert 'set' in response, "Set key not in response"
    assert response['set']['name'] == 'Khans of Tarkir', "Set name does not match"

def test_generate_booster_pack():
    response = generate_booster_pack("KTK")
    assert 'cards' in response, "Cards key not in response"

def test_get_all_types():
    response = get_all_types()
    assert 'types' in response, "Types key not in response"

def test_get_all_subtypes():
    response = get_all_subtypes()
    assert 'subtypes' in response, "Subtypes key not in response"

def test_get_all_supertypes():
    response = get_all_supertypes()
    assert 'supertypes' in response, "Supertypes key not in response"

def test_get_all_formats():
    response = get_all_formats()
    assert 'formats' in response, "Formats key not in response"

def test_get_cards_by_name():
    response = get_cards_by_name("Archangel Avacyn")
    assert 'cards' in response, "Cards key not in response"

def test_get_cards_by_foreign_name():
    response = get_cards_by_foreign_name(name="Arc√°ngel Avacyn", language="Spanish")
    assert 'cards' in response, "Cards key not in response"
```

**### magicthegathering.json**

```json
{
    "tool_name": "magicthegathering",
    "tool_description": "API to access Magic: The Gathering's card and set data.",
    "title": "Magic: The Gathering API",
    "pricing": "FREE",
    "score": {
        "avgServiceLevel": 95,
        "avgLatency": 150,
        "avgSuccessRate": 98,
        "popularityScore": 9.0,
        "__typename": "Score"
    },
    "home_url": "https://api.magicthegathering.io/docs/",
    "host": "api.magicthegathering.io",
    "api_list": [
        {
            "name": "get_all_cards",
            "url": "https://api.magicthegathering.io/v1/cards",
            "description": "Retrieve all MTG cards with pagination and optional filtering.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {"name": "page", "type": "INTEGER", "default": "1"},
                {"name": "pageSize", "type": "INTEGER", "default": "100"},
                {"name": "name", "type": "STRING"},
                {"name": "set", "type": "STRING"},
                {"name": "colors", "type": "STRING"}
            ],
            "statuscode": 200
        },
        {
            "name": "get_card_by_id",
            "url": "https://api.magicthegathering.io/v1/cards/{id}",
            "description": "Retrieve a specific card by its unique id.",
            "method": "GET",
            "required_parameters": [{"name": "id", "type": "STRING"}],
            "optional_parameters": [],
            "statuscode": 200
        },
        {
            "name": "get_all_sets",
            "url": "https://api.magicthegathering.io/v1/sets",
            "description": "Retrieve all MTG sets with optional filtering by name and block.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {"name": "name", "type": "STRING"},
                {"name": "block", "type": "STRING"}
            ],
            "statuscode": 200
        },
        {
            "name": "get_set_by_code",
            "url": "https://api.magicthegathering.io/v1/sets/{code}",
            "description": "Retrieve a specific set by its code.",
            "method": "GET",
            "required_parameters": [{"name": "code", "type": "STRING"}],
            "optional_parameters": [],
            "statuscode": 200
        },
        {
            "name": "generate_booster_pack",
            "url": "https://api.magicthegathering.io/v1/sets/{code}/booster",
            "description": "Generate a booster pack for a specific set.",
            "method": "GET",
            "required_parameters": [{"name": "code", "type": "STRING"}],
            "optional_parameters": [],
            "statuscode": 200
        },
        {
            "name": "get_all_types",
            "url": "https://api.magicthegathering.io/v1/types",
            "description": "Retrieve all card types.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200
        },
        {
            "name": "get_all_subtypes",
            "url": "https://api.magicthegathering.io/v1/subtypes",
            "description": "Retrieve all card subtypes.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200
        },
        {
            "name": "get_all_supertypes",
            "url": "https://api.magicthegathering.io/v1/supertypes",
            "description": "Retrieve all card supertypes.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200
        },
        {
            "name": "get_all_formats",
            "url": "https://api.magicthegathering.io/v1/formats",
            "description": "Retrieve all game formats.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [],
            "statuscode": 200
        },
        {
            "name": "get_cards_by_name",
            "url": "https://api.magicthegathering.io/v1/cards",
            "description": "Retrieve cards by name.",
            "method": "GET",
            "required_parameters": [{"name": "name", "type": "STRING"}],
            "optional_parameters": [],
            "statuscode": 200
        },
        {
            "name": "get_cards_by_foreign_name",
            "url": "https://api.magicthegathering.io/v1/cards",
            "description": "Retrieve cards by foreign name.",
            "method": "GET",
            "required_parameters": [
                {"name": "name", "type": "STRING"},
                {"name": "language", "type": "STRING"}
            ],
            "optional_parameters": [],
            "statuscode": 200
        }
    ]
}
```