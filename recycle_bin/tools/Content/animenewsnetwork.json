{
  "tool_name": "animenewsnetwork",
  "tool_description": "API to fetch anime and manga details from Anime News Network.",
  "title": "Anime News Network",
  "pricing": "FREE",
  "score": {
    "avgServiceLevel": 85,
    "avgLatency": 200,
    "avgSuccessRate": 90,
    "popularityScore": 8.7,
    "__typename": "Score"
  },
  "home_url": "https://www.animenewsnetwork.com/encyclopedia/api.php",
  "host": "cdn.animenewsnetwork.com",
  "api_list": [
    {
      "name": "get_anime_details",
      "url": "https://cdn.animenewsnetwork.com/encyclopedia/api.xml",
      "description": "Fetch detailed information about an anime using its ID",
      "method": "GET",
      "required_parameters": [
        {
          "name": "anime",
          "type": "STRING",
          "description": "The ID of the anime",
          "default": "4658"
        }
      ],
      "optional_parameters": [],
      "code": "import requests\nimport xml.etree.ElementTree as ET\n\ndef get_anime_details(anime_id: str) -> dict:\n    url = f'https://cdn.animenewsnetwork.com/encyclopedia/api.xml?anime={anime_id}'\n    response = requests.get(url)\n    if response.status_code == 200:\n        root = ET.fromstring(response.content)\n        anime_details = {}\n        for child in root:\n            anime_details[child.tag] = child.text if child.text else {sub.tag: sub.text for sub in child}\n        return anime_details\n    else:\n        return {'error': 'Failed to fetch data'}\n",
      "statuscode": 200,
      "body": {
        "key1": "value",
        "key2": "value"
      },
      "headers": {},
      "schema": {
        "type": "object",
        "properties": {
          "anime": {
            "type": "object"
          }
        }
      }
    },
    {
      "name": "get_recently_added_anime",
      "url": "https://cdn.animenewsnetwork.com/encyclopedia/reports.xml",
      "description": "Fetch a list of recently added anime",
      "method": "GET",
      "required_parameters": [],
      "optional_parameters": [
        {
          "name": "nskip",
          "type": "INT",
          "description": "Number of records to skip",
          "default": 0
        },
        {
          "name": "nlist",
          "type": "INT",
          "description": "Number of records to list",
          "default": 50
        }
      ],
      "code": "import requests\nimport xml.etree.ElementTree as ET\n\ndef get_recently_added_anime(nskip: int = 0, nlist: int = 50) -> list:\n    url = f'https://cdn.animenewsnetwork.com/encyclopedia/reports.xml?id=155&type=anime&nskip={nskip}&nlist={nlist}'\n    response = requests.get(url)\n    if response.status_code == 200:\n        root = ET.fromstring(response.content)\n        anime_list = []\n        for anime in root.findall('anime'):\n            anime_info = {\n                'id': anime.get('id'),\n                'name': anime.get('name'),\n                'type': anime.get('type')\n            }\n            anime_list.append(anime_info)\n        return anime_list\n    else:\n        return {'error': 'Failed to fetch data'}\n",
      "statuscode": 200,
      "body": {
        "key1": "value",
        "key2": "value"
      },
      "headers": {},
      "schema": {
        "type": "object",
        "properties": {
          "anime_list": {
            "type": "array"
          }
        }
      }
    },
    {
      "name": "get_anime_details_batch",
      "url": "https://cdn.animenewsnetwork.com/encyclopedia/api.xml",
      "description": "Fetch detailed information about multiple anime using their IDs",
      "method": "GET",
      "required_parameters": [
        {
          "name": "title",
          "type": "STRING",
          "description": "The IDs of the anime, separated by slashes",
          "default": "4658/4199/11608"
        }
      ],
      "optional_parameters": [],
      "code": "import requests\nimport xml.etree.ElementTree as ET\n\ndef get_anime_details_batch(anime_ids: list) -> dict:\n    ids = '/'.join(anime_ids)\n    url = f'https://cdn.animenewsnetwork.com/encyclopedia/api.xml?title={ids}'\n    response = requests.get(url)\n    if response.status_code == 200:\n        root = ET.fromstring(response.content)\n        batch_details = {}\n        for child in root:\n            batch_details[child.tag] = child.text if child.text else {sub.tag: sub.text for sub in child}\n        return batch_details\n    else:\n        return {'error': 'Failed to fetch data'}\n",
      "statuscode": 200,
      "body": {
        "key1": "value",
        "key2": "value"
      },
      "headers": {},
      "schema": {
        "type": "object",
        "properties": {
          "anime_batch": {
            "type": "object"
          }
        }
      }
    }
  ]
}
