Open Library offers a suite of APIs to help developers get up and running with our data. This includes RESTful APIs, which make Open Library data availabile in JSON, YAML and RDF/XML formats. There's also an earlier, now deprecated JSON API which is preserved for backward compatibility.

Try out our interactive OpenAPI sandbox!

Identifying your Application
If your application will make regular, frequent use of Open Library's APIs (e.g. multiple calls per minute), please add a HEADER that specifies a User-Agent string with (a) the name of your application and (b) your contact email or phone number, so we may contact you when we notice high request volume. Failing to include these headers may result in your application being blocked.

For help adding user-agent headers to your API calls, please refer to this javascript and python example.

Index of APIs
Book Search API - Search results for books, authors, and more
Work & Edition APIs - Retrieve a specific work or edition by identifier
My Books API - Retrieve books on a patron's public reading log
Authors API - Retrieve an author and their works by author identifier
Subjects API - Fetch books by subject name
Search inside API - Search for matching text within millions of books
Partner API -- Formerly the "Read" API, fetch one or more books by library identifiers (ISBNs, OCLC, LCCNs)
Covers API - Fetch book covers by ISBN or Open Library identifier
Recent Changes API - Programatic access to changes across Open Library
Lists API - Reading, modifying, or creating user lists

Open Library Search API
Open Library provides an experimental API to search.

WARNING: This API is under active development and may change in future.

Overview & Features
The Open Library Search API is one of the most convenient and complete ways to retrieve book data on Open Library. The API:

Is able to return data for multiple books in a single request/response
Returns both Work level information about the book, as well as Edition level information (such as)
Author IDs are returned which you can use to fetch the author's image, if available
Options are available to return Book Availability along with the response.
Powerful sorting options are available, such as star ratings, publication date, and number of editions.
Endpoint
The endpoint for this API is:
https://openlibrary.org/search.json

Examples
The URL format for API is simple. Take the search URL and add .json to the end. Eg:

https://openlibrary.org/search.json?q=the+lord+of+the+rings
https://openlibrary.org/search.json?title=the+lord+of+the+rings
https://openlibrary.org/search.json?author=tolkien&sort=new
https://openlibrary.org/search.json?q=the+lord+of+the+rings&page=2
https://openlibrary.org/search/authors.json?q=twain
Using Thing IDs to get Images
You can use the olid (Open Library ID) for authors and books to fetch covers by olid, e.g.:
https://covers.openlibrary.org/a/olid/OL23919A-M.jpg

URL Parameters
Parameter	Description
q	The solr query. See Search HowTo for sample queries
fields	The fields to get back from solr. Use the special value * to get all fields (although be prepared for a very large response!).
To fetch availability data from archive.org, add the special value, availability. Example: /search.json?q=harry%20potter&fields=*,availability&limit=1. This will fetch the availability data of the first item in the `ia` field.
sort	You can sort the results by various facets such as new, old, random, or key (which sorts as a string, not as the number stored in the string). For a complete list of sorts facets look here (this link goes to a specific commit, be sure to look at the latest one for changes). The default is to sort by relevance.
lang	The users language as a two letter (ISO 639-1) language code. This influences but doesn't exclude search results. For example setting this to fr will prefer/display the French edition of a given work, but will still match works that don't have French editions. Adding language:fre on the other hand to the search query will exclude results that don't have a French edition.
offset / limit	Use for pagination.
page / limit	Use for pagination, with limit corresponding to the page size. Note page starts at 1.
Response Format
The response with be of the following format.

{
    "start": 0,
    "num_found": 629,
    "docs": [
        {...},
        {...},
        ...
        {...}]
}
Each document specified listed in "docs" will be of the following format:

{
    "cover_i": 258027,
    "has_fulltext": true,
    "edition_count": 120,
    "title": "The Lord of the Rings",
    "author_name": [
        "J. R. R. Tolkien"
    ],
    "first_publish_year": 1954,
    "key": "OL27448W",
    "ia": [
        "returnofking00tolk_1",
        "lordofrings00tolk_1",
        "lordofrings00tolk_0",
    ],
    "author_key": [
        "OL26320A"
    ],
    "public_scan_b": true
}
The fields in the doc are described by Solr schema which can be found here:
https://github.com/internetarchive/openlibrary/blob/b4afa14b0981ae1785c26c71908af99b879fa975/openlibrary/plugins/worksearch/schemes/works.py#L38-L91

The schema is not guaranteed to be stable, but most common fields (e.g. title, IA ids, etc) should be safe to depend on.

Getting edition information
By default, the search endpoint returns works instead of editions. A work is a collection of editions; for example there is only one work for The Wonderful Wizard of Oz (OL18417W), but there are 1029 editions, over many languages! Sometimes you might want to fetch data about editions as well as works. That is what the editions field is for:

https://openlibrary.org/search.json?q=crime+and+punishment&fields=key,title,author_name,editions

{
    "numFound": 2421,
    "start": 0,
    "numFoundExact": true,
    "docs": [
        {
            "key": "/works/OL166894W",
            "title": "Преступление и наказание",
            "author_name": ["Фёдор Михайлович Достоевский"],
            "editions": {
                "numFound": 290,
                "start": 0,
                "numFoundExact": true,
                "docs": [
                    {
                        "key": "/books/OL37239326M",
                        "title": "Crime and Punishment"
                    }
                ]
            }
        },
    ...
The editions sub-object contains the editions of this work that match the user's query (here, "crime and punishment"), sorted so the best (i.e. most relevant) is at the top. Matching editions are first selected by forwarding any search fields in the query that apply to editions (e.g. publisher, language, ebook_access, has_fulltext, etc). Any un-fielded search terms (e.g. "crime and punishment", above) are also applied, but are not require to all match.

From these, relevance is further determined by boosting books that (1) match the user's language, (2) are readable, (3) have a cover.

You can see this in action in the search UI as well. Consider the following searches:

"sherlock holmes" - The first work is OL262463W, with the edition displayed Memoirs of Sherlock Holmes (OL7058607M). This edition was selected because it matched the user's query, and it matched the user's language (my language is English), and because it was readable.
"sherlock holmes language:fre" - The same work is displayed as above, but now the displayed edition is Souvenirs sur Sherlock Holmes (OL8887270M), selected because the user's query requires a book in French.
"sherlock holmes" for a French user - By setting lang=fr in the URL, we can simulate the website as it would appear for a French user. This information is used to influence the results again, and the displayed edition is Souvenirs sur Sherlock Holmes (OL8887270M) since this matches the user's language.
"souvenirs sur sherlock holmes" - Here as an English user, I search by the French title. So again I will see the same work as always, but the displayed edition will now also be Souvenirs sur Sherlock Holmes (OL8887270M) since this best matches the user's query.
In the API, you can also fetch fields from editions separately from those on the work, like so:

https://openlibrary.org/search.json?q=crime+and+punishment&fields=key,title,author_name,editions,editions.key,editions.title,editions.ebook_access,editions.language

{
    "numFound": 2421,
    "start": 0,
    "numFoundExact": true,
    "docs": [
        {
            "key": "/works/OL166894W",
            "title": "Преступление и наказание",
            "author_name": ["Фёдор Михайлович Достоевский"],
            "editions": {
                "numFound": 290,
                "start": 0,
                "numFoundExact": true,
                "docs": [
                    {
                        "key": "/books/OL37239326M",
                        "title": "Crime and Punishment",
                        "language": [
                            "eng"
                        ],
                        "ebook_access": "public"
                    }
                ]
            }
        },
    ...

Developer Center / APIs / Books API
The Open Library Books API provides a programmatic client-side method for querying information of books using Javascript.

APIs
Open Library has several APIs for accessing Book data.

The Search API
The Works API (by Work ID)
The Editions API (by Edition ID)
The ISBN API (by ISBN)
The Books API (generic)
The Book Search API
If you are looking for a single API to meet all of your book needs, it's likely the Book Search API.

Learnings about Works v Editions
When we refer to books on Open Library, we're often referring to a specific work and possibly a specific edition of this work.

A Work is a logical collection of similar Editions. "Fantastic Mr. Fox" could be a Work which contains a Spanish translation edition, or perhaps a 2nd edition which has an additional chapter or corrections. Work metadata will include general umbrella information about a book, whereas an Edition will have a publisher, an ISBN, a book-jacket, and other specific information.

Both Work and Edition pages on Open Library (i.e. the pages you navigate to) may also be returned as json or yml (in addition to HTML) by modifying the page URL.

Learn more about the fields that belong to works and editions.

Works API
Work pages on Open Library begin with the URL prefix "/works".

Here is an example:
https://openlibrary.org/works/OL45804W/Fantastic_Mr._FOX

In this example, if we remove the /Title from the URL (e.g. https://openlibrary.org/works/OL45804W) and then add a suffix of ".json" or ".yml" to the end, the page will return a data representation instead of HTML, e.g.:

https://openlibrary.org/works/OL45804W.json

Fetching a Work's Editions
You can fetch a work's editions by adding /editions.json after the work ID:

https://openlibrary.org/works/OL45804W/editions.json

Ratings and Bookshelves
Can be accessed by the following APIs:
https://openlibrary.org/works/OL18020194W/bookshelves.json
https://openlibrary.org/works/OL18020194W/ratings.json

Editions API
Edition pages on Open Library begin with the prefix "/books".

Here is an example:
https://openlibrary.org/books/OL7353617M/Fantastic_Mr._Fox

In this example, if we remove the /Title from the URL (e.g. https://openlibrary.org/works/OL45804W) and then add a suffix of ".json" or ".yml" to the end, the page will return a data representation instead of HTML, e.g.:

https://openlibrary.org/books/OL7353617M.json

ISBN API
The ISBN API is a special case and alternative approach to arriving at an Editions page. Instead of "/books", a path of "/isbn" is used, followed by a valid ISBN 10 or 13.

Here is an example:
https://openlibrary.org/isbn/9780140328721

In this example, entering this URL will result in a redirect to the appropriate Editions page: https://openlibrary.org/books/OL7353617M

Just like an Edition or Work page, we may add ".json" to the end of the URL to request the response in json instead of as HTML, e.g.:

https://openlibrary.org/isbn/9780140328721.json

Legacy Book API
Please consider using the Book Search API above; this is a legacy endpoint and may be phased out in the future.

The Book API is a generic, flexible, configurable endpoint which allows requesting information on one or more books using ISBNs, OCLC Numbers, LCCNs and OLIDs (Open Library IDs). It is inspired by the Google Books Dynamic links API and is compatible with it.
At the core of the API is a URL format that allows developers to construct URLs requesting information on one or more books and send the requests to the Open Library using the <script> tag.

<script src="https://openlibrary.org/api/books?bibkeys=ISBN:0451526538&callback=mycallback"></script>
Request Format
The API supports the following query parameters.

bibkeys

List of IDs to request the information. The API supports ISBNs, LCCNs, OCLC numbers and OLIDs (Open Library IDs).

ISBN

Ex. &bibkeys=ISBN:0451526538 (The API supports both ISBN 10 and 13.)
OCLC

&bibkeys=OCLC:#########
LCCN

&bibkeys=LCCN:#########
OLID

&bibkeys=OLID:OL123M
format

Optional parameter which specifies the response format. Possible values are json and javascript. The default format is javascript.

callback

Optional parameter which specifies the name of the JavaScript function to call with the result. This is considered only when the format is javascript.

jscmd

Optional parameter to decide what information to provide for each matched bib_key. Possible values are viewapi and data. The default value is viewapi.

The Response Format
The response of the API contains a JSON object for each matched bib_key. The contents of the JSON object are decided by the jscmd parameter.

By default, the API returns the response as Javascript.

$ curl 'http://openlibrary.org/api/books?bibkeys=ISBN:0201558025,LCCN:93005405'
var _OLBookInfo = {
    "ISBN:0201558025": {
        ...
    },
    "LCCN:93005405": {
        ...
    }
};
When optional callback parameter is passed, the response is wrapped in a Javascript function call.

$ curl 'https://openlibrary.org/api/books?bibkeys=ISBN:0201558025,LCCN:93005405&callback=processBooks'
processBooks({
    "ISBN:0201558025": {
        ...
    },
    "LCCN:93005405": {
        ...
    }
});
When format=json parameter is passed, the API returns the response as JSON instead of Javascript. This is useful when accessing the API at the server-side.

$ curl 'https://openlibrary.org/api/books?bibkeys=ISBN:0201558025,LCCN:93005405&format=json'
{
    "ISBN:0201558025": {
        ...
    },
    "LCCN:93005405": {
        ...
    }
}
The Data Format
The contents of each JSON object will be decided by the jscmd parameter.

jscmd=viewapi
When jscmd is not specified or when jscmd=viewapi, each JSON object will contain the following:

bib_key

Identifier used to query this book.

info_url

A URL to the book page in the Open Library.

preview

Preview state - either "noview" or "full".

preview_url

A URL to the preview of the book.

This links to the archive.org page when a readable version of the book is available, otherwise it links to the book page on openlibrary.org.

Please note that the preview_url is always provided even if there is no readable version available. The preview property should be used to test if a book is readable.

thumbnail_url

A URL to a thumbnail of the cover of the book. This is provided only when thumbnail is available.

For example:

$ curl 'https://openlibrary.org/api/books?bibkeys=ISBN:0385472579,LCCN:62019420&format=json'
{
    "ISBN:0385472579": {
        "bib_key": "ISBN:0385472579",
        "preview": "noview",
        "thumbnail_url": "https://covers.openlibrary.org/b/id/240726-S.jpg",
        "preview_url": "https://openlibrary.org/books/OL1397864M/Zen_speaks",
        "info_url": "https://openlibrary.org/books/OL1397864M/Zen_speaks"
    },
    "LCCN:62019420": {
        "bib_key": "LCCN:62019420",
        "preview": "full",
        "thumbnail_url": "https://covers.openlibrary.org/b/id/6121771-S.jpg",
        "preview_url": "https://archive.org/details/adventurestomsa00twaigoog",
        "info_url": "https://openlibrary.org/books/OL23377687M/adventures_of_Tom_Sawyer"
    }
}
jscmd=data
When the jscmd=data, data about each matching book is returned. It includes the following:

url

URL of the book

title and subtitle

Title and subtitle of the book.

authors

List of authors. Each entry will be in the following format:

{
    "name": "...",
    "url": "https://openlibrary.org/authors/..."
}
identifiers

All identifiers of the book in the following format:

{
    "isbn_10": [...],
    "isbn_13": [...],
    "lccn": [...],
    "oclc": [...],
    "goodreads": [...]
}
classifications

All classifications of the book in the following format.

{
    "lc_classifications": [...],
    "dewey_decimal_class": [...]
}
subjects, subject_places, subject_people and subject_times

List of subjects, places, people and times of the book. Each entry will be in the following format:

{
    "url": "https://openlibrary.org/subjects/history",
    "name": "History"
}
publishers

List of publishers. Each publisher will be in the following format:

{
    "name": "..."
}
publish_places

List of publish places. Each entry will be in the following format:

{
    "name": "..."
}
publish_date

Published date as a string.

excerpts

List of excerpts to that book. Each entry will be in the following format:

{
    "comment": "...",
    "text": "..."
}
links

List of links to the book. Each link will be in the following format:

{
    "url": "https://...",
    "title": "..."
}
cover

URLs to small, medium and large covers.

{
    "small": "https://covers.openlibrary.org/b/id/1-S.jpg",
    "medium": "https://covers.openlibrary.org/b/id/1-M.jpg",
    "large": "https://covers.openlibrary.org/b/id/1-L.jpg",
}
ebooks

List of ebooks. Each entry will be in the following format:

{
    "preview_url": "https://archive.org/details/..."
}
number_of_pages

Number of pages in that book.

weight

Weight of the book.

For example, here is a sample request.

$ curl 'https://openlibrary.org/api/books?bibkeys=ISBN:9780980200447&jscmd=data&format=json'
{
    "ISBN:9780980200447": {
        "publishers": [
            {
                "name": "Litwin Books"
            }
        ],
        "identifiers": {
            "google": [
                "4LQU1YwhY6kC"
            ],
            "lccn": [
                "2008054742"
            ],
            "isbn_13": [
                "9780980200447"
            ],
            "amazon": [
                "098020044X"
            ],
            "isbn_10": [
                "1234567890"
            ],
            "oclc": [
                "297222669"
            ],
            "librarything": [
                "8071257"
            ],
            "project_gutenberg": [
                "14916"
            ],
            "goodreads": [
                "6383507"
            ]
        },
        "classifications": {
            "dewey_decimal_class": [
                "028/.9"
            ],
            "lc_classifications": [
                "Z1003 .M58 2009"
            ]
        },
        "links": [
            {
                "url": "http://johnmiedema.ca",
                "title": "Author's Website"
            }
        ],
        "weight": "1 grams",
        "title": "Slow reading",
        "url": "https://openlibrary.org/books/OL22853304M/Slow_reading",
        "number_of_pages": 80,
        "cover": {
            "small": "https://covers.openlibrary.org/b/id/5546156-S.jpg",
            "large": "https://covers.openlibrary.org/b/id/5546156-L.jpg",
            "medium": "https://covers.openlibrary.org/b/id/5546156-M.jpg"
        },
        "subjects": [
            {
                "url": "https://openlibrary.org/subjects/books_and_reading",
                "name": "Books and reading"
            },
            {
                "url": "https://openlibrary.org/subjects/reading",
                "name": "Reading"
            }
        ],
        "publish_date": "2009",
        "authors": [
            {
                "url": "https://openlibrary.org/authors/OL6548935A/John_Miedema",
                "name": "John Miedema"
            }
        ],
        "excerpts": [
            {
                "comment": "test purposes",
                "text": "test first page"
            }
        ],
        "publish_places": [
            {
                "name": "Duluth, Minn"
            }
        ]
    }
}
jscmd=details
When jscmd=details is passed, additional details are provided in addition to the info provided by viewapi. The provided details are same as the data provided by the RESTful API.

It is advised to use jscmd=data instead of this as that is more stable format.

$ curl 'https://openlibrary.org/api/books?bibkeys=ISBN:9780980200447&jscmd=details&format=json'
{
    "ISBN:9780980200447": {
        "info_url": "https://openlibrary.org/books/OL22853304M/Slow_reading",
        "bib_key": "ISBN:9780980200447",
        "preview_url": "https://openlibrary.org/books/OL22853304M/Slow_reading",
        "thumbnail_url": "https://covers.openlibrary.org/b/id/5546156-S.jpg",
        "preview": "noview",
        "details": {
            "number_of_pages": 80,
            "table_of_contents": [
                {
                    "title": "The personal nature of slow reading",
                    "type": {
                        "key": "/type/toc_item"
                    },
                    "level": 0
                },
                {
                    "title": "Slow reading in an information ecology",
                    "type": {
                        "key": "/type/toc_item"
                    },
                    "level": 0
                },
                {
                    "title": "The slow movement and slow reading",
                    "type": {
                        "key": "/type/toc_item"
                    },
                    "level": 0
                },
                {
                    "title": "The psychology of slow reading",
                    "type": {
                        "key": "/type/toc_item"
                    },
                    "level": 0
                },
                {
                    "title": "The practice of slow reading.",
                    "type": {
                        "key": "/type/toc_item"
                    },
                    "level": 0
                }
            ],
            "weight": "1 grams",
            "covers": [
                5546156
            ],
            "lc_classifications": [
                "Z1003 .M58 2009"
            ],
            "latest_revision": 14,
            "source_records": [
                "marc:marc_loc_updates/v37.i01.records.utf8:4714764:907",
                "marc:marc_loc_updates/v37.i24.records.utf8:7913973:914",
                "marc:marc_loc_updates/v37.i30.records.utf8:11406606:914"
            ],
            "title": "Slow reading",
            "languages": [
                {
                    "key": "/languages/eng"
                }
            ],
            "subjects": [
                "Books and reading",
                "Reading"
            ],
            "publish_country": "mnu",
            "by_statement": "by John Miedema.",
            "oclc_numbers": [
                "297222669"
            ],
            "type": {
                "key": "/type/edition"
            },
            "physical_dimensions": "1 x 1 x 1 inches",
            "revision": 14,
            "publishers": [
                "Litwin Books"
            ],
            "description": "\"A study of voluntary slow reading from diverse angles\"--Provided by publisher.",
            "physical_format": "Paperback",
            "last_modified": {
                "type": "/type/datetime",
                "value": "2010-08-07T19:35:52.482887"
            },
            "key": "/books/OL22853304M",
            "authors": [
                {
                    "name": "John Miedema",
                    "key": "/authors/OL6548935A"
                }
            ],
            "publish_places": [
                "Duluth, Minn"
            ],
            "pagination": "80p.",
            "classifications": {},
            "created": {
                "type": "/type/datetime",
                "value": "2009-01-07T22:16:11.381678"
            },
            "lccn": [
                "2008054742"
            ],
            "notes": "Includes bibliographical references and index.",
            "identifiers": {
                "amazon": [
                    "098020044X"
                ],
                "google": [
                    "4LQU1YwhY6kC"
                ],
                "project_gutenberg": [
                    "14916"
                ],
                "goodreads": [
                    "6383507"
                ],
                "librarything": [
                    "8071257"
                ]
            },
            "isbn_13": [
                "9780980200447"
            ],
            "dewey_decimal_class": [
                "028/.9"
            ],
            "isbn_10": [
                "1234567890"
            ],
            "publish_date": "2009",
            "works": [
                {
                    "key": "/works/OL13694821W"
                }
            ]
        }
    }
}

Developer Center / APIs / Authors API
Searching for Authors
You can search for authors using the https://openlibrary.org/search/authors.json search API which accepts q as a query parameter:

https://openlibrary.org/search/authors.json?q=j%20k%20rowling

{
  numFound: 1,
  start: 0,
  numFoundExact: true,
  docs: [
    {
      key: "OL23919A",
      text: [...],
      type: "author",
      name: "J. K. Rowling",
      alternate_names: [...],
      birth_date: "31 July 1965",
      top_work: "Harry Potter and the Philosopher's Stone",
      work_count: 162,
      top_subjects: [...],
      _version_: 1702166143068799000
    },
  ]
}
Data on Individual Authors
Once you have the identifier key of an author of interest, e.g. /authors/OL23919A, you can fetch their complete data by visiting their Author page as .json, .rdf, .yml:

e.g. https://openlibrary.org/authors/OL23919A.json

Works by an Author
https://openlibrary.org/authors/OL23919A/works.json

The above URL will return 50 works by an author.

You can append ?limit=1000 to return the first 1000 works by an author like so:
https://openlibrary.org/authors/OL1394244A/works.json?limit=100

If you want to paginate, you can set offset like so:
https://openlibrary.org/authors/OL1394244A/works.json?offset=50

Search inside individual book API
WARNING: This is an experimental API and can change in future.

Here is an example of searching inside a book using the searching within a book using the API.

This API is based on changing datanode hosts (i.e. an archive.org item's files live on data hosts which can change). To find the data node host of an item, go to archive.org/metadata/{identifier} and change the prefix ia800204 to the value of d1 or d2 accordingly. The path variable in the url may also have to change to dir value within the metadata:

https://ia800204.us.archive.org/fulltext/inside.php?item_id=designevaluation25clin&doc=designevaluation25clin&path=/27/items/designevaluation25clin&q=%22library%20science%22

Information you need to search inside a book, with an example from the above search:

hostname: ia800204.us.archive.org (host where the book is stored)
item_id: designevaluation25clin (archive.org item ID)
doc: designevaluation25clin (most times this is the same as the item_id)
path: /27/items/designevaluation25clin (path of the book on this host)
q: "library science" (phrase to search for)
callback: reply (optional callback for JSONP)
You can find the hostname and path using the archive.org locator service.

Example of output from API call:

reply( {
    "ia": "designevaluation25clin",
    "q": "\"library science\"",
    "page_count": 224,
    "body_length": 475677,
    "leaf0_missing": true,
    "matches": [
       ...
    ]
} )
The reply includes page count, this is the number of pages that were passed to the OCR.

Example of a match:

{
    "text": "The first Clinic on Library Applications of Data Processing was held at the Illini Union on the Urbana-Champaign campus of the University of Illinois, April 28 - May 1, 1963 under the sponsorship of the University of Illinois Graduate School of {{{Library}}} {{{Science}}}. Writing in the Foreword to the Clinic proceedings, Herbert Goldhor (1964) provides the rationale for sponsoring such a Clinic:",
    "par": [
        {
            "page": 14, "page_width": 2134, "page_height": 3328,
            "b": 1090, "t": 700, "r": 2024, "l": 192,
            "boxes": [
                { "r": 1560, "b": 957, "t": 899, "l": 1378 },
                { "r": 1767, "b": 957, "t": 899, "l": 1587 }
            ]
        }
    ]
}
Each match contains a 'text' field. This is usually a complete paragraph. The matched words are surrounded by three braces either side, like {{{this}}}.

The other field is called par, it contains details of every page that is part of this match. Paragraphs can cross pages. Each par object provides a page number, page width, height, and coordinates for the paragraph on the page. The boxes field field lists the coordinates to draw around each word or part of word in the match.

Hyphenation means words can break across lines and across pages.