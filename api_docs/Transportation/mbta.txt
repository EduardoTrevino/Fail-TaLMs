MBTA
About the V3 API
The new V3 API provides fast, easy access to MBTA schedules, alerts, and real-time information.

The V3 API uses the JSON API format, so you can get started quickly using any of the available libraries
V3 API documentation is available using Swagger Shown later below
Basic Calls
The V3 API data model is based on GTFS and GTFS-realtime where applicable. The following calls are available:

alerts
facilities - elevators, escalators, and (coming soon) parking lots, bike racks, etc.
predictions - predicted arrival/departure times
routes
schedules - scheduled arrival/departure times (stop_time)
shapes - stops and maps for branches, including route variations
stops
trips
vehicles - vehicle positions
Each call returns the object described. Following the JSON API standard, options are provided to filter or sort the list in various ways, and to include other objects with related information.

Filter
The following examples of filtering use the routes call:

/routes retrieves a list, in the data[] object, of all routes.
/routes?filter[type]=0,1 retrieves only the routes with a route type of 0 or 1 (subway)
/routes?filter[stop]=place-north retrieves only the routes that have trips stopping at the stop place-north (North Station)
/routes?filter[type]=0,1&filter[stop]=place-north combines the filters above to retrieve only subway trips stopping at North Station
/routes/Orange retrieves only the route with `route_id="Orange"`
Include
An arrival time doesn't mean much unless you know where the vehicle is arriving and where it's going next. Some objects are defined largely by their relationship to other objects. Those other objects can be included in the results as well.

The following examples of "including" use the schedules call:

schedules?filter... returns a selection of scheduled stops (`stop_times`), which contains the route_id, trip_id, and stop_id, but no information about the corresponding trip, route, or stop.
schedules?include=route&filter... includes each route object referenced by a schedule object, providing the route name, mode, color, etc. The included values are in an `include[]` object and can be looked up from the predictions by their type and id.
schedules?include=route,trip,stop&filter... includes the routes as well as the trips and stops.  
schedules?include=prediction&filter... includes real-time predictions (if any) currently being made for the returned scheduled times. In this example URL you're only likely to see predictions if you make the call around 1:30 PM-2:30 PM EST.
This is an example to obtain predictions with useful information about the stops they are related to:

predictions?filter... returns predictions from South Station with direction_id 0.  Note the "relationships" fields for each prediction; each prediction has a relationship with a stop which corresponds to the platform the train will be at.  The id of the related stop can be cross referenced with the included stops to obtain useful information such as the platform_code that the vehicle for the prediction will be leaving from.
For more information, see the V3 API Swagger documentation and get a key at api-v3.mbta.com.
Alert

GET
/alerts

List active and upcoming system alerts

An effect (enumerated in /data/{index}/attributes/effect and human-readable in /data/{index}/attributes/service_effect) on a provided service (facility, route, route type, stop and/or trip in //data/{index}/attributes/informed_entity) described by a banner (/data/{index}/attributes/banner), short header (/data/{index}/attributes/short_header), header /data/{index}/attributes/header, description (/data/{index}/attributes/description), image (/data/{index}/attributes/image), and image alternative text (/data/{index}/attributes/image_alternative_text) that is active for one or more periods(/data/{index}/attributes/active_period) caused by a cause (/data/{index}/attribute/cause) that somewhere in its lifecycle (enumerated in /data/{index}/attributes/lifecycle and human-readable in /data/{index}/attributes/timeframe).

See GTFS Realtime FeedMessage FeedEntity Alert

Descriptions
There are 7 descriptive attributes.

JSON pointer	Usage
/data/{index}/attributes/banner	Display as alert across application/website
/data/{index}/attributes/short_header	When /data/{index}/attributes/header is too long to display
/data/{index}/attributes/header	Used before showing and prepended to /data/{index}/attributes/description
/data/{index}/attributes/description	Used when user asks to expand alert.
/data/{index}/attributes/image	URL to descriptive image.
/data/{index}/attributes/image_alternative_text	Text that describes image linked in url
Effect
JSON pointer	
/data/{index}/attributes/effect	Enumerated
/data/{index}/attributes/service_effect	Human-readable
Timeline
There are 3 timeline related attributes

JSON pointer	Description
/data/{index}/attributes/active_period	Exact Date/Time ranges alert is active
/data/{index}/attributes/lifecycle	Enumerated, machine-readable description of /data/{index}/attributes/active_period
/data/{index}/attributes/timeframe	Human-readable description of /data/{index}/attributes/active_period
Activities
Alerts are by default filtered to those where /data/{index}/attributes/informed_entity/{informed_entity_index}/activities/{activity_index} in one of BOARDEXITRIDE, as these cover most riders. If you want all alerts without filtering by activity, you should use the special value "ALL": filter[activity]=ALL.

Accessibility
The default activities cover if boarding, exiting, or riding is generally affected for all riders by the alert. If ONLY wheelchair using riders are affected, such as if a ramp, lift, or safety system for wheelchairs is affected, only the "USING_WHEELCHAIR" activity will be set. To cover wheelchair using rider, filter on the defaults and "USING_WHEELCHAIR": filter[activity]=USING_WHEELCHAIR,BOARD,EXIT,RIDE.

Similarly for riders with limited mobility that need escalators, "USING_ESCALATOR" should be added to the defaults: filter[activity]=USING_ESCALATOR,BOARD,EXIT,RIDE.

Parameters
Try it out
Name	Description
page[offset]
integer
(query)	
Offset (0-based) of first element in the page

page[limit]
integer
(query)	
Max number of elements to return

sort
string
(query)	
Results can be sorted by the id or any /data/{index}/attributes key. Assumes ascending; may be prefixed with '-' for descending

JSON pointer	Direction	sort
/data/{index}/attributes/active_period	ascending	active_period
/data/{index}/attributes/active_period	descending	-active_period
/data/{index}/attributes/banner	ascending	banner
/data/{index}/attributes/banner	descending	-banner
/data/{index}/attributes/cause	ascending	cause
/data/{index}/attributes/cause	descending	-cause
/data/{index}/attributes/created_at	ascending	created_at
/data/{index}/attributes/created_at	descending	-created_at
/data/{index}/attributes/description	ascending	description
/data/{index}/attributes/description	descending	-description
/data/{index}/attributes/duration_certainty	ascending	duration_certainty
/data/{index}/attributes/duration_certainty	descending	-duration_certainty
/data/{index}/attributes/effect	ascending	effect
/data/{index}/attributes/effect	descending	-effect
/data/{index}/attributes/effect_name	ascending	effect_name
/data/{index}/attributes/effect_name	descending	-effect_name
/data/{index}/attributes/header	ascending	header
/data/{index}/attributes/header	descending	-header
/data/{index}/attributes/image	ascending	image
/data/{index}/attributes/image	descending	-image
/data/{index}/attributes/image_alternative_text	ascending	image_alternative_text
/data/{index}/attributes/image_alternative_text	descending	-image_alternative_text
/data/{index}/attributes/informed_entity	ascending	informed_entity
/data/{index}/attributes/informed_entity	descending	-informed_entity
/data/{index}/attributes/lifecycle	ascending	lifecycle
/data/{index}/attributes/lifecycle	descending	-lifecycle
/data/{index}/attributes/service_effect	ascending	service_effect
/data/{index}/attributes/service_effect	descending	-service_effect
/data/{index}/attributes/severity	ascending	severity
/data/{index}/attributes/severity	descending	-severity
/data/{index}/attributes/short_header	ascending	short_header
/data/{index}/attributes/short_header	descending	-short_header
/data/{index}/attributes/timeframe	ascending	timeframe
/data/{index}/attributes/timeframe	descending	-timeframe
/data/{index}/attributes/updated_at	ascending	updated_at
/data/{index}/attributes/updated_at	descending	-updated_at
/data/{index}/attributes/url	ascending	url
/data/{index}/attributes/url	descending	-url
fields[alert]
string
(query)	
Fields to include with the response. Multiple fields MUST be a comma-separated (U+002C COMMA, “,”) list.

Note that fields can also be selected for included data types: see the V3 API Best Practices for an example.

include
string
(query)	
Relationships to include.

stops
routes
trips
facilities
The value of the include parameter MUST be a comma-separated (U+002C COMMA, “,”) list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, “.”) list of relationship names. JSONAPI “include” behavior

filter[activity]
string
(query)	
Filter to alerts for only those activities (/data/{index}/attributes/informed_entity/activities/{activity_index}) matching. Multiple activities
MUST be a comma-separated (U+002C COMMA, “,”) list.

An activity affected by an alert.

Value	Description
"BOARD"	Boarding a vehicle. Any passenger trip includes boarding a vehicle and exiting from a vehicle.
"BRINGING_BIKE"	Bringing a bicycle while boarding or exiting.
"EXIT"	Exiting from a vehicle (disembarking). Any passenger trip includes boarding a vehicle and exiting a vehicle.
"PARK_CAR"	Parking a car at a garage or lot in a station.
"RIDE"	Riding through a stop without boarding or exiting… Not every passenger trip will include this – a passenger may board at one stop and exit at the next stop.
"STORE_BIKE"	Storing a bicycle at a station.
"USING_ESCALATOR"	Using an escalator while boarding or exiting (should only be used for customers who specifically want to avoid stairs.)
"USING_WHEELCHAIR"	Using a wheelchair while boarding or exiting. Note that this applies to something that specifically affects customers who use a wheelchair to board or exit; a delay should not include this as an affected activity unless it specifically affects customers using wheelchairs.
Special Values
If the filter is not given OR it is empty, then defaults to ["BOARD", "EXIT", “RIDE”].
If the value "ALL" is used then all alerts will be returned, not just those with the default activities.
Accessibility
The default activities cover if boarding, exiting, or riding is generally affected for all riders by the alert. If ONLY wheelchair using riders are affected, such as if a ramp, lift, or safety system for wheelchairs is affected, only the "USING_WHEELCHAIR" activity will be set. To cover wheelchair using rider, filter on the defaults and "USING_WHEELCHAIR": filter[activity]=USING_WHEELCHAIR,BOARD,EXIT,RIDE.

Similarly for riders with limited mobility that need escalators, "USING_ESCALATOR" should be added to the defaults: filter[activity]=USING_ESCALATOR,BOARD,EXIT,RIDE.

filter[route_type]
string
(query)	
Filter by route_type: https://developers.google.com/transit/gtfs/reference/routes-file.

Multiple route_type MUST be a comma-separated (U+002C COMMA, “,”) list.

filter[direction_id]
string
(query)	
Filter by direction of travel along the route. Must be used in conjuction with filter[route] to apply.

The meaning of direction_id varies based on the route. You can programmatically get the direction names from /routes /data/{index}/attributes/direction_names or /routes/{id} /data/attributes/direction_names.

filter[route]
string
(query)	
Filter by /data/{index}/relationships/route/data/id.

Multiple IDs MUST be a comma-separated (U+002C COMMA, “,”) list.

filter[stop]
string
(query)	
Filter by /data/{index}/relationships/stop/data/id.

Multiple IDs MUST be a comma-separated (U+002C COMMA, “,”) list.

Parent station IDs are treated as though their child stops were also included.

filter[trip]
string
(query)	
Filter by /data/{index}/relationships/trip/data/id.

Multiple IDs MUST be a comma-separated (U+002C COMMA, “,”) list.

filter[facility]
string
(query)	
Filter by /data/{index}/relationships/facility/data/id.

Multiple IDs MUST be a comma-separated (U+002C COMMA, “,”) list.

filter[id]
string
(query)	
Filter by multiple IDs. Multiple IDs MUST be a comma-separated (U+002C COMMA, “,”) list.

filter[banner]
string
(query)	
When combined with other filters, filters by alerts with or without a banner. MUST be “true” or "false".

filter[datetime]
string
(query)	
Filter to alerts that are active at a given time (ISO8601 format).

Additionally, the string “NOW” can be used to filter to alerts that are currently active.

filter[lifecycle]
string
(query)	
Filters by an alert’s lifecycle. MUST be a comma-separated (U+002C COMMA, “,”) list.

filter[severity]
string
(query)	
Filters alerts by list of severities. MUST be a comma-separated (U+002C COMMA, “,”) list.

Example: filter[severity]=3,4,10 returns alerts with severity levels 3, 4 and 10.

Responses
Response content type

application/vnd.api+json
Code	Description
200	
OK

Example Value
Model
{
  "links": {
    "self": "string",
    "prev": "string",
    "next": "string",
    "last": "string",
    "first": "string"
  },
  "data": [
    {
      "type": "string",
      "relationships": {
        "facility": {
          "links": {
            "self": "string",
            "related": "string"
          },
          "data": {
            "type": "string",
            "id": "string"
          }
        }
      },
      "links": {},
      "id": "string",
      "attributes": {
        "url": "http://www.mbta.com/uploadedfiles/Documents/Schedules_and_Maps/Commuter_Rail/fairmount.pdf?led=6/3/2017%201:22:09%20AM",
        "updated_at": "2017-08-14T14:54:01-04:00",
        "timeframe": "Ongoing",
        "short_header": "All weekend Fairmount Line trains will be bused between Morton St. & Readville due to construction of Blue Hill Ave Station.\n",
        "severity": 10,
        "service_effect": "Minor Route 216 delay",
        "lifecycle": "Ongoing",
        "informed_entity": [
          {
            "trip": "CR-Weekday-Spring-17-517",
            "stop": "Auburndale",
            "route_type": 2,
            "route": "CR-Worcester",
            "facility": "405",
            "direction_id": 0,
            "activities": [
              "BOARD",
              "EXIT"
            ]
          }
        ],
        "image_alternative_text": "Shuttle service beginning at North Quincy and ending at Braintree",
        "image": "http://example.com/alert_image.png",
        "header": "Starting 6/3, all weekend Fairmount Line trains will be bused between Morton St. and Readville in both directions due to construction of the new Blue Hill Avenue Station.\n",
        "effect_name": "Delay",
        "effect": "ACCESS_ISSUE",
        "duration_certainty": "UNKNOWN",
        "description": "If entering the station, cross Tremont Street to the Boston Common and use Park Street Elevator 978 to the Green Line westbound platform. Red Line platform access is available via the elevator beyond the fare gates. If exiting the station, please travel down the Winter Street Concourse toward Downtown Crossing Station, exit through the fare gates, and take Downtown Crossing Elevator 892 to the street level.\n",
        "created_at": "2017-08-14T14:54:01-04:00",
        "cause": "ACCIDENT",
        "banner": "All service suspended due to severe weather",
        "active_period": [
          {
            "start": "2017-08-14T14:54:01-04:00",
            "end": "2017-08-14T14:54:01-04:00"
          }
        ]
      }
    }
  ]
}
400	
Bad Request

Example Value
Model
{
  "errors": [
    {
      "status": "400",
      "source": {
        "parameter": "sort"
      },
      "detail": "Invalid sort key",
      "code": "bad_request"
    }
  ]
}
403	
Forbidden

Example Value
Model
{
  "errors": [
    {
      "status": "403",
      "code": "forbidden"
    }
  ]
}
429	
Too Many Requests

Example Value
Model
{
  "errors": [
    {
      "status": "429",
      "detail": "You have exceeded your allowed usage rate.",
      "code": "rate_limited"
    }
  ]
}
GET
/alerts/{id}

Show a particular alert by the alert’s id

An effect (enumerated in /data/attributes/effect and human-readable in /data/attributes/service_effect) on a provided service (facility, route, route type, stop and/or trip in //data/attributes/informed_entity) described by a banner (/data/attributes/banner), short header (/data/attributes/short_header), header /data/attributes/header, description (/data/attributes/description), image (/data/attributes/image), and image alternative text (/data/attributes/image_alternative_text) that is active for one or more periods(/data/attributes/active_period) caused by a cause (/data/attribute/cause) that somewhere in its lifecycle (enumerated in /data/attributes/lifecycle and human-readable in /data/attributes/timeframe).

See GTFS Realtime FeedMessage FeedEntity Alert

Descriptions
There are 7 descriptive attributes.

JSON pointer	Usage
/data/attributes/banner	Display as alert across application/website
/data/attributes/short_header	When /data/attributes/header is too long to display
/data/attributes/header	Used before showing and prepended to /data/attributes/description
/data/attributes/description	Used when user asks to expand alert.
/data/attributes/image	URL to descriptive image.
/data/attributes/image_alternative_text	Text that describes image linked in url
Effect
JSON pointer	
/data/attributes/effect	Enumerated
/data/attributes/service_effect	Human-readable
Timeline
There are 3 timeline related attributes

JSON pointer	Description
/data/attributes/active_period	Exact Date/Time ranges alert is active
/data/attributes/lifecycle	Enumerated, machine-readable description of /data/attributes/active_period
/data/attributes/timeframe	Human-readable description of /data/attributes/active_period
Parameters
Try it out
Name	Description
id *
string
(path)	
Unique identifier for alert

fields[alert]
string
(query)	
Fields to include with the response. Multiple fields MUST be a comma-separated (U+002C COMMA, “,”) list.

Note that fields can also be selected for included data types: see the V3 API Best Practices for an example.

include
string
(query)	
Relationships to include.

stops
routes
trips
facilities
The value of the include parameter MUST be a comma-separated (U+002C COMMA, “,”) list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, “.”) list of relationship names. JSONAPI “include” behavior

Responses
Response content type

application/vnd.api+json
Code	Description
200	
OK

Example Value
Model
{
  "links": {
    "self": "string"
  },
  "included": [
    {
      "type": "string",
      "id": "string"
    }
  ],
  "data": {
    "type": "string",
    "relationships": {
      "facility": {
        "links": {
          "self": "string",
          "related": "string"
        },
        "data": {
          "type": "string",
          "id": "string"
        }
      }
    },
    "links": {},
    "id": "string",
    "attributes": {
      "url": "http://www.mbta.com/uploadedfiles/Documents/Schedules_and_Maps/Commuter_Rail/fairmount.pdf?led=6/3/2017%201:22:09%20AM",
      "updated_at": "2017-08-14T14:54:01-04:00",
      "timeframe": "Ongoing",
      "short_header": "All weekend Fairmount Line trains will be bused between Morton St. & Readville due to construction of Blue Hill Ave Station.\n",
      "severity": 10,
      "service_effect": "Minor Route 216 delay",
      "lifecycle": "Ongoing",
      "informed_entity": [
        {
          "trip": "CR-Weekday-Spring-17-517",
          "stop": "Auburndale",
          "route_type": 2,
          "route": "CR-Worcester",
          "facility": "405",
          "direction_id": 0,
          "activities": [
            "BOARD",
            "EXIT"
          ]
        }
      ],
      "image_alternative_text": "Shuttle service beginning at North Quincy and ending at Braintree",
      "image": "http://example.com/alert_image.png",
      "header": "Starting 6/3, all weekend Fairmount Line trains will be bused between Morton St. and Readville in both directions due to construction of the new Blue Hill Avenue Station.\n",
      "effect_name": "Delay",
      "effect": "ACCESS_ISSUE",
      "duration_certainty": "UNKNOWN",
      "description": "If entering the station, cross Tremont Street to the Boston Common and use Park Street Elevator 978 to the Green Line westbound platform. Red Line platform access is available via the elevator beyond the fare gates. If exiting the station, please travel down the Winter Street Concourse toward Downtown Crossing Station, exit through the fare gates, and take Downtown Crossing Elevator 892 to the street level.\n",
      "created_at": "2017-08-14T14:54:01-04:00",
      "cause": "ACCIDENT",
      "banner": "All service suspended due to severe weather",
      "active_period": [
        {
          "start": "2017-08-14T14:54:01-04:00",
          "end": "2017-08-14T14:54:01-04:00"
        }
      ]
    }
  }
}
400	
Bad Request

Example Value
Model
{
  "errors": [
    {
      "status": "400",
      "source": {
        "parameter": "sort"
      },
      "detail": "Invalid sort key",
      "code": "bad_request"
    }
  ]
}
403	
Forbidden

Example Value
Model
{
  "errors": [
    {
      "status": "403",
      "code": "forbidden"
    }
  ]
}
404	
Not Found

Example Value
Model
{
  "errors": [
    {
      "title": "Resource Not Found",
      "status": "404",
      "source": {
        "parameter": "id"
      },
      "code": "not_found"
    }
  ]
}
406	
Not Acceptable

Example Value
Model
{
  "errors": [
    {
      "status": "406",
      "detail": "Content-type text/event-stream is not supported for this kind of request.",
      "code": "not_acceptable"
    }
  ]
}
429	
Too Many Requests

Example Value
Model
{
  "errors": [
    {
      "status": "429",
      "detail": "You have exceeded your allowed usage rate.",
      "code": "rate_limited"
    }
  ]
}
Facility

GET
/facilities

List Escalators and Elevators

Amenities at a station stop (/data/relationships/stop) such as elevators, escalators, parking lots, and bike storage.

An MBTA extension. This spec is not yet finalized.

Accessibility
Riders with limited mobility can search any facility, either ELEVATOR or ESCALATOR, while riders that need wheelchair access can search for ELEVATOR only.

The lack of an ELEVATOR MAY NOT make a stop wheelchair inaccessible. Riders should check /stops/{id} /data/attributes/wheelchair_boarding is 1 to guarantee a path is available from the station entrance to the stop or 0 if it MAY be accessible. Completely avoid 2 as that is guaranteed to be INACCESSIBLE.

Parameters
Try it out
Name	Description
page[offset]
integer
(query)	
Offset (0-based) of first element in the page

page[limit]
integer
(query)	
Max number of elements to return

sort
string
(query)	
Results can be sorted by the id or any /data/{index}/attributes key. Assumes ascending; may be prefixed with '-' for descending

JSON pointer	Direction	sort
/data/{index}/attributes/latitude	ascending	latitude
/data/{index}/attributes/latitude	descending	-latitude
/data/{index}/attributes/long_name	ascending	long_name
/data/{index}/attributes/long_name	descending	-long_name
/data/{index}/attributes/longitude	ascending	longitude
/data/{index}/attributes/longitude	descending	-longitude
/data/{index}/attributes/properties	ascending	properties
/data/{index}/attributes/properties	descending	-properties
/data/{index}/attributes/short_name	ascending	short_name
/data/{index}/attributes/short_name	descending	-short_name
/data/{index}/attributes/type	ascending	type
/data/{index}/attributes/type	descending	-type
fields[facility]
string
(query)	
Fields to include with the response. Multiple fields MUST be a comma-separated (U+002C COMMA, “,”) list.

Note that fields can also be selected for included data types: see the V3 API Best Practices for an example.

include
string
(query)	
Relationships to include.

stop
The value of the include parameter MUST be a comma-separated (U+002C COMMA, “,”) list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, “.”) list of relationship names. JSONAPI “include” behavior

filter[stop]
string
(query)	
Filter by /data/{index}/relationships/stop/data/id.

Multiple IDs MUST be a comma-separated (U+002C COMMA, “,”) list.

filter[type]
string
(query)	
Filter by type. Multiple types MUST be a comma-separated (U+002C COMMA, “,”) list.

Responses
Response content type

application/vnd.api+json
Code	Description
200	
OK

Example Value
Model
{
  "links": {
    "self": "string",
    "prev": "string",
    "next": "string",
    "last": "string",
    "first": "string"
  },
  "data": [
    {
      "type": "string",
      "relationships": {
        "stop": {
          "links": {
            "self": "string",
            "related": "string"
          },
          "data": {
            "type": "string",
            "id": "string"
          }
        }
      },
      "links": {},
      "id": "string",
      "attributes": {
        "type": "ELEVATOR",
        "short_name": "Ashmont platform to lobby",
        "properties": [
          {
            "value": "197 Ivory St, Braintree, MA 02184",
            "name": "address"
          }
        ],
        "longitude": 42.316115,
        "long_name": "SHAWMUT - Ashmont Bound Platform to Lobby",
        "latitude": -71.194994
      }
    }
  ]
}
400	
Bad Request

Example Value
Model
{
  "errors": [
    {
      "status": "400",
      "source": {
        "parameter": "sort"
      },
      "detail": "Invalid sort key",
      "code": "bad_request"
    }
  ]
}
403	
Forbidden

Example Value
Model
{
  "errors": [
    {
      "status": "403",
      "code": "forbidden"
    }
  ]
}
429	
Too Many Requests

Example Value
Model
{
  "errors": [
    {
      "status": "429",
      "detail": "You have exceeded your allowed usage rate.",
      "code": "rate_limited"
    }
  ]
}
GET
/facilities/{id}

Specific Escalator or Elevator

Amenities at a station stop (/data/{index}/relationships/stop) such as elevators, escalators, parking lots, and bike storage.

An MBTA extension. This spec is not yet finalized.

Accessibility
Riders with limited mobility can search any facility, either ELEVATOR or ESCALATOR, while riders that need wheelchair access can search for ELEVATOR only.

The lack of an ELEVATOR MAY NOT make a stop wheelchair inaccessible. Riders should check /stops/{id} /data/attributes/wheelchair_boarding is 1 to guarantee a path is available from the station entrance to the stop or 0 if it MAY be accessible. Completely avoid 2 as that is guaranteed to be INACCESSIBLE.

Parameters
Try it out
Name	Description
id *
string
(path)	
Unique identifier for facility

fields[facility]
string
(query)	
Fields to include with the response. Multiple fields MUST be a comma-separated (U+002C COMMA, “,”) list.

Note that fields can also be selected for included data types: see the V3 API Best Practices for an example.

include
string
(query)	
Relationships to include.

stop
The value of the include parameter MUST be a comma-separated (U+002C COMMA, “,”) list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, “.”) list of relationship names. JSONAPI “include” behavior

Responses
Response content type

application/vnd.api+json
Code	Description
200	
OK

Example Value
Model
{
  "links": {
    "self": "string"
  },
  "included": [
    {
      "type": "string",
      "id": "string"
    }
  ],
  "data": {
    "type": "string",
    "relationships": {
      "stop": {
        "links": {
          "self": "string",
          "related": "string"
        },
        "data": {
          "type": "string",
          "id": "string"
        }
      }
    },
    "links": {},
    "id": "string",
    "attributes": {
      "type": "ELEVATOR",
      "short_name": "Ashmont platform to lobby",
      "properties": [
        {
          "value": "197 Ivory St, Braintree, MA 02184",
          "name": "address"
        }
      ],
      "longitude": 42.316115,
      "long_name": "SHAWMUT - Ashmont Bound Platform to Lobby",
      "latitude": -71.194994
    }
  }
}
403	
Forbidden

Example Value
Model
{
  "errors": [
    {
      "status": "403",
      "code": "forbidden"
    }
  ]
}
404	
Not Found

Example Value
Model
{
  "errors": [
    {
      "title": "Resource Not Found",
      "status": "404",
      "source": {
        "parameter": "id"
      },
      "code": "not_found"
    }
  ]
}
406	
Not Acceptable

Example Value
Model
{
  "errors": [
    {
      "status": "406",
      "detail": "Content-type text/event-stream is not supported for this kind of request.",
      "code": "not_acceptable"
    }
  ]
}
429	
Too Many Requests

Example Value
Model
{
  "errors": [
    {
      "status": "429",
      "detail": "You have exceeded your allowed usage rate.",
      "code": "rate_limited"
    }
  ]
}
Line

GET
/lines

List of lines. A line is a combination of routes. This concept can be used to group similar routes when displaying them to customers, such as for routes which serve the same trunk corridor or bus terminal.

Parameters
Try it out
Name	Description
page[offset]
integer
(query)	
Offset (0-based) of first element in the page

page[limit]
integer
(query)	
Max number of elements to return

sort
string
(query)	
Results can be sorted by the id or any /data/{index}/attributes key. Assumes ascending; may be prefixed with '-' for descending

JSON pointer	Direction	sort
/data/{index}/attributes/color	ascending	color
/data/{index}/attributes/color	descending	-color
/data/{index}/attributes/long_name	ascending	long_name
/data/{index}/attributes/long_name	descending	-long_name
/data/{index}/attributes/short_name	ascending	short_name
/data/{index}/attributes/short_name	descending	-short_name
/data/{index}/attributes/sort_order	ascending	sort_order
/data/{index}/attributes/sort_order	descending	-sort_order
/data/{index}/attributes/text_color	ascending	text_color
/data/{index}/attributes/text_color	descending	-text_color
fields[line]
string
(query)	
Fields to include with the response. Multiple fields MUST be a comma-separated (U+002C COMMA, “,”) list.

Note that fields can also be selected for included data types: see the V3 API Best Practices for an example.

include
string
(query)	
Relationships to include.

routes
The value of the include parameter MUST be a comma-separated (U+002C COMMA, “,”) list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, “.”) list of relationship names. JSONAPI “include” behavior

filter[id]
string
(query)	
Filter by multiple IDs. MUST be a comma-separated (U+002C COMMA, “,”) list.

Responses
Response content type

application/vnd.api+json
Code	Description
200	
OK

Example Value
Model
{
  "links": {
    "self": "string",
    "prev": "string",
    "next": "string",
    "last": "string",
    "first": "string"
  },
  "data": [
    {
      "type": "string",
      "relationships": {},
      "links": {},
      "id": "string",
      "attributes": {
        "text_color": "000000",
        "sort_order": 0,
        "short_name": "CT2",
        "long_name": "Sullivan - Ruggles",
        "color": "FFFFFF"
      }
    }
  ]
}
400	
Bad Request

Example Value
Model
{
  "errors": [
    {
      "status": "400",
      "source": {
        "parameter": "sort"
      },
      "detail": "Invalid sort key",
      "code": "bad_request"
    }
  ]
}
403	
Forbidden

Example Value
Model
{
  "errors": [
    {
      "status": "403",
      "code": "forbidden"
    }
  ]
}
429	
Too Many Requests

Example Value
Model
{
  "errors": [
    {
      "status": "429",
      "detail": "You have exceeded your allowed usage rate.",
      "code": "rate_limited"
    }
  ]
}
GET
/lines/{id}

Single line, which represents a combination of routes.

Parameters
Try it out
Name	Description
id *
string
(path)	
Unique identifier for a line

fields[line]
string
(query)	
Fields to include with the response. Multiple fields MUST be a comma-separated (U+002C COMMA, “,”) list.

Note that fields can also be selected for included data types: see the V3 API Best Practices for an example.

include
string
(query)	
Relationships to include.

routes
The value of the include parameter MUST be a comma-separated (U+002C COMMA, “,”) list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, “.”) list of relationship names. JSONAPI “include” behavior

Responses
Response content type

application/vnd.api+json
Code	Description
200	
OK

Example Value
Model
{
  "links": {
    "self": "string",
    "prev": "string",
    "next": "string",
    "last": "string",
    "first": "string"
  },
  "data": [
    {
      "type": "string",
      "relationships": {},
      "links": {},
      "id": "string",
      "attributes": {
        "text_color": "000000",
        "sort_order": 0,
        "short_name": "CT2",
        "long_name": "Sullivan - Ruggles",
        "color": "FFFFFF"
      }
    }
  ]
}
400	
Bad Request

Example Value
Model
{
  "errors": [
    {
      "status": "400",
      "source": {
        "parameter": "sort"
      },
      "detail": "Invalid sort key",
      "code": "bad_request"
    }
  ]
}
403	
Forbidden

Example Value
Model
{
  "errors": [
    {
      "status": "403",
      "code": "forbidden"
    }
  ]
}
404	
Not Found

Example Value
Model
{
  "errors": [
    {
      "title": "Resource Not Found",
      "status": "404",
      "source": {
        "parameter": "id"
      },
      "code": "not_found"
    }
  ]
}
406	
Not Acceptable

Example Value
Model
{
  "errors": [
    {
      "status": "406",
      "detail": "Content-type text/event-stream is not supported for this kind of request.",
      "code": "not_acceptable"
    }
  ]
}
429	
Too Many Requests

Example Value
Model
{
  "errors": [
    {
      "status": "429",
      "detail": "You have exceeded your allowed usage rate.",
      "code": "rate_limited"
    }
  ]
}
LiveFacility

GET
/live_facilities

Live Facility Data

Live data about a given facility.

Parameters
Try it out
Name	Description
page[offset]
integer
(query)	
Offset (0-based) of first element in the page

page[limit]
integer
(query)	
Max number of elements to return

sort
string
(query)	
Results can be sorted by the id or any /data/{index}/attributes key. Assumes ascending; may be prefixed with '-' for descending

JSON pointer	Direction	sort
/data/{index}/attributes/properties	ascending	properties
/data/{index}/attributes/properties	descending	-properties
/data/{index}/attributes/updated_at	ascending	updated_at
/data/{index}/attributes/updated_at	descending	-updated_at
include
string
(query)	
Relationships to include.

facility
The value of the include parameter MUST be a comma-separated (U+002C COMMA, “,”) list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, “.”) list of relationship names. JSONAPI “include” behavior

filter[id]
string
(query)	
Filter by multiple parking facility ids. MUST be a comma-separated (U+002C COMMA, “,”) list.

Responses
Response content type

application/vnd.api+json
Code	Description
200	
OK

Example Value
Model
{
  "links": {
    "self": "string"
  },
  "included": [
    {
      "type": "string",
      "id": "string"
    }
  ],
  "data": {
    "type": "string",
    "relationships": {},
    "links": {},
    "id": "string",
    "attributes": {
      "updated_at": "2017-08-14T15:38:58-04:00",
      "properties": [
        {
          "value": "197 Ivory St, Braintree, MA 02184",
          "name": "address"
        }
      ]
    }
  }
}
400	
Bad Request

Example Value
Model
{
  "errors": [
    {
      "status": "400",
      "source": {
        "parameter": "sort"
      },
      "detail": "Invalid sort key",
      "code": "bad_request"
    }
  ]
}
403	
Forbidden

Example Value
Model
{
  "errors": [
    {
      "status": "403",
      "code": "forbidden"
    }
  ]
}
429	
Too Many Requests

Example Value
Model
{
  "errors": [
    {
      "status": "429",
      "detail": "You have exceeded your allowed usage rate.",
      "code": "rate_limited"
    }
  ]
}
GET
/live_facilities/{id}

List live parking data for specific parking facility

Live data about a given facility.

Parameters
Try it out
Name	Description
id *
string
(path)	
Unique identifier for facility

include
string
(query)	
Relationships to include.

facility
The value of the include parameter MUST be a comma-separated (U+002C COMMA, “,”) list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, “.”) list of relationship names. JSONAPI “include” behavior

Responses
Response content type

application/vnd.api+json
Code	Description
200	
OK

Example Value
Model
{
  "links": {
    "self": "string"
  },
  "included": [
    {
      "type": "string",
      "id": "string"
    }
  ],
  "data": {
    "type": "string",
    "relationships": {},
    "links": {},
    "id": "string",
    "attributes": {
      "updated_at": "2017-08-14T15:38:58-04:00",
      "properties": [
        {
          "value": "197 Ivory St, Braintree, MA 02184",
          "name": "address"
        }
      ]
    }
  }
}
403	
Forbidden

Example Value
Model
{
  "errors": [
    {
      "status": "403",
      "code": "forbidden"
    }
  ]
}
404	
Not Found

Example Value
Model
{
  "errors": [
    {
      "title": "Resource Not Found",
      "status": "404",
      "source": {
        "parameter": "id"
      },
      "code": "not_found"
    }
  ]
}
406	
Not Acceptable

Example Value
Model
{
  "errors": [
    {
      "status": "406",
      "detail": "Content-type text/event-stream is not supported for this kind of request.",
      "code": "not_acceptable"
    }
  ]
}
429	
Too Many Requests

Example Value
Model
{
  "errors": [
    {
      "status": "429",
      "detail": "You have exceeded your allowed usage rate.",
      "code": "rate_limited"
    }
  ]
}
Prediction

GET
/predictions

NOTE: A filter MUST be present for any predictions to be returned.

List of predictions for trips. To get the scheduled times instead of the predictions, use /schedules.

The predicted arrival time (//data/{index}/attributes/arrival_time) and departure time (/data/{index}/attributes/departure_time) to/from a stop (/data/{index}/relationships/stop/data/id) at a given sequence (/data/{index}/attriutes/stop_sequence) along a trip (/data/{index}/relationships/trip/data/id) going a direction (/data/{index}/attributes/direction_id) along a route (/data/{index}/relationships/route/data/id).

See GTFS Realtime FeedMesage FeedEntity TripUpdate TripDescriptor
See GTFS Realtime FeedMesage FeedEntity TripUpdate StopTimeUpdate

When a vehicle is predicted to be at a stop
/predictions?filter[stop]=STOP_ID

The predicted schedule for one route
/predictions?filter[route]=ROUTE_ID

The predicted schedule for a whole trip
/predictions?filter[trip]=TRIP_ID

Parameters
Try it out
Name	Description
page[offset]
integer
(query)	
Offset (0-based) of first element in the page

page[limit]
integer
(query)	
Max number of elements to return

sort
string
(query)	
Results can be sorted by the id or any /data/{index}/attributes key.

JSON pointer	Direction	sort
/data/{index}/attributes/arrival_time	ascending	arrival_time
/data/{index}/attributes/arrival_time	descending	-arrival_time
/data/{index}/attributes/arrival_uncertainty	ascending	arrival_uncertainty
/data/{index}/attributes/arrival_uncertainty	descending	-arrival_uncertainty
/data/{index}/attributes/departure_time	ascending	departure_time
/data/{index}/attributes/departure_time	descending	-departure_time
/data/{index}/attributes/departure_uncertainty	ascending	departure_uncertainty
/data/{index}/attributes/departure_uncertainty	descending	-departure_uncertainty
/data/{index}/attributes/direction_id	ascending	direction_id
/data/{index}/attributes/direction_id	descending	-direction_id
/data/{index}/attributes/revenue_status	ascending	revenue_status
/data/{index}/attributes/revenue_status	descending	-revenue_status
/data/{index}/attributes/schedule_relationship	ascending	schedule_relationship
/data/{index}/attributes/schedule_relationship	descending	-schedule_relationship
/data/{index}/attributes/status	ascending	status
/data/{index}/attributes/status	descending	-status
/data/{index}/attributes/stop_sequence	ascending	stop_sequence
/data/{index}/attributes/stop_sequence	descending	-stop_sequence
/data/{index}/attributes/update_type	ascending	update_type
/data/{index}/attributes/update_type	descending	-update_type
/data/{index}/attributes/arrival_time if present, otherwise /data/{index}/attributes/departure_time	ascending	time
/data/{index}/attributes/arrival_time if present, otherwise /data/{index}/attributes/departure_time	descending	-time
fields[prediction]
string
(query)	
Fields to include with the response. Multiple fields MUST be a comma-separated (U+002C COMMA, “,”) list.

Note that fields can also be selected for included data types: see the V3 API Best Practices for an example.

include
string
(query)	
Relationships to include.

schedule
stop
route
trip
vehicle
alerts
The value of the include parameter MUST be a comma-separated (U+002C COMMA, “,”) list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, “.”) list of relationship names. JSONAPI “include” behavior

Example
https://api-v3.mbta.com/predictions?filter%5Bstop%5D=place-sstat&amp;filter%5Bdirection_id%5D=0&amp;include=stop
returns predictions from South Station with direction_id=0, below is a truncated response with only relevant fields displayed:

  {
    "data": [
      {
        "id": "prediction-CR-Weekday-Fall-18-743-South Station-02-1",
        "relationships": {
          "stop": {
            "data": {
              "id": "South Station-02",
              "type": "stop"
            }
          },
        },
        "type": "prediction"
      }
    ],
    "included": [
      {
        "attributes": {
          "platform_code": "2",
        },
        "id": "South Station-02",
        "type": "stop"
      }
    ],
  }
Note the stop relationship; use it to cross-reference stop-id with the included stops to retrieve the platform_code for the given prediction.

Note on trips
A Vehicle’s trip is what is currently being served.

A Prediction also has a vehicle: this is the vehicle we predict will serve this trip/stop.

Since we know vehicles make future trips, the trip the vehicle is currently servicing can be different from the trips we’re making predictions for.

For example:

Vehicle 1234 is currently serving trip A
The block is Trip A → Trip B → Trip C
We’ll be making predictions for the rest of trip A, as well as all the stops of trip B and trip C. The trip for the Vehicle is always A, and all of the Predictions will reference Vehicle 1234.

filter[latitude]
string
(query)	
Latitude/Longitude must be both present or both absent.

filter[longitude]
string
(query)	
Latitude/Longitude must be both present or both absent.

filter[radius]
string
(query)	
Radius accepts a floating point number, and the default is 0.01. For example, if you query for: latitude: 42, longitude: -71, radius: 0.05 then you will filter between latitudes 41.95 and 42.05, and longitudes -70.95 and -71.05.

filter[direction_id]
string
(query)	
Filter by direction of travel along the route. Must be used in conjuction with filter[route] to apply.

The meaning of direction_id varies based on the route. You can programmatically get the direction names from /routes /data/{index}/attributes/direction_names or /routes/{id} /data/attributes/direction_names.

filter[route_type]
string
(query)	
Filter by route_type: https://developers.google.com/transit/gtfs/reference/routes-file.

Multiple route_type MUST be a comma-separated (U+002C COMMA, “,”) list.

Must be used in conjunction with another filter.

filter[stop]
string
(query)	
Filter by /data/{index}/relationships/stop/data/id.

Multiple IDs MUST be a comma-separated (U+002C COMMA, “,”) list.

Parent station IDs are treated as though their child stops were also included.

filter[route]
string
(query)	
Filter by /data/{index}/relationships/route/data/id.

Multiple IDs MUST be a comma-separated (U+002C COMMA, “,”) list.

filter[trip]
string
(query)	
Filter by /data/{index}/relationships/trip/data/id.

Multiple IDs MUST be a comma-separated (U+002C COMMA, “,”) list.

filter[revenue]
string
(query)	
Filter predictions by revenue status.
Revenue status indicates whether or not the vehicle is accepting passengers.
When filter is not included, the default behavior is to filter by revenue=REVENUE.

Multiple revenue types MUST be a comma-separated (U+002C COMMA, “,”) list.

filter[route_pattern]
string
(query)	
Filter by /included/{index}/relationships/route_pattern/data/id of a trip. Multiple route_pattern_id MUST be a comma-separated (U+002C COMMA, “,”) list.

Responses
Response content type

application/vnd.api+json
Code	Description
200	
OK

Example Value
Model
{
  "links": {
    "self": "string",
    "prev": "string",
    "next": "string",
    "last": "string",
    "first": "string"
  },
  "data": [
    {
      "type": "string",
      "relationships": {
        "vehicle": {
          "links": {
            "self": "string",
            "related": "string"
          },
          "data": {
            "type": "string",
            "id": "string"
          }
        },
        "trip": {
          "links": {
            "self": "string",
            "related": "string"
          },
          "data": {
            "type": "string",
            "id": "string"
          }
        },
        "stop": {
          "links": {
            "self": "string",
            "related": "string"
          },
          "data": {
            "type": "string",
            "id": "string"
          }
        },
        "schedule": {
          "links": {
            "self": "string",
            "related": "string"
          },
          "data": {
            "type": "string",
            "id": "string"
          }
        },
        "route": {
          "links": {
            "self": "string",
            "related": "string"
          },
          "data": {
            "type": "string",
            "id": "string"
          }
        },
        "alerts": {
          "links": {
            "self": "string",
            "related": "string"
          },
          "data": [
            {
              "type": "string",
              "id": "string"
            }
          ]
        }
      },
      "links": {},
      "id": "string",
      "attributes": {
        "update_type": "string",
        "stop_sequence": 19,
        "status": "Approaching",
        "schedule_relationship": "UNSCHEDULED",
        "revenue_status": "REVENUE",
        "direction_id": 0,
        "departure_uncertainty": 60,
        "departure_time": "2017-08-14T15:38:58-04:00",
        "arrival_uncertainty": 60,
        "arrival_time": "2017-08-14T15:38:58-04:00"
      }
    }
  ]
}
400	
Bad Request

Example Value
Model
{
  "errors": [
    {
      "status": "400",
      "source": {
        "parameter": "sort"
      },
      "detail": "Invalid sort key",
      "code": "bad_request"
    }
  ]
}
403	
Forbidden

Example Value
Model
{
  "errors": [
    {
      "status": "403",
      "code": "forbidden"
    }
  ]
}
429	
Too Many Requests

Example Value
Model
{
  "errors": [
    {
      "status": "429",
      "detail": "You have exceeded your allowed usage rate.",
      "code": "rate_limited"
    }
  ]
}
Route

GET
/routes

List of routes.

Names and Descriptions
There are 3 attributes with increasing details for naming and describing the route.

/data/{index}/attributes/short_name
/data/{index}/attributes/long_name
/data/{index}/attributes/description
Directions
/data/{index}/attributes/direction_names is the only place to convert the direction_id used throughout the rest of the API to human-readable names.

Type
/data/{index}/attributes/type corresponds to GTFS routes.txt route_type.

Value	Name	Example
0	Light Rail	Green Line
1	Heavy Rail	Red Line
2	Commuter Rail	
3	Bus	
4	Ferry	
Parameters
Try it out
Name	Description
page[offset]
integer
(query)	
Offset (0-based) of first element in the page

page[limit]
integer
(query)	
Max number of elements to return

sort
string
(query)	
Results can be sorted by the id or any /data/{index}/attributes key. Assumes ascending; may be prefixed with '-' for descending

JSON pointer	Direction	sort
/data/{index}/attributes/color	ascending	color
/data/{index}/attributes/color	descending	-color
/data/{index}/attributes/description	ascending	description
/data/{index}/attributes/description	descending	-description
/data/{index}/attributes/direction_destinations	ascending	direction_destinations
/data/{index}/attributes/direction_destinations	descending	-direction_destinations
/data/{index}/attributes/direction_names	ascending	direction_names
/data/{index}/attributes/direction_names	descending	-direction_names
/data/{index}/attributes/fare_class	ascending	fare_class
/data/{index}/attributes/fare_class	descending	-fare_class
/data/{index}/attributes/long_name	ascending	long_name
/data/{index}/attributes/long_name	descending	-long_name
/data/{index}/attributes/short_name	ascending	short_name
/data/{index}/attributes/short_name	descending	-short_name
/data/{index}/attributes/sort_order	ascending	sort_order
/data/{index}/attributes/sort_order	descending	-sort_order
/data/{index}/attributes/text_color	ascending	text_color
/data/{index}/attributes/text_color	descending	-text_color
/data/{index}/attributes/type	ascending	type
/data/{index}/attributes/type	descending	-type
fields[route]
string
(query)	
Fields to include with the response. Multiple fields MUST be a comma-separated (U+002C COMMA, “,”) list.

Note that fields can also be selected for included data types: see the V3 API Best Practices for an example.

include
string
(query)	
Relationships to include.

stop
line
route_patterns
The value of the include parameter MUST be a comma-separated (U+002C COMMA, “,”) list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, “.”) list of relationship names. JSONAPI “include” behavior

stop can only be included when filter[stop] is also specified.

filter[stop]
string
(query)	
Filter by /data/{index}/relationships/stop/data/id.

Multiple IDs MUST be a comma-separated (U+002C COMMA, “,”) list.

filter[type]
string
(query)	
Value	Name	Example
0	Light Rail	Green Line
1	Heavy Rail	Red Line
2	Commuter Rail	
3	Bus	
4	Ferry	
Multiple route_type MUST be a comma-separated (U+002C COMMA, “,”) list.

filter[direction_id]
string
(query)	
Filter by direction of travel along the route. Must be used in conjuction with filter[route] to apply.

The meaning of direction_id varies based on the route. You can programmatically get the direction names from /routes /data/{index}/attributes/direction_names or /routes/{id} /data/attributes/direction_names.

When combined with stop_id, filters by routes which stop at that stop when traveling in a particular direction

filter[date]
string
(query)	
Filter by date that route is active The active date is the service date. Trips that begin between midnight and 3am are considered part of the previous service day. The format is ISO8601 with the template of YYYY-MM-DD.

filter[id]
string
(query)	
Filter by multiple IDs. Multiple IDs MUST be a comma-separated (U+002C COMMA, “,”) list.

Responses
Response content type

application/vnd.api+json
Code	Description
200	
OK

Example Value
Model
{
  "links": {
    "self": "string",
    "prev": "string",
    "next": "string",
    "last": "string",
    "first": "string"
  },
  "data": [
    {
      "type": "string",
      "relationships": {},
      "links": {},
      "id": "string",
      "attributes": {
        "type": 1,
        "text_color": "000000",
        "sort_order": 0,
        "short_name": "Red",
        "long_name": "Red Line",
        "fare_class": "Free",
        "direction_names": [
          "string"
        ],
        "direction_destinations": [
          "string"
        ],
        "description": "Rapid Transit",
        "color": "FFFFFF"
      }
    }
  ]
}
400	
Bad Request

Example Value
Model
{
  "errors": [
    {
      "status": "400",
      "source": {
        "parameter": "sort"
      },
      "detail": "Invalid sort key",
      "code": "bad_request"
    }
  ]
}
403	
Forbidden

Example Value
Model
{
  "errors": [
    {
      "status": "403",
      "code": "forbidden"
    }
  ]
}
429	
Too Many Requests

Example Value
Model
{
  "errors": [
    {
      "status": "429",
      "detail": "You have exceeded your allowed usage rate.",
      "code": "rate_limited"
    }
  ]
}
GET
/routes/{id}

Show a particular route by the route’s id.

Names and Descriptions
There are 3 attributes with increasing details for naming and describing the route.

/data/attributes/short_name
/data/attributes/long_name
/data/attributes/description
Directions
/data/attributes/direction_names is the only place to convert the direction_id used throughout the rest of the API to human-readable names.

Type
/data/attributes/type corresponds to GTFS routes.txt route_type.

Value	Name	Example
0	Light Rail	Green Line
1	Heavy Rail	Red Line
2	Commuter Rail	
3	Bus	
4	Ferry	
Parameters
Try it out
Name	Description
id *
string
(path)	
Unique identifier for route

fields[route]
string
(query)	
Fields to include with the response. Multiple fields MUST be a comma-separated (U+002C COMMA, “,”) list.

Note that fields can also be selected for included data types: see the V3 API Best Practices for an example.

include
string
(query)	
Relationships to include.

line
route_patterns
The value of the include parameter MUST be a comma-separated (U+002C COMMA, “,”) list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, “.”) list of relationship names. JSONAPI “include” behavior

Responses
Response content type

application/vnd.api+json
Code	Description
200	
OK

Example Value
Model
{
  "links": {
    "self": "string"
  },
  "included": [
    {
      "type": "string",
      "id": "string"
    }
  ],
  "data": {
    "type": "string",
    "relationships": {},
    "links": {},
    "id": "string",
    "attributes": {
      "type": 1,
      "text_color": "000000",
      "sort_order": 0,
      "short_name": "Red",
      "long_name": "Red Line",
      "fare_class": "Free",
      "direction_names": [
        "string"
      ],
      "direction_destinations": [
        "string"
      ],
      "description": "Rapid Transit",
      "color": "FFFFFF"
    }
  }
}
400	
Bad Request

Example Value
Model
{
  "errors": [
    {
      "status": "400",
      "source": {
        "parameter": "sort"
      },
      "detail": "Invalid sort key",
      "code": "bad_request"
    }
  ]
}
403	
Forbidden

Example Value
Model
{
  "errors": [
    {
      "status": "403",
      "code": "forbidden"
    }
  ]
}
404	
Not Found

Example Value
Model
{
  "errors": [
    {
      "title": "Resource Not Found",
      "status": "404",
      "source": {
        "parameter": "id"
      },
      "code": "not_found"
    }
  ]
}
406	
Not Acceptable

Example Value
Model
{
  "errors": [
    {
      "status": "406",
      "detail": "Content-type text/event-stream is not supported for this kind of request.",
      "code": "not_acceptable"
    }
  ]
}
429	
Too Many Requests

Example Value
Model
{
  "errors": [
    {
      "status": "429",
      "detail": "You have exceeded your allowed usage rate.",
      "code": "rate_limited"
    }
  ]
}
RoutePattern

GET
/route_patterns

List of route patterns.

Route patterns are used to describe the subsets of a route, representing different possible patterns of where trips may serve. For example, a bus route may have multiple branches, and each branch may be modeled as a separate route pattern per direction. Hierarchically, the route pattern level may be considered to be larger than the trip level and smaller than the route level.

For most MBTA modes, a route pattern will typically represent a unique set of stops that may be served on a route-trip combination. Seasonal schedule changes may result in trips within a route pattern having different routings. In simple changes, such a single bus stop removed or added between one schedule rating and the next (for example, between the Summer and Fall schedules), trips will be maintained on the same route_pattern_id. If the changes are significant, a new route_pattern_id may be introduced.

For Commuter Rail, express or skip-stop trips use the same route pattern as local trips. Some branches do have multiple route patterns when the train takes a different path. For example, CR-Providence has two route patterns per direction, one for the Wickford Junction branch and the other for the Stoughton branch.

Parameters
Try it out
Name	Description
page[offset]
integer
(query)	
Offset (0-based) of first element in the page

page[limit]
integer
(query)	
Max number of elements to return

sort
string
(query)	
Results can be sorted by the id or any /data/{index}/attributes key. Assumes ascending; may be prefixed with '-' for descending

JSON pointer	Direction	sort
/data/{index}/attributes/canonical	ascending	canonical
/data/{index}/attributes/canonical	descending	-canonical
/data/{index}/attributes/direction_id	ascending	direction_id
/data/{index}/attributes/direction_id	descending	-direction_id
/data/{index}/attributes/name	ascending	name
/data/{index}/attributes/name	descending	-name
/data/{index}/attributes/sort_order	ascending	sort_order
/data/{index}/attributes/sort_order	descending	-sort_order
/data/{index}/attributes/time_desc	ascending	time_desc
/data/{index}/attributes/time_desc	descending	-time_desc
/data/{index}/attributes/typicality	ascending	typicality
/data/{index}/attributes/typicality	descending	-typicality
fields[route_pattern]
string
(query)	
Fields to include with the response. Multiple fields MUST be a comma-separated (U+002C COMMA, “,”) list.

Note that fields can also be selected for included data types: see the V3 API Best Practices for an example.

include
string
(query)	
Relationships to include.

route
representative_trip
The value of the include parameter MUST be a comma-separated (U+002C COMMA, “,”) list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, “.”) list of relationship names. JSONAPI “include” behavior

include	Description
route	The route that this pattern belongs to.
representative_trip	A trip that can be considered a canonical trip for the route pattern. This trip can be used to deduce a pattern’s canonical set of stops and shape.
filter[id]
string
(query)	
Filter by multiple IDs. MUST be a comma-separated (U+002C COMMA, “,”) list.

filter[route]
string
(query)	
Filter by /data/{index}/relationships/route/data/id.

Multiple IDs MUST be a comma-separated (U+002C COMMA, “,”) list.

filter[direction_id]
string
(query)	
Filter by direction of travel along the route. Must be used in conjuction with filter[route] to apply.

The meaning of direction_id varies based on the route. You can programmatically get the direction names from /routes /data/{index}/attributes/direction_names or /routes/{id} /data/attributes/direction_names.

filter[stop]
string
(query)	
Filter by /data/{index}/relationships/stop/data/id.

Multiple IDs MUST be a comma-separated (U+002C COMMA, “,”) list.

Parent station IDs are treated as though their child stops were also included.

filter[canonical]
boolean
(query)	
Filter by canonical

true: Route pattern should be considered canonical for this route in this direction. If branching regularly occurs, this route-direction may have more than one canonical pattern.
false: Route pattern should be not considered canonical for this route in this direction.

filter[date]
string
(query)	
Filter by date that route pattern is active The active date is the service date. Trips that begin between midnight and 3am are considered part of the previous service day. The format is ISO8601 with the template of YYYY-MM-DD.

Responses
Response content type

application/vnd.api+json
Code	Description
200	
OK

Example Value
Model
{
  "links": {
    "self": "string"
  },
  "included": [
    {
      "type": "string",
      "id": "string"
    }
  ],
  "data": {
    "type": "string",
    "relationships": {
      "route": {
        "links": {
          "self": "string",
          "related": "string"
        },
        "data": {
          "type": "string",
          "id": "string"
        }
      },
      "representative_trip": {
        "links": {
          "self": "string",
          "related": "string"
        },
        "data": {
          "type": "string",
          "id": "string"
        }
      }
    },
    "links": {},
    "id": "string",
    "attributes": {
      "typicality": 0,
      "time_desc": "Early mornings only",
      "sort_order": 0,
      "name": "Forge Park/495 - South Station via Fairmount",
      "direction_id": 0,
      "canonical": true
    }
  }
}
400	
Bad Request

Example Value
Model
{
  "errors": [
    {
      "status": "400",
      "source": {
        "parameter": "sort"
      },
      "detail": "Invalid sort key",
      "code": "bad_request"
    }
  ]
}
403	
Forbidden

Example Value
Model
{
  "errors": [
    {
      "status": "403",
      "code": "forbidden"
    }
  ]
}
429	
Too Many Requests

Example Value
Model
{
  "errors": [
    {
      "status": "429",
      "detail": "You have exceeded your allowed usage rate.",
      "code": "rate_limited"
    }
  ]
}
GET
/route_patterns/{id}

Show a particular route_pattern by the route’s id.

Route patterns are used to describe the subsets of a route, representing different possible patterns of where trips may serve. For example, a bus route may have multiple branches, and each branch may be modeled as a separate route pattern per direction. Hierarchically, the route pattern level may be considered to be larger than the trip level and smaller than the route level.

For most MBTA modes, a route pattern will typically represent a unique set of stops that may be served on a route-trip combination. Seasonal schedule changes may result in trips within a route pattern having different routings. In simple changes, such a single bus stop removed or added between one schedule rating and the next (for example, between the Summer and Fall schedules), trips will be maintained on the same route_pattern_id. If the changes are significant, a new route_pattern_id may be introduced.

For Commuter Rail, express or skip-stop trips use the same route pattern as local trips. Some branches do have multiple route patterns when the train takes a different path. For example, CR-Providence has two route patterns per direction, one for the Wickford Junction branch and the other for the Stoughton branch.

Parameters
Try it out
Name	Description
fields[route_pattern]
string
(query)	
Fields to include with the response. Multiple fields MUST be a comma-separated (U+002C COMMA, “,”) list.

Note that fields can also be selected for included data types: see the V3 API Best Practices for an example.

id *
string
(path)	
Unique identifier for route_pattern

include
string
(query)	
Relationships to include.

route
representative_trip
The value of the include parameter MUST be a comma-separated (U+002C COMMA, “,”) list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, “.”) list of relationship names. JSONAPI “include” behavior

include	Description
route	The route that this pattern belongs to.
representative_trip	A trip that can be considered a canonical trip for the route pattern. This trip can be used to deduce a pattern’s canonical set of stops and shape.
Responses
Response content type

application/vnd.api+json
Code	Description
200	
OK

Example Value
Model
{
  "links": {
    "self": "string"
  },
  "included": [
    {
      "type": "string",
      "id": "string"
    }
  ],
  "data": {
    "type": "string",
    "relationships": {
      "route": {
        "links": {
          "self": "string",
          "related": "string"
        },
        "data": {
          "type": "string",
          "id": "string"
        }
      },
      "representative_trip": {
        "links": {
          "self": "string",
          "related": "string"
        },
        "data": {
          "type": "string",
          "id": "string"
        }
      }
    },
    "links": {},
    "id": "string",
    "attributes": {
      "typicality": 0,
      "time_desc": "Early mornings only",
      "sort_order": 0,
      "name": "Forge Park/495 - South Station via Fairmount",
      "direction_id": 0,
      "canonical": true
    }
  }
}
403	
Forbidden

Example Value
Model
{
  "errors": [
    {
      "status": "403",
      "code": "forbidden"
    }
  ]
}
404	
Not Found

Example Value
Model
{
  "errors": [
    {
      "title": "Resource Not Found",
      "status": "404",
      "source": {
        "parameter": "id"
      },
      "code": "not_found"
    }
  ]
}
406	
Not Acceptable

Example Value
Model
{
  "errors": [
    {
      "status": "406",
      "detail": "Content-type text/event-stream is not supported for this kind of request.",
      "code": "not_acceptable"
    }
  ]
}
429	
Too Many Requests

Example Value
Model
{
  "errors": [
    {
      "status": "429",
      "detail": "You have exceeded your allowed usage rate.",
      "code": "rate_limited"
    }
  ]
}
Schedule

GET
/schedules

NOTE: filter[route], filter[stop], or filter[trip] MUST be present for any schedules to be returned.

List of schedules. To get a realtime prediction instead of the scheduled times, use /predictions.

A schedule is the arrival drop off (/data/{index}/attributes/drop_off_type) time (/data/{index}/attributes/arrival_time) and departure pick up (/data/{index}/attributes/pickup_type) time (/data/{index}/attributes/departure_time) to/from a stop (/data/{index}/relationships/stop/data/id) at a given sequence (/data/{index}/attributes/stop_sequence) along a trip (/data/{index}/relationships/trip/data/id) going in a direction (/data/{index}/attributes/direction_id) on a route (/data/{index}/relationships/route/data/id) when the trip is following a service (/data/{index}/relationships/service/data/id) to determine when it is active.

See GTFS stop_times.txt for base specification.

When a vehicle is scheduled to be at a stop
/schedules?filter[stop]=STOP_ID

The schedule for one route
/schedules?filter[route]=ROUTE_ID

When a route is open
Query for the first and last stops on the route.

/schedules?filter[route]=ROUTE_ID&amp;filter[stop_sequence]=first,last

The schedule for a whole trip
/schedule?filter[trip]=TRIP_ID

Parameters
Try it out
Name	Description
page[offset]
integer
(query)	
Offset (0-based) of first element in the page

page[limit]
integer
(query)	
Max number of elements to return

sort
string
(query)	
Results can be sorted by the id or any /data/{index}/attributes key.

JSON pointer	Direction	sort
/data/{index}/attributes/arrival_time	ascending	arrival_time
/data/{index}/attributes/arrival_time	descending	-arrival_time
/data/{index}/attributes/departure_time	ascending	departure_time
/data/{index}/attributes/departure_time	descending	-departure_time
/data/{index}/attributes/direction_id	ascending	direction_id
/data/{index}/attributes/direction_id	descending	-direction_id
/data/{index}/attributes/drop_off_type	ascending	drop_off_type
/data/{index}/attributes/drop_off_type	descending	-drop_off_type
/data/{index}/attributes/pickup_type	ascending	pickup_type
/data/{index}/attributes/pickup_type	descending	-pickup_type
/data/{index}/attributes/stop_headsign	ascending	stop_headsign
/data/{index}/attributes/stop_headsign	descending	-stop_headsign
/data/{index}/attributes/stop_sequence	ascending	stop_sequence
/data/{index}/attributes/stop_sequence	descending	-stop_sequence
/data/{index}/attributes/timepoint	ascending	timepoint
/data/{index}/attributes/timepoint	descending	-timepoint
/data/{index}/attributes/arrival_time if present, otherwise /data/{index}/attributes/departure_time	ascending	time
/data/{index}/attributes/arrival_time if present, otherwise /data/{index}/attributes/departure_time	descending	-time
fields[schedule]
string
(query)	
Fields to include with the response. Multiple fields MUST be a comma-separated (U+002C COMMA, “,”) list.

Note that fields can also be selected for included data types: see the V3 API Best Practices for an example.

include
string
(query)	
Relationships to include.

stop
trip
prediction
route
The value of the include parameter MUST be a comma-separated (U+002C COMMA, “,”) list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, “.”) list of relationship names. JSONAPI “include” behavior

filter[date]
string
(query)	
Filter schedule by date that they are active. The active date is the service date. Trips that begin between midnight and 3am are considered part of the previous service day. The format is ISO8601 with the template of YYYY-MM-DD.

filter[direction_id]
string
(query)	
Filter by direction of travel along the route. Must be used in conjuction with filter[route] to apply.

The meaning of direction_id varies based on the route. You can programmatically get the direction names from /routes /data/{index}/attributes/direction_names or /routes/{id} /data/attributes/direction_names.

filter[route_type]
string
(query)	
Filter by route_type: https://developers.google.com/transit/gtfs/reference/routes-file.

Multiple route_type MUST be a comma-separated (U+002C COMMA, “,”) list.

Must be used in conjunction with another filter.

filter[min_time]
string
(query)	
Time before which schedule should not be returned. To filter times after midnight use more than 24 hours. For example, min_time=24:00 will return schedule information for the next calendar day, since that service is considered part of the current service day. Additionally, min_time=00:00&max_time=02:00 will not return anything. The time format is HH:MM.

filter[max_time]
string
(query)	
Time after which schedule should not be returned. To filter times after midnight use more than 24 hours. For example, min_time=24:00 will return schedule information for the next calendar day, since that service is considered part of the current service day. Additionally, min_time=00:00&max_time=02:00 will not return anything. The time format is HH:MM.

filter[route]
string
(query)	
Filter by /data/{index}/relationships/route/data/id.

Multiple IDs MUST be a comma-separated (U+002C COMMA, “,”) list.

filter[stop]
string
(query)	
Filter by /data/{index}/relationships/stop/data/id.

Multiple IDs MUST be a comma-separated (U+002C COMMA, “,”) list.

Parent station IDs are treated as though their child stops were also included.

filter[trip]
string
(query)	
Filter by /data/{index}/relationships/trip/data/id.

Multiple IDs MUST be a comma-separated (U+002C COMMA, “,”) list.

filter[stop_sequence]
string
(query)	
Filter by the index of the stop in the trip. Symbolic values first and last can be used instead of numeric sequence number too.

Responses
Response content type

application/vnd.api+json
Code	Description
200	
OK

Example Value
Model
{
  "links": {
    "self": "string",
    "prev": "string",
    "next": "string",
    "last": "string",
    "first": "string"
  },
  "data": [
    {
      "type": "string",
      "relationships": {
        "trip": {
          "links": {
            "self": "string",
            "related": "string"
          },
          "data": {
            "type": "string",
            "id": "string"
          }
        },
        "stop": {
          "links": {
            "self": "string",
            "related": "string"
          },
          "data": {
            "type": "string",
            "id": "string"
          }
        },
        "route": {
          "links": {
            "self": "string",
            "related": "string"
          },
          "data": {
            "type": "string",
            "id": "string"
          }
        },
        "prediction": {
          "links": {
            "self": "string",
            "related": "string"
          },
          "data": {
            "type": "string",
            "id": "string"
          }
        }
      },
      "links": {},
      "id": "string",
      "attributes": {
        "timepoint": false,
        "stop_sequence": 1,
        "stop_headsign": "Foxboro via Back Bay",
        "pickup_type": 0,
        "drop_off_type": 1,
        "direction_id": 0,
        "departure_time": "2017-08-14T15:04:00-04:00",
        "arrival_time": "2017-08-14T15:04:00-04:00"
      }
    }
  ]
}
400	
Bad Request

Example Value
Model
{
  "errors": [
    {
      "status": "400",
      "source": {
        "parameter": "sort"
      },
      "detail": "Invalid sort key",
      "code": "bad_request"
    }
  ]
}
403	
Forbidden

Example Value
Model
{
  "errors": [
    {
      "status": "403",
      "code": "forbidden"
    }
  ]
}
429	
Too Many Requests

Example Value
Model
{
  "errors": [
    {
      "status": "429",
      "detail": "You have exceeded your allowed usage rate.",
      "code": "rate_limited"
    }
  ]
}
Service

GET
/services

List of services. Service represents the days of the week, as well as extra days, that a trip is valid.

Parameters
Try it out
Name	Description
page[offset]
integer
(query)	
Offset (0-based) of first element in the page

page[limit]
integer
(query)	
Max number of elements to return

sort
string
(query)	
Results can be sorted by the id or any /data/{index}/attributes key. Assumes ascending; may be prefixed with '-' for descending

JSON pointer	Direction	sort
/data/{index}/attributes/added_dates	ascending	added_dates
/data/{index}/attributes/added_dates	descending	-added_dates
/data/{index}/attributes/added_dates_notes	ascending	added_dates_notes
/data/{index}/attributes/added_dates_notes	descending	-added_dates_notes
/data/{index}/attributes/description	ascending	description
/data/{index}/attributes/description	descending	-description
/data/{index}/attributes/end_date	ascending	end_date
/data/{index}/attributes/end_date	descending	-end_date
/data/{index}/attributes/rating_description	ascending	rating_description
/data/{index}/attributes/rating_description	descending	-rating_description
/data/{index}/attributes/rating_end_date	ascending	rating_end_date
/data/{index}/attributes/rating_end_date	descending	-rating_end_date
/data/{index}/attributes/rating_start_date	ascending	rating_start_date
/data/{index}/attributes/rating_start_date	descending	-rating_start_date
/data/{index}/attributes/removed_dates	ascending	removed_dates
/data/{index}/attributes/removed_dates	descending	-removed_dates
/data/{index}/attributes/removed_dates_notes	ascending	removed_dates_notes
/data/{index}/attributes/removed_dates_notes	descending	-removed_dates_notes
/data/{index}/attributes/schedule_name	ascending	schedule_name
/data/{index}/attributes/schedule_name	descending	-schedule_name
/data/{index}/attributes/schedule_type	ascending	schedule_type
/data/{index}/attributes/schedule_type	descending	-schedule_type
/data/{index}/attributes/schedule_typicality	ascending	schedule_typicality
/data/{index}/attributes/schedule_typicality	descending	-schedule_typicality
/data/{index}/attributes/start_date	ascending	start_date
/data/{index}/attributes/start_date	descending	-start_date
/data/{index}/attributes/valid_days	ascending	valid_days
/data/{index}/attributes/valid_days	descending	-valid_days
fields[service]
string
(query)	
Fields to include with the response. Multiple fields MUST be a comma-separated (U+002C COMMA, “,”) list.

Note that fields can also be selected for included data types: see the V3 API Best Practices for an example.

filter[id]
string
(query)	
Filter by multiple IDs. MUST be a comma-separated (U+002C COMMA, “,”) list.

filter[route]
string
(query)	
Filter by route. Multiple route MUST be a comma-separated (U+002C COMMA, “,”) list.

Responses
Response content type

application/vnd.api+json
Code	Description
200	
OK

Example Value
Model
{
  "links": {
    "self": "string",
    "prev": "string",
    "next": "string",
    "last": "string",
    "first": "string"
  },
  "data": [
    {
      "type": "string",
      "relationships": {},
      "links": {},
      "id": "string",
      "attributes": {
        "valid_days": [
          "1"
        ],
        "start_date": "2018-11-19",
        "schedule_typicality": 1,
        "schedule_type": "Sunday",
        "schedule_name": "Weekday (no school)",
        "removed_dates_notes": [
          "New Year Day"
        ],
        "removed_dates": [
          "2018-12-17"
        ],
        "rating_start_date": "2018-12-22",
        "rating_end_date": "2019-03-14",
        "rating_description": "Winter",
        "end_date": "2018-12-24",
        "description": "Weekday schedule (no school)",
        "added_dates_notes": [
          "New Year Day"
        ],
        "added_dates": [
          "2018-11-21"
        ]
      }
    }
  ]
}
400	
Bad Request

Example Value
Model
{
  "errors": [
    {
      "status": "400",
      "source": {
        "parameter": "sort"
      },
      "detail": "Invalid sort key",
      "code": "bad_request"
    }
  ]
}
403	
Forbidden

Example Value
Model
{
  "errors": [
    {
      "status": "403",
      "code": "forbidden"
    }
  ]
}
429	
Too Many Requests

Example Value
Model
{
  "errors": [
    {
      "status": "429",
      "detail": "You have exceeded your allowed usage rate.",
      "code": "rate_limited"
    }
  ]
}
GET
/services/{id}

Single service, which represents the days of the week, as well as extra days, that a trip is valid.

Parameters
Try it out
Name	Description
id *
string
(path)	
Unique identifier for a service

fields[service]
string
(query)	
Fields to include with the response. Multiple fields MUST be a comma-separated (U+002C COMMA, “,”) list.

Note that fields can also be selected for included data types: see the V3 API Best Practices for an example.

Responses
Response content type

application/vnd.api+json
Code	Description
200	
OK

Example Value
Model
{
  "links": {
    "self": "string"
  },
  "included": [
    {
      "type": "string",
      "id": "string"
    }
  ],
  "data": {
    "type": "string",
    "relationships": {},
    "links": {},
    "id": "string",
    "attributes": {
      "valid_days": [
        "1"
      ],
      "start_date": "2018-11-19",
      "schedule_typicality": 1,
      "schedule_type": "Sunday",
      "schedule_name": "Weekday (no school)",
      "removed_dates_notes": [
        "New Year Day"
      ],
      "removed_dates": [
        "2018-12-17"
      ],
      "rating_start_date": "2018-12-22",
      "rating_end_date": "2019-03-14",
      "rating_description": "Winter",
      "end_date": "2018-12-24",
      "description": "Weekday schedule (no school)",
      "added_dates_notes": [
        "New Year Day"
      ],
      "added_dates": [
        "2018-11-21"
      ]
    }
  }
}
403	
Forbidden

Example Value
Model
{
  "errors": [
    {
      "status": "403",
      "code": "forbidden"
    }
  ]
}
404	
Not Found

Example Value
Model
{
  "errors": [
    {
      "title": "Resource Not Found",
      "status": "404",
      "source": {
        "parameter": "id"
      },
      "code": "not_found"
    }
  ]
}
406	
Not Acceptable

Example Value
Model
{
  "errors": [
    {
      "status": "406",
      "detail": "Content-type text/event-stream is not supported for this kind of request.",
      "code": "not_acceptable"
    }
  ]
}
429	
Too Many Requests

Example Value
Model
{
  "errors": [
    {
      "status": "429",
      "detail": "You have exceeded your allowed usage rate.",
      "code": "rate_limited"
    }
  ]
}
Shape

GET
/shapes

NOTE: filter[route] MUST be given for any shapes to be returned.

List of shapes.

Vertices
World
/data/{index}/attributes/polyline is in Encoded Polyline Algorithm Format, which encodes the latitude and longitude of a sequence of points in the shape.

Parameters
Try it out
Name	Description
page[offset]
integer
(query)	
Offset (0-based) of first element in the page

page[limit]
integer
(query)	
Max number of elements to return

sort
string
(query)	
Results can be sorted by the id or any /data/{index}/attributes key. Assumes ascending; may be prefixed with '-' for descending

JSON pointer	Direction	sort
/data/{index}/attributes/polyline	ascending	polyline
/data/{index}/attributes/polyline	descending	-polyline
fields[shape]
string
(query)	
Fields to include with the response. Multiple fields MUST be a comma-separated (U+002C COMMA, “,”) list.

Note that fields can also be selected for included data types: see the V3 API Best Practices for an example.

filter[route] *
string
(query)	
Filter by /data/{index}/relationships/route/data/id.

Multiple IDs MUST be a comma-separated (U+002C COMMA, “,”) list.

Responses
Response content type

application/vnd.api+json
Code	Description
200	
OK

Example Value
Model
{
  "links": {
    "self": "string",
    "prev": "string",
    "next": "string",
    "last": "string",
    "first": "string"
  },
  "data": [
    {
      "type": "string",
      "relationships": {},
      "links": {},
      "id": "string",
      "attributes": {
        "polyline": "string"
      }
    }
  ]
}
400	
Bad Request

Example Value
Model
{
  "errors": [
    {
      "status": "400",
      "source": {
        "parameter": "sort"
      },
      "detail": "Invalid sort key",
      "code": "bad_request"
    }
  ]
}
403	
Forbidden

Example Value
Model
{
  "errors": [
    {
      "status": "403",
      "code": "forbidden"
    }
  ]
}
429	
Too Many Requests

Example Value
Model
{
  "errors": [
    {
      "status": "429",
      "detail": "You have exceeded your allowed usage rate.",
      "code": "rate_limited"
    }
  ]
}
GET
/shapes/{id}

Detail of a particular shape.

Vertices
World
/data/attributes/polyline is in Encoded Polyline Algorithm Format, which encodes the latitude and longitude of a sequence of points in the shape.

Parameters
Try it out
Name	Description
id *
string
(path)	
Unique identifier for shape

fields[shape]
string
(query)	
Fields to include with the response. Multiple fields MUST be a comma-separated (U+002C COMMA, “,”) list.

Note that fields can also be selected for included data types: see the V3 API Best Practices for an example.

Responses
Response content type

application/vnd.api+json
Code	Description
200	
OK

Example Value
Model
{
  "links": {
    "self": "string"
  },
  "included": [
    {
      "type": "string",
      "id": "string"
    }
  ],
  "data": {
    "type": "string",
    "relationships": {},
    "links": {},
    "id": "string",
    "attributes": {
      "polyline": "string"
    }
  }
}
400	
Bad Request

Example Value
Model
{
  "errors": [
    {
      "status": "400",
      "source": {
        "parameter": "sort"
      },
      "detail": "Invalid sort key",
      "code": "bad_request"
    }
  ]
}
403	
Forbidden

Example Value
Model
{
  "errors": [
    {
      "status": "403",
      "code": "forbidden"
    }
  ]
}
404	
Not Found

Example Value
Model
{
  "errors": [
    {
      "title": "Resource Not Found",
      "status": "404",
      "source": {
        "parameter": "id"
      },
      "code": "not_found"
    }
  ]
}
406	
Not Acceptable

Example Value
Model
{
  "errors": [
    {
      "status": "406",
      "detail": "Content-type text/event-stream is not supported for this kind of request.",
      "code": "not_acceptable"
    }
  ]
}
429	
Too Many Requests

Example Value
Model
{
  "errors": [
    {
      "status": "429",
      "detail": "You have exceeded your allowed usage rate.",
      "code": "rate_limited"
    }
  ]
}
Stop

GET
/stops

List stops.

Accessibility
Wheelchair boarding (/data/{index}/attributes/wheelchair_boarding) corresponds to GTFS wheelchair_boarding. The MBTA handles parent station inheritance itself, so value can be treated simply:

Value	Meaning
0	No Information
1	Accessible (if trip is wheelchair accessible)
2	Inaccessible
Location
World
Use /data/{index}/attributes/latitude and /data/{index}/attributes/longitude to get the location of a stop.

Entrance
The stop may be inside a station. If /data/{index}/relationships/parent_station/data/id is present, you should look up the parent station (/stops/{parent_id}) and use its location to give direction first to the parent station and then route from there to the stop.

Nearby
The filter[latitude] and filter[longitude] can be used together to find any stops near that latitude and longitude. The distance is in degrees as if latitude and longitude were on a flat 2D plane and normal Pythagorean distance was calculated. Over the region MBTA serves, 0.02 degrees is approximately 1 mile. How close is considered nearby, is controlled by filter[radius], which default to 0.01 degrees (approximately a half mile).

Parameters
Try it out
Name	Description
page[offset]
integer
(query)	
Offset (0-based) of first element in the page

page[limit]
integer
(query)	
Max number of elements to return

sort
string
(query)	
Results can be sorted by the id or any /data/{index}/attributes key. Sorting by distance requires filter[latitude] and filter[longitude] to be set. Assumes ascending; may be prefixed with '-' for descending.

JSON pointer	Direction	sort
/data/{index}/attributes/address	ascending	address
/data/{index}/attributes/address	descending	-address
/data/{index}/attributes/at_street	ascending	at_street
/data/{index}/attributes/at_street	descending	-at_street
/data/{index}/attributes/description	ascending	description
/data/{index}/attributes/description	descending	-description
/data/{index}/attributes/latitude	ascending	latitude
/data/{index}/attributes/latitude	descending	-latitude
/data/{index}/attributes/location_type	ascending	location_type
/data/{index}/attributes/location_type	descending	-location_type
/data/{index}/attributes/longitude	ascending	longitude
/data/{index}/attributes/longitude	descending	-longitude
/data/{index}/attributes/municipality	ascending	municipality
/data/{index}/attributes/municipality	descending	-municipality
/data/{index}/attributes/name	ascending	name
/data/{index}/attributes/name	descending	-name
/data/{index}/attributes/on_street	ascending	on_street
/data/{index}/attributes/on_street	descending	-on_street
/data/{index}/attributes/platform_code	ascending	platform_code
/data/{index}/attributes/platform_code	descending	-platform_code
/data/{index}/attributes/platform_name	ascending	platform_name
/data/{index}/attributes/platform_name	descending	-platform_name
/data/{index}/attributes/vehicle_type	ascending	vehicle_type
/data/{index}/attributes/vehicle_type	descending	-vehicle_type
/data/{index}/attributes/wheelchair_boarding	ascending	wheelchair_boarding
/data/{index}/attributes/wheelchair_boarding	descending	-wheelchair_boarding
Distance to (/data/{index}/attributes/latitude, /data/{index}/attributes/longitude)	ascending	distance
Distance to (/data/{index}/attributes/latitude, /data/{index}/attributes/longitude)	descending	-distance
fields[stop]
string
(query)	
Fields to include with the response. Multiple fields MUST be a comma-separated (U+002C COMMA, “,”) list.

Note that fields can also be selected for included data types: see the V3 API Best Practices for an example.

include
string
(query)	
Relationships to include.

child_stops
connecting_stops
facilities
parent_station
route
The value of the include parameter MUST be a comma-separated (U+002C COMMA, “,”) list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, “.”) list of relationship names. JSONAPI “include” behavior

Note that route can only be included if filter[route] is present and has exactly one /data/{index}/relationships/route/data/id.

filter[date]
string
(query)	
Filter by date when stop is in use. Will be ignored unless filter[route] is present. If filter[service] is present, this filter will be ignored. The active date is the service date. Trips that begin between midnight and 3am are considered part of the previous service day. The format is ISO8601 with the template of YYYY-MM-DD.

filter[direction_id]
string
(query)	
Filter by direction of travel along the route. Must be used in conjuction with filter[route] to apply.

The meaning of direction_id varies based on the route. You can programmatically get the direction names from /routes /data/{index}/attributes/direction_names or /routes/{id} /data/attributes/direction_names.

filter[latitude]
string
(query)	
Latitude in degrees North in the WGS-84 coordinate system to search filter[radius] degrees around with filter[longitude].

filter[longitude]
string
(query)	
Longitude in degrees East in the WGS-84 coordinate system to search filter[radius] degrees around with filter[latitude].

filter[radius]
number
(query)	
The distance is in degrees as if latitude and longitude were on a flat 2D plane and normal Pythagorean distance was calculated. Over the region MBTA serves, 0.02 degrees is approximately 1 mile. Defaults to 0.01 degrees (approximately a half mile).

filter[id]
string
(query)	
Filter by /data/{index}/id (the stop ID). Multiple /data/{index}/id MUST be a comma-separated (U+002C COMMA, “,”) list.

filter[route_type]
string
(query)	
Filter by route_type: https://developers.google.com/transit/gtfs/reference/routes-file.

Multiple route_type MUST be a comma-separated (U+002C COMMA, “,”) list.

filter[route]
string
(query)	
Filter by /data/{index}/relationships/route/data/id.

Multiple IDs MUST be a comma-separated (U+002C COMMA, “,”) list.

filter[service]
string
(query)	
Filter by service_id for which stop is in use. Multiple service_ids MUST be a comma-separated (U+002C COMMA, “,”) list.

filter[location_type]
string
(query)	
Filter by location_type https://github.com/mbta/gtfs-documentation/blob/master/reference/gtfs.md#stopstxt. Multiple location_type MUST be a comma-separated (U+002C COMMA, “,”) list.

Responses
Response content type

application/vnd.api+json
Code	Description
200	
OK

Example Value
Model
{
  "links": {
    "self": "string",
    "prev": "string",
    "next": "string",
    "last": "string",
    "first": "string"
  },
  "data": [
    {
      "type": "string",
      "relationships": {
        "parent_station": {
          "links": {
            "self": "string",
            "related": "string"
          },
          "data": {
            "type": "string",
            "id": "string"
          }
        }
      },
      "links": {},
      "id": "string",
      "attributes": {
        "wheelchair_boarding": 0,
        "vehicle_type": 3,
        "platform_name": "Red Line",
        "platform_code": "5",
        "on_street": "Massachusetts Avenue",
        "name": "Parker St @ Hagen Rd",
        "municipality": "Cambridge",
        "longitude": 42.316115,
        "location_type": 0,
        "latitude": -71.194994,
        "description": "Alewife - Red Line",
        "at_street": "Essex Street",
        "address": "Alewife Brook Parkway and Cambridge Park Drive, Cambridge, MA 02140"
      }
    }
  ]
}
400	
Bad Request

Example Value
Model
{
  "errors": [
    {
      "status": "400",
      "source": {
        "parameter": "sort"
      },
      "detail": "Invalid sort key",
      "code": "bad_request"
    }
  ]
}
403	
Forbidden

Example Value
Model
{
  "errors": [
    {
      "status": "403",
      "code": "forbidden"
    }
  ]
}
429	
Too Many Requests

Example Value
Model
{
  "errors": [
    {
      "status": "429",
      "detail": "You have exceeded your allowed usage rate.",
      "code": "rate_limited"
    }
  ]
}
GET
/stops/{id}

Detail for a specific stop.

Accessibility
Wheelchair boarding (/data/attributes/wheelchair_boarding) corresponds to GTFS wheelchair_boarding. The MBTA handles parent station inheritance itself, so value can be treated simply:

Value	Meaning
0	No Information
1	Accessible (if trip is wheelchair accessible)
2	Inaccessible
Location
World
Use /data/attributes/latitude and /data/attributes/longitude to get the location of a stop.

Entrance
The stop may be inside a station. If /data/relationships/parent_station/data/id is present, you should look up the parent station (/stops/{parent_id}) and use its location to give direction first to the parent station and then route from there to the stop.

Parameters
Try it out
Name	Description
id *
string
(path)	
Unique identifier for stop

fields[stop]
string
(query)	
Fields to include with the response. Multiple fields MUST be a comma-separated (U+002C COMMA, “,”) list.

Note that fields can also be selected for included data types: see the V3 API Best Practices for an example.

include
string
(query)	
Relationships to include.

child_stops
connecting_stops
facilities
parent_station
The value of the include parameter MUST be a comma-separated (U+002C COMMA, “,”) list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, “.”) list of relationship names. JSONAPI “include” behavior

Responses
Response content type

application/vnd.api+json
Code	Description
200	
OK

Example Value
Model
{
  "links": {
    "self": "string"
  },
  "included": [
    {
      "type": "string",
      "id": "string"
    }
  ],
  "data": {
    "type": "string",
    "relationships": {
      "parent_station": {
        "links": {
          "self": "string",
          "related": "string"
        },
        "data": {
          "type": "string",
          "id": "string"
        }
      }
    },
    "links": {},
    "id": "string",
    "attributes": {
      "wheelchair_boarding": 0,
      "vehicle_type": 3,
      "platform_name": "Red Line",
      "platform_code": "5",
      "on_street": "Massachusetts Avenue",
      "name": "Parker St @ Hagen Rd",
      "municipality": "Cambridge",
      "longitude": 42.316115,
      "location_type": 0,
      "latitude": -71.194994,
      "description": "Alewife - Red Line",
      "at_street": "Essex Street",
      "address": "Alewife Brook Parkway and Cambridge Park Drive, Cambridge, MA 02140"
    }
  }
}
400	
Bad Request

Example Value
Model
{
  "errors": [
    {
      "status": "400",
      "source": {
        "parameter": "sort"
      },
      "detail": "Invalid sort key",
      "code": "bad_request"
    }
  ]
}
403	
Forbidden

Example Value
Model
{
  "errors": [
    {
      "status": "403",
      "code": "forbidden"
    }
  ]
}
404	
Not Found

Example Value
Model
{
  "errors": [
    {
      "title": "Resource Not Found",
      "status": "404",
      "source": {
        "parameter": "id"
      },
      "code": "not_found"
    }
  ]
}
406	
Not Acceptable

Example Value
Model
{
  "errors": [
    {
      "status": "406",
      "detail": "Content-type text/event-stream is not supported for this kind of request.",
      "code": "not_acceptable"
    }
  ]
}
429	
Too Many Requests

Example Value
Model
{
  "errors": [
    {
      "status": "429",
      "detail": "You have exceeded your allowed usage rate.",
      "code": "rate_limited"
    }
  ]
}
Trip

GET
/trips

NOTE: A id, route, route_pattern, or name filter MUST be present for any trips to be returned.

List of trips, the journies of a particular vehicle through a set of stops on a primary route and zero or more alternative routes that can be filtered on.

Accessibility
Wheelchair accessibility (/data/{index}/attributes/wheelchair_accessible) as defined in GTFS:

Value	Meaning
0	No information
1	Accessible (at stops allowing wheelchair_boarding)
2	Inaccessible
Grouping
Multiple trips may be grouped together using /data/{index}/attributes/block_id. A block represents a series of trips scheduled to be operated by the same vehicle.

Naming
There are 3 names associated with a trip.

API Field	GTFS	Show users?
/data/attributes/headsign	trip_headsign	Yes
/data/attributes/name	trip_short_name	Yes
/data/id	trip_id	No
Parameters
Try it out
Name	Description
page[offset]
integer
(query)	
Offset (0-based) of first element in the page

page[limit]
integer
(query)	
Max number of elements to return

sort
string
(query)	
Results can be sorted by the id or any /data/{index}/attributes key. Assumes ascending; may be prefixed with '-' for descending

JSON pointer	Direction	sort
/data/{index}/attributes/percentage	ascending	percentage
/data/{index}/attributes/percentage	descending	-percentage
/data/{index}/attributes/status	ascending	status
/data/{index}/attributes/status	descending	-status
/data/{index}/attributes/bikes_allowed	ascending	bikes_allowed
/data/{index}/attributes/bikes_allowed	descending	-bikes_allowed
/data/{index}/attributes/block_id	ascending	block_id
/data/{index}/attributes/block_id	descending	-block_id
/data/{index}/attributes/direction_id	ascending	direction_id
/data/{index}/attributes/direction_id	descending	-direction_id
/data/{index}/attributes/headsign	ascending	headsign
/data/{index}/attributes/headsign	descending	-headsign
/data/{index}/attributes/name	ascending	name
/data/{index}/attributes/name	descending	-name
/data/{index}/attributes/revenue_status	ascending	revenue_status
/data/{index}/attributes/revenue_status	descending	-revenue_status
/data/{index}/attributes/wheelchair_accessible	ascending	wheelchair_accessible
/data/{index}/attributes/wheelchair_accessible	descending	-wheelchair_accessible
fields[trip]
string
(query)	
Fields to include with the response. Multiple fields MUST be a comma-separated (U+002C COMMA, “,”) list.

Note that fields can also be selected for included data types: see the V3 API Best Practices for an example.

include
string
(query)	
Relationships to include.

route
vehicle
service
shape
predictions
route_pattern
stops
occupancies
The value of the include parameter MUST be a comma-separated (U+002C COMMA, “,”) list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, “.”) list of relationship names. JSONAPI “include” behavior

include	Description
route	The primary route for the trip.
vehicle	The vehicle on this trip.
service	The service controlling when this trip is active.
shape	The shape of the trip.
route_pattern	The route pattern for the trip.
predictions	Predictions of when the vehicle on this trip will arrive at or depart from each stop on the route(s) on the trip.
stops	The stops this trip goes through.
occupancies	EXPERIMENTAL: The trip’s static occupancy data. For information on experimental features, see: https://www.mbta.com/developers/v3-api/versioning.
filter[date]
string
(query)	
Filter by trips on a particular date The active date is the service date. Trips that begin between midnight and 3am are considered part of the previous service day. The format is ISO8601 with the template of YYYY-MM-DD.

filter[direction_id]
string
(query)	
Filter by direction of travel along the route. Must be used in conjuction with filter[route] to apply.

The meaning of direction_id varies based on the route. You can programmatically get the direction names from /routes /data/{index}/attributes/direction_names or /routes/{id} /data/attributes/direction_names.

filter[route]
string
(query)	
Filter by /data/{index}/relationships/route/data/id.

Multiple IDs MUST be a comma-separated (U+002C COMMA, “,”) list.

filter[revenue]
string
(query)	
Filter trips by revenue status.
Revenue status indicates whether or not the vehicle is accepting passengers.
When filter is not included, the default behavior is to filter by revenue=REVENUE.

Multiple revenue types MUST be a comma-separated (U+002C COMMA, “,”) list.

filter[route_pattern]
string
(query)	
Filter by route pattern IDs MUST be a comma-separated (U+002C COMMA, “,”) list.

filter[id]
string
(query)	
Filter by multiple IDs. MUST be a comma-separated (U+002C COMMA, “,”) list.

filter[name]
string
(query)	
Filter by multiple names. MUST be a comma-separated (U+002C COMMA, “,”) list.

Responses
Response content type

application/vnd.api+json
Code	Description
200	
OK

Example Value
Model
{
  "links": {
    "self": "string",
    "prev": "string",
    "next": "string",
    "last": "string",
    "first": "string"
  },
  "data": [
    {
      "type": "string",
      "relationships": {
        "shape": {
          "links": {
            "self": "string",
            "related": "string"
          },
          "data": {
            "type": "string",
            "id": "string"
          }
        },
        "service": {
          "links": {
            "self": "string",
            "related": "string"
          },
          "data": {
            "type": "string",
            "id": "string"
          }
        },
        "route_pattern": {
          "links": {
            "self": "string",
            "related": "string"
          },
          "data": {
            "type": "string",
            "id": "string"
          }
        },
        "route": {
          "links": {
            "self": "string",
            "related": "string"
          },
          "data": {
            "type": "string",
            "id": "string"
          }
        },
        "occupancy": {
          "links": {
            "self": "string",
            "related": "string"
          },
          "data": {
            "type": "string",
            "id": "string"
          }
        }
      },
      "links": {},
      "id": "string",
      "attributes": {
        "wheelchair_accessible": 1,
        "revenue_status": "REVENUE",
        "name": "596",
        "headsign": "Harvard",
        "direction_id": 0,
        "block_id": "1070",
        "bikes_allowed": 1
      }
    }
  ]
}
400	
Bad Request

Example Value
Model
{
  "errors": [
    {
      "status": "400",
      "source": {
        "parameter": "sort"
      },
      "detail": "Invalid sort key",
      "code": "bad_request"
    }
  ]
}
403	
Forbidden

Example Value
Model
{
  "errors": [
    {
      "status": "403",
      "code": "forbidden"
    }
  ]
}
429	
Too Many Requests

Example Value
Model
{
  "errors": [
    {
      "status": "429",
      "detail": "You have exceeded your allowed usage rate.",
      "code": "rate_limited"
    }
  ]
}
GET
/trips/{id}

Single trip - the journey of a particular vehicle through a set of stops

Accessibility
Wheelchair accessibility (/data/attributes/wheelchair_accessible) as defined in GTFS:

Value	Meaning
0	No information
1	Accessible (at stops allowing wheelchair_boarding)
2	Inaccessible
Grouping
Multiple trips may be grouped together using /data/attributes/block_id. A block represents a series of trips scheduled to be operated by the same vehicle.

Naming
There are 3 names associated with a trip.

API Field	GTFS	Show users?
/data/attributes/headsign	trip_headsign	Yes
/data/attributes/name	trip_short_name	Yes
/data/id	trip_id	No
Parameters
Try it out
Name	Description
id *
string
(path)	
Unique identifier for a trip

fields[trip]
string
(query)	
Fields to include with the response. Multiple fields MUST be a comma-separated (U+002C COMMA, “,”) list.

Note that fields can also be selected for included data types: see the V3 API Best Practices for an example.

include
string
(query)	
Relationships to include.

route
vehicle
service
shape
predictions
route_pattern
stops
occupancies
The value of the include parameter MUST be a comma-separated (U+002C COMMA, “,”) list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, “.”) list of relationship names. JSONAPI “include” behavior

include	Description
route	The primary route for the trip.
vehicle	The vehicle on this trip.
service	The service controlling when this trip is active.
shape	The shape of the trip.
route_pattern	The route pattern for the trip.
predictions	Predictions of when the vehicle on this trip will arrive at or depart from each stop on the route(s) on the trip.
stops	The stops this trip goes through.
occupancies	EXPERIMENTAL: The trip’s static occupancy data. For information on experimental features, see: https://www.mbta.com/developers/v3-api/versioning.
Responses
Response content type

application/vnd.api+json
Code	Description
200	
OK

Example Value
Model
{
  "links": {
    "self": "string"
  },
  "included": [
    {
      "type": "string",
      "id": "string"
    }
  ],
  "data": {
    "type": "string",
    "relationships": {
      "shape": {
        "links": {
          "self": "string",
          "related": "string"
        },
        "data": {
          "type": "string",
          "id": "string"
        }
      },
      "service": {
        "links": {
          "self": "string",
          "related": "string"
        },
        "data": {
          "type": "string",
          "id": "string"
        }
      },
      "route_pattern": {
        "links": {
          "self": "string",
          "related": "string"
        },
        "data": {
          "type": "string",
          "id": "string"
        }
      },
      "route": {
        "links": {
          "self": "string",
          "related": "string"
        },
        "data": {
          "type": "string",
          "id": "string"
        }
      },
      "occupancy": {
        "links": {
          "self": "string",
          "related": "string"
        },
        "data": {
          "type": "string",
          "id": "string"
        }
      }
    },
    "links": {},
    "id": "string",
    "attributes": {
      "wheelchair_accessible": 1,
      "revenue_status": "REVENUE",
      "name": "596",
      "headsign": "Harvard",
      "direction_id": 0,
      "block_id": "1070",
      "bikes_allowed": 1
    }
  }
}
403	
Forbidden

Example Value
Model
{
  "errors": [
    {
      "status": "403",
      "code": "forbidden"
    }
  ]
}
404	
Not Found

Example Value
Model
{
  "errors": [
    {
      "title": "Resource Not Found",
      "status": "404",
      "source": {
        "parameter": "id"
      },
      "code": "not_found"
    }
  ]
}
406	
Not Acceptable

Example Value
Model
{
  "errors": [
    {
      "status": "406",
      "detail": "Content-type text/event-stream is not supported for this kind of request.",
      "code": "not_acceptable"
    }
  ]
}
429	
Too Many Requests

Example Value
Model
{
  "errors": [
    {
      "status": "429",
      "detail": "You have exceeded your allowed usage rate.",
      "code": "rate_limited"
    }
  ]
}
Vehicle

GET
/vehicles

List of vehicles (buses, ferries, and trains)

Direction
World
To figure out which way the vehicle is pointing at the location, use /data/{index}/attributes/bearing. This can be the compass bearing, or the direction towards the next stop or intermediate location.

Trip
To get the direction around the stops in the trip use /data/{index}/attributes/direction_id.

Location
World
Use /data/{index}/attributes/latitude and /data/{index}/attributes/longitude to get the location of a vehicle.

Trip
Use /data/{index}/attributes/current_stop_sequence to get the stop number along the trip. Useful for linear stop indicators. Position relative to the current stop is in /data/{index}/attributes/current_status.

Movement
World
Use /data/{index}/attributes/speed to get the speed of the vehicle in meters per second.

Parameters
Try it out
Name	Description
page[offset]
integer
(query)	
Offset (0-based) of first element in the page

page[limit]
integer
(query)	
Max number of elements to return

sort
string
(query)	
Results can be sorted by the id or any /data/{index}/attributes key. Assumes ascending; may be prefixed with '-' for descending

JSON pointer	Direction	sort
/data/{index}/attributes/bearing	ascending	bearing
/data/{index}/attributes/bearing	descending	-bearing
/data/{index}/attributes/carriages	ascending	carriages
/data/{index}/attributes/carriages	descending	-carriages
/data/{index}/attributes/current_status	ascending	current_status
/data/{index}/attributes/current_status	descending	-current_status
/data/{index}/attributes/current_stop_sequence	ascending	current_stop_sequence
/data/{index}/attributes/current_stop_sequence	descending	-current_stop_sequence
/data/{index}/attributes/direction_id	ascending	direction_id
/data/{index}/attributes/direction_id	descending	-direction_id
/data/{index}/attributes/label	ascending	label
/data/{index}/attributes/label	descending	-label
/data/{index}/attributes/latitude	ascending	latitude
/data/{index}/attributes/latitude	descending	-latitude
/data/{index}/attributes/longitude	ascending	longitude
/data/{index}/attributes/longitude	descending	-longitude
/data/{index}/attributes/occupancy_status	ascending	occupancy_status
/data/{index}/attributes/occupancy_status	descending	-occupancy_status
/data/{index}/attributes/revenue_status	ascending	revenue_status
/data/{index}/attributes/revenue_status	descending	-revenue_status
/data/{index}/attributes/speed	ascending	speed
/data/{index}/attributes/speed	descending	-speed
/data/{index}/attributes/updated_at	ascending	updated_at
/data/{index}/attributes/updated_at	descending	-updated_at
fields[vehicle]
string
(query)	
Fields to include with the response. Multiple fields MUST be a comma-separated (U+002C COMMA, “,”) list.

Note that fields can also be selected for included data types: see the V3 API Best Practices for an example.

include
string
(query)	
Relationships to include.

trip
stop
route
The value of the include parameter MUST be a comma-separated (U+002C COMMA, “,”) list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, “.”) list of relationship names. JSONAPI “include” behavior

include	Description
trip	The trip which the vehicle is currently operating.
stop	The vehicle’s current (when current_status is STOPPED_AT) or next stop.
route	The one route that is designated for that trip, as in GTFS trips.txt. A trip might also provide service on other routes, identified by the MBTA’s multi_route_trips.txt GTFS extension. filter[route] does consider the multi_route_trips GTFS extension, so it is possible to filter for one route and get a different route included in the response.
filter[id]
string
(query)	
Filter by multiple IDs. Multiple IDs MUST be a comma-separated (U+002C COMMA, “,”) list. Cannot be combined with any other filter.

filter[trip]
string
(query)	
Filter by /data/{index}/relationships/trip/data/id. Multiple /data/{index}/relationships/trip/data/id MUST be a comma-separated (U+002C COMMA, “,”) list. Cannot be combined with any other filter.

filter[label]
string
(query)	
Filter by label. Multiple label MUST be a comma-separated (U+002C COMMA, “,”) list.

filter[route]
string
(query)	
Filter by route. If the vehicle is on a multi-route trip, it will be returned for any of the routes. Multiple route_id MUST be a comma-separated (U+002C COMMA, “,”) list.

filter[direction_id]
string
(query)	
Filter by direction of travel along the route. Must be used in conjuction with filter[route] to apply.

The meaning of direction_id varies based on the route. You can programmatically get the direction names from /routes /data/{index}/attributes/direction_names or /routes/{id} /data/attributes/direction_names.

Only used if filter[route] is also present.

filter[route_type]
string
(query)	
Filter by route_type: https://developers.google.com/transit/gtfs/reference/routes-file.

Multiple route_type MUST be a comma-separated (U+002C COMMA, “,”) list.

filter[revenue]
string
(query)	
Filter vehicles by revenue status.
Revenue status indicates whether or not the vehicle is accepting passengers.
When filter is not included, the default behavior is to filter by revenue=REVENUE.

Multiple revenue types MUST be a comma-separated (U+002C COMMA, “,”) list.

Responses
Response content type

application/vnd.api+json
Code	Description
200	
OK

Example Value
Model
{
  "links": {
    "self": "string",
    "prev": "string",
    "next": "string",
    "last": "string",
    "first": "string"
  },
  "data": [
    {
      "type": "string",
      "relationships": {
        "trip": {
          "links": {
            "self": "string",
            "related": "string"
          },
          "data": {
            "type": "string",
            "id": "string"
          }
        },
        "stop": {
          "links": {
            "self": "string",
            "related": "string"
          },
          "data": {
            "type": "string",
            "id": "string"
          }
        },
        "route": {
          "links": {
            "self": "string",
            "related": "string"
          },
          "data": {
            "type": "string",
            "id": "string"
          }
        }
      },
      "links": {},
      "id": "string",
      "attributes": {
        "updated_at": "2017-08-14T16:04:44-04:00",
        "speed": 16,
        "revenue_status": "REVENUE",
        "occupancy_status": "FEW_SEATS_AVAILABLE",
        "longitude": 42.32941818237305,
        "latitude": -71.27239990234375,
        "label": "1817",
        "direction_id": 0,
        "current_stop_sequence": 8,
        "current_status": "IN_TRANSIT_TO",
        "carriages": [
          {
            "occupancy_status": "MANY_SEATS_AVAILABLE",
            "occupancy_percentage": 80,
            "label": "some-carriage"
          }
        ],
        "bearing": 174
      }
    }
  ]
}
400	
Bad Request

Example Value
Model
{
  "errors": [
    {
      "status": "400",
      "source": {
        "parameter": "sort"
      },
      "detail": "Invalid sort key",
      "code": "bad_request"
    }
  ]
}
403	
Forbidden

Example Value
Model
{
  "errors": [
    {
      "status": "403",
      "code": "forbidden"
    }
  ]
}
429	
Too Many Requests

Example Value
Model
{
  "errors": [
    {
      "status": "429",
      "detail": "You have exceeded your allowed usage rate.",
      "code": "rate_limited"
    }
  ]
}
GET
/vehicles/{id}

Single vehicle (bus, ferry, or train)

Direction
World
To figure out which way the vehicle is pointing at the location, use /data/attributes/bearing. This can be the compass bearing, or the direction towards the next stop or intermediate location.

Trip
To get the direction around the stops in the trip use /data/attributes/direction_id.

Location
World
Use /data/attributes/latitude and /data/attributes/longitude to get the location of a vehicle.

Trip
Use /data/attributes/current_stop_sequence to get the stop number along the trip. Useful for linear stop indicators. Position relative to the current stop is in /data/attributes/current_status.

Movement
World
Use /data/attributes/speed to get the speed of the vehicle in meters per second.

Parameters
Try it out
Name	Description
id *
string
(path)	
Unique identifier for a vehicle

fields[vehicle]
string
(query)	
Fields to include with the response. Multiple fields MUST be a comma-separated (U+002C COMMA, “,”) list.

Note that fields can also be selected for included data types: see the V3 API Best Practices for an example.

include
string
(query)	
Relationships to include.

trip
stop
route
The value of the include parameter MUST be a comma-separated (U+002C COMMA, “,”) list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, “.”) list of relationship names. JSONAPI “include” behavior

include	Description
trip	The trip which the vehicle is currently operating.
stop	The vehicle’s current (when current_status is STOPPED_AT) or next stop.
route	The one route that is designated for that trip, as in GTFS trips.txt. A trip might also provide service on other routes, identified by the MBTA’s multi_route_trips.txt GTFS extension. filter[route] does consider the multi_route_trips GTFS extension, so it is possible to filter for one route and get a different route included in the response.
Responses
Response content type

application/vnd.api+json
Code	Description
200	
OK

Example Value
Model
{
  "links": {
    "self": "string"
  },
  "included": [
    {
      "type": "string",
      "id": "string"
    }
  ],
  "data": {
    "type": "string",
    "relationships": {
      "trip": {
        "links": {
          "self": "string",
          "related": "string"
        },
        "data": {
          "type": "string",
          "id": "string"
        }
      },
      "stop": {
        "links": {
          "self": "string",
          "related": "string"
        },
        "data": {
          "type": "string",
          "id": "string"
        }
      },
      "route": {
        "links": {
          "self": "string",
          "related": "string"
        },
        "data": {
          "type": "string",
          "id": "string"
        }
      }
    },
    "links": {},
    "id": "string",
    "attributes": {
      "updated_at": "2017-08-14T16:04:44-04:00",
      "speed": 16,
      "revenue_status": "REVENUE",
      "occupancy_status": "FEW_SEATS_AVAILABLE",
      "longitude": 42.32941818237305,
      "latitude": -71.27239990234375,
      "label": "1817",
      "direction_id": 0,
      "current_stop_sequence": 8,
      "current_status": "IN_TRANSIT_TO",
      "carriages": [
        {
          "occupancy_status": "MANY_SEATS_AVAILABLE",
          "occupancy_percentage": 80,
          "label": "some-carriage"
        }
      ],
      "bearing": 174
    }
  }
}
403	
Forbidden

Example Value
Model
{
  "errors": [
    {
      "status": "403",
      "code": "forbidden"
    }
  ]
}
404	
Not Found

Example Value
Model
{
  "errors": [
    {
      "title": "Resource Not Found",
      "status": "404",
      "source": {
        "parameter": "id"
      },
      "code": "not_found"
    }
  ]
}
406	
Not Acceptable

Example Value
Model
{
  "errors": [
    {
      "status": "406",
      "detail": "Content-type text/event-stream is not supported for this kind of request.",
      "code": "not_acceptable"
    }
  ]
}
429	
Too Many Requests

Example Value
Model
{
  "errors": [
    {
      "status": "429",
      "detail": "You have exceeded your allowed usage rate.",
      "code": "rate_limited"
    }
  ]
}
Models
Route{
description:	
A JSON-API document with a single RouteResource resource

links	{
self	string
the link that generated the current response document.

}
included	[{
type	string
The JSON-API resource type

id	string
The JSON-API resource ID

}]
description:Included resources
data*	RouteResource{
description:	
Path a vehicle travels during service. See GTFS `routes.txt for the base specification.

type	string
The JSON-API resource type

relationships	{
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
type	integer
example: 1
Value	Name	Example
0	Light Rail	Green Line
1	Heavy Rail	Red Line
2	Commuter Rail	
3	Bus	
4	Ferry	
text_color	string
example: 000000
A legible color to use for text drawn against a background of the route’s color attribute. See GTFS routes.txt route_text_color.

sort_order	integer
Routes sort in ascending order

short_name	string
example: Red
This will often be a short, abstract identifier like "32", "100X", or “Green” that riders use to identify a route, but which doesn’t give any indication of what places the route serves. See GTFS routes.txt route_short_name.

long_name	string
example: Red Line
The full name of a route. This name is generally more descriptive than the short_name and will often include the route’s destination or stop. See GTFS routes.txt route_long_name.

fare_class	string
example: Free
Specifies the fare type of the route, which can differ from the service category.

direction_names	[string
x-nullable: true
The names of direction ids for this route in ascending ordering starting at 0 for the first index.

]
direction_destinations	[string
x-nullable: true
The destinations for direction ids for this route in ascending ordering starting at 0 for the first index.

]
description	string
example: Rapid Transit
Details about stops, schedule, and/or service. See
GTFS routes.txt route_desc.

color	string
example: FFFFFF
A color that corresponds to the route, such as the line color on a map." See GTFS routes.txt route_color.

}
}
}
FacilityProperty{
description:	
Name/value pair for additional facility information

value	stringinteger
example: 197 Ivory St, Braintree, MA 02184
The value of the property

name	string
example: address
The name of the property

}
Predictions{
description:	
A page of PredictionResource results

links	{
self	string
Link to this page of results

prev	string
Link to the previous page of results

next	string
Link to the next page of results

last	string
Link to the last page of results

first	string
Link to the first page of results

}
data*	[PredictionResource{
description:	
The predicted arrival time (/*/attributes/arrival_time) and departure time (*/attributes/departure_time) to/from a stop (*/relationships/stop/data/id) at a given sequence (*/attriutes/stop_sequence) along a trip (*/relationships/trip/data/id) going a direction (*/attributes/direction_id) along a route (*/relationships/route/data/id).

See GTFS Realtime FeedMesage FeedEntity TripUpdate TripDescriptor
See GTFS Realtime FeedMesage FeedEntity TripUpdate StopTimeUpdate

type	string
The JSON-API resource type

relationships	{
vehicle	{
links	{
self	string
Relationship link for vehicle

related	string
Related vehicle link

}
data	{
type	string
Type of related vehicle resource

id	string
Related vehicle resource id

}
}
trip	{
links	{
self	string
Relationship link for trip

related	string
Related trip link

}
data	{
type	string
Type of related trip resource

id	string
Related trip resource id

}
}
stop	{
links	{
self	string
Relationship link for stop

related	string
Related stop link

}
data	{
type	string
Type of related stop resource

id	string
Related stop resource id

}
}
schedule	{
links	{
self	string
Relationship link for schedule

related	string
Related schedule link

}
data	{
type	string
Type of related schedule resource

id	string
Related schedule resource id

}
}
route	{
links	{
self	string
Relationship link for route

related	string
Related route link

}
data	{
type	string
Type of related route resource

id	string
Related route resource id

}
}
alerts	{
links	{
self	string
Relationship link for alerts

related	string
Related alerts link

}
data	[{
type	string
Type of related alerts resource

id	string
Related alerts resource id

}]
}
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
update_type	string
Value	Description
"MID_TRIP"	Prediction is for the trip the vehicle is currently on.
"AT_TERMINAL"	Prediction is for a terminal trip that hasn’t started yet.
"REVERSE_TRIP"	Prediction is for a trip that hasn’t started and the train that will be servicing this trip is currently in the middle of a previous trip.
stop_sequence	integer
x-nullable: true
example: 19
The sequence the stop (*/relationships/stop/data/id) is arrived at during the trip (*/relationships/trip/data/id). The stop sequence is monotonically increasing along the trip, but the stop_sequence along the trip are not necessarily consecutive.

See GTFS Realtime FeedMesage FeedEntity TripUpdate StopTimeUpdate stop_sequence.

status	string
example: Approaching
Status of the schedule

schedule_relationship	string
x-nullable: true
example: UNSCHEDULED
How the predicted stop relates to the Model.Schedule.t stops.

Value	Description
"ADDED"	An extra trip that was added in addition to a running schedule, for example, to replace a broken vehicle or to respond to sudden passenger load. See GTFS Realtime FeedMesage FeedEntity TripUpdate TripDescriptor ScheduleRelationship ADDED
"CANCELLED"	A trip that existed in the schedule but was removed. See GTFS Realtime FeedMesage FeedEntity TripUpdate TripDescriptor ScheduleRelationship CANCELED
"NO_DATA"	No data is given for this stop. It indicates that there is no realtime information available. See GTFS Realtime FeedMesage FeedEntity TripUpdate StopTimeUpdate ScheduleRelationship NO_DATA
"SKIPPED"	The stop was originally scheduled, but was skipped. See GTFS Realtime FeedMesage FeedEntity TripUpdate StopTimeUpdate ScheduleRelationship
"UNSCHEDULED"	A trip that is running with no schedule associated to it. See GTFS Realtime FeedMesage FeedEntity TripUpdate TripDescriptor ScheduleRelationship UNSCHEDULED
null	Stop was scheduled. See GTFS Realtime FeedMesage FeedEntity TripUpdate TripDescriptor ScheduleRelationship SCHEDULED
See GTFS Realtime FeedMesage FeedEntity TripUpdate TripDescriptor ScheduleRelationship
See GTFS Realtime FeedMesage FeedEntity TripUpdate StopTimeUpdate ScheduleRelationship

revenue_status	string
example: REVENUE
Value	Description
"REVENUE"	Indicates that the associated trip is accepting passengers.
"NON_REVENUE"	Indicates that the associated trip is not accepting passengers.
direction_id	integer
Direction in which trip is traveling: 0 or 1.

The meaning of direction_id varies based on the route. You can programmatically get the direction names from /routes /data/{index}/attributes/direction_names or /routes/{id} /data/attributes/direction_names.

Enum:
Array [ 2 ]
departure_uncertainty	integernull
example: 60
Uncertainty value for the departure time prediction.

Bus and Commuter Rail
See entities tripUpdate stop_time_updates departure uncertainty

Value	Description
< 300 or omitted	Valid real-time prediction
300	Real-time prediction not available. This code is primarily used when a vehicle has not yet been assigned to the trip, (i.e. because the block has not started yet). It is a schedule-based prediction, but Swiftly adjusts the schedule-based prediction time using observed historical travel times to make predictions more accurate than the schedule
301	Valid real-time prediction, though the bus appears to be stalled or significantly delayed and predictions are not as accurate
> 301	Likely invalid prediction, recommend not showing anything (and not showing scheduled time), very rare situation
Subway/Light Rail
See GTFS Realtime FeedMessage FeedEntity TripUpdate StopTimeUpdate departure.

Value	Description
60	A trip that has already started
120	A terminal/reverse trip departure for a trip that has NOT started and a train is awaiting departure at the origin
360	A terminal/reverse trip for a trip that has NOT started and a train is completing a previous trip
departure_time	string
x-nullable: true
example: 2017-08-14T15:38:58-04:00
When the vehicle is now predicted to depart. null if the last stop (*/relationships/stop/data/id) on the trip (*/relationships/trip/data/id). See GTFS Realtime FeedMessage FeedEntity TripUpdate StopTimeUpdate departure.
Format is ISO8601.

arrival_uncertainty	integernull
example: 60
Uncertainty value for the arrival time prediction.

Bus and Commuter Rail
See entities tripUpdate stop_time_updates arrival uncertainty

Value	Description
< 300 or omitted	Valid real-time prediction
300	Real-time prediction not available. This code is primarily used when a vehicle has not yet been assigned to the trip, (i.e. because the block has not started yet). It is a schedule-based prediction, but Swiftly adjusts the schedule-based prediction time using observed historical travel times to make predictions more accurate than the schedule
301	Valid real-time prediction, though the bus appears to be stalled or significantly delayed and predictions are not as accurate
> 301	Likely invalid prediction, recommend not showing anything (and not showing scheduled time), very rare situation
Subway/Light Rail
See GTFS Realtime FeedMessage FeedEntity TripUpdate StopTimeUpdate arrival.

Value	Description
60	A trip that has already started
120	A terminal/reverse trip departure for a trip that has NOT started and a train is awaiting departure at the origin
360	A terminal/reverse trip for a trip that has NOT started and a train is completing a previous trip
arrival_time	string
x-nullable: true
example: 2017-08-14T15:38:58-04:00
When the vehicle is now predicted to arrive. null if the first stop (*/relationships/stop/data/id) on the trip (*/relationships/trip/data/id). See GTFS Realtime FeedMessage FeedEntity TripUpdate StopTimeUpdate arrival.
Format is ISO8601.

}
}]
description:Content with [PredictionResource](#predictionresource) objects
}
NotFound{
description:	
A JSON-API error document when a resource is not found

errors*	[{
description:	
A JSON-API error when a resource is not found

title	string
example: Resource Not Found
A short, human-readable summary of the problem

status	string
example: 404
The HTTP status code applicable to the problem

source	{
description:	
A JSON-API error source

parameter	string
example: id
The name of parameter that was used to lookup up the resource that was not found

}
code	string
example: not_found
An application-specific error code

}]
minItems:1
maxItems:1
}
AlertResource{
description:	
An effect (enumerated in */attributes/effect and human-readable in */attributes/service_effect) on a provided service (facility, route, route type, stop and/or trip in /*/attributes/informed_entity) described by a banner (*/attributes/banner), short header (*/attributes/short_header), header */attributes/header, description (*/attributes/description), image (*/attributes/image), and image alternative text (*/attributes/image_alternative_text) that is active for one or more periods(*/attributes/active_period) caused by a cause (*/attribute/cause) that somewhere in its lifecycle (enumerated in */attributes/lifecycle and human-readable in */attributes/timeframe).

See GTFS Realtime FeedMessage FeedEntity Alert

Descriptions
There are 7 descriptive attributes.

JSON pointer	Usage
*/attributes/banner	Display as alert across application/website
*/attributes/short_header	When */attributes/header is too long to display
*/attributes/header	Used before showing and prepended to */attributes/description
*/attributes/description	Used when user asks to expand alert.
*/attributes/image	URL to descriptive image.
*/attributes/image_alternative_text	Text that describes image linked in url
Effect
JSON pointer	
*/attributes/effect	Enumerated
*/attributes/service_effect	Human-readable
Timeline
There are 3 timeline related attributes

JSON pointer	Description
*/attributes/active_period	Exact Date/Time ranges alert is active
*/attributes/lifecycle	Enumerated, machine-readable description of */attributes/active_period
*/attributes/timeframe	Human-readable description of */attributes/active_period
type	string
The JSON-API resource type

relationships	{
facility	{
links	{
self	string
Relationship link for facility

related	string
Related facility link

}
data	{
type	string
Type of related facility resource

id	string
Related facility resource id

}
}
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
url	string
x-nullable: true
example: http://www.mbta.com/uploadedfiles/Documents/Schedules_and_Maps/Commuter_Rail/fairmount.pdf?led=6/3/2017%201:22:09%20AM
A URL for extra details, such as outline construction or maintenance plans.

updated_at	string($date-time)
example: 2017-08-14T14:54:01-04:00
Date/Time alert last updated. Format is ISO8601.

timeframe	string
x-nullable: true
example: Ongoing
Summarizes when an alert is in effect.

short_header	string
example: All weekend Fairmount Line trains will be bused between Morton St. & Readville due to construction of Blue Hill Ave Station.
A shortened version of */attributes/header.

severity	integer
minimum: 0
maximum: 10
example: 10
How severe the alert is from least (0) to most (10) severe.

service_effect	string
example: Minor Route 216 delay
Summarizes the service and the impact to that service.

lifecycle	string
example: Ongoing
Identifies whether alert is a new or old, in effect or upcoming.

Value
"NEW"
"ONGOING"
"ONGOING_UPCOMING"
"UPCOMING"
informed_entity	[InformedEntity{
description:	
An entity affected by an alert. At least one of the fields other than activities will be non-null. The affected entity is the intersection of these fields, not the union: if stop and route both have values, the alert does not affect the entire route.

See GTFS Realtime FeedMessage FeedEntity Alert EntitySelector.

activities - The activities affected.
direction_id - The direction of the affected trip. See GTFS trips.txt direction_id.
facility - The facility affected.
route - The route affected. See GTFS routes.txt route_id
route_type - The type of route affected. If present alone, indicates the entire mode of transit is affected. See GTFS routes.txt route_type
stop - The stop affected. See GTFS stops.txt stop_id
trip - The trip affected. See GTFS trips.txt trip_id
trip	string
x-nullable: true
example: CR-Weekday-Spring-17-517
id of the affected Trip.

stop	string
x-nullable: true
example: Auburndale
id of the affected Stop.

route_type	integer
x-nullable: true
example: 2
type of the affected Route.

Value	Name	Example
0	Light Rail	Green Line
1	Heavy Rail	Red Line
2	Commuter Rail	
3	Bus	
4	Ferry	
route	string
x-nullable: true
example: CR-Worcester
id of the affected Route.

facility	string
x-nullable: true
example: 405
id of the affected Facility.

direction_id	integer
x-nullable: true
example: 0
direction_id of the affected Trip.

The meaning of direction_id varies based on the route. You can programmatically get the direction names from /routes /data/{index}/attributes/direction_names or /routes/{id} /data/attributes/direction_names.

Enum:
Array [ 2 ]
activities	[Activitystring
example: BOARD
An activity affected by an alert.

Value	Description
"BOARD"	Boarding a vehicle. Any passenger trip includes boarding a vehicle and exiting from a vehicle.
"BRINGING_BIKE"	Bringing a bicycle while boarding or exiting.
"EXIT"	Exiting from a vehicle (disembarking). Any passenger trip includes boarding a vehicle and exiting a vehicle.
"PARK_CAR"	Parking a car at a garage or lot in a station.
"RIDE"	Riding through a stop without boarding or exiting… Not every passenger trip will include this – a passenger may board at one stop and exit at the next stop.
"STORE_BIKE"	Storing a bicycle at a station.
"USING_ESCALATOR"	Using an escalator while boarding or exiting (should only be used for customers who specifically want to avoid stairs.)
"USING_WHEELCHAIR"	Using a wheelchair while boarding or exiting. Note that this applies to something that specifically affects customers who use a wheelchair to board or exit; a delay should not include this as an affected activity unless it specifically affects customers using wheelchairs.
]
example:List [ "BOARD", "EXIT" ]
description:Activities affected by this alert. If an entity is a station platform, and the alert only impacts those boarding at that platform and no one else, and the activity `"BOARD"` represents customers boarding at the informed entity, then the entity includes `activities` `["BOARD"]`. If the alert affected customers exiting at the platform too, then `activities` is `["BOARD", "EXIT"]`. It should be noted that the `activities` array includes activities that are specifically affected. Thus if there were activities `"BOARD"`, `"EXIT"`, and `"USING_WHEELCHAIR"` [to board or exit], and a station were closed, then the `activities` array would include `"BOARD"` and `"EXIT"` but it would not be necessary to include the activity `"USING_WHEELCHAIR"`. Any rider entering the station who is `"USING_WHEELCHAIR"` is also a rider who `"BOARD"`s. Using a wheelchair to board is not specifically affected.
}]
description:Entities affected by this alert.
image_alternative_text	string
x-nullable: true
example: Shuttle service beginning at North Quincy and ending at Braintree
Text describing the appearance of the linked image in the image field.

image	string
x-nullable: true
example: http://example.com/alert_image.png
URL of an image to be displayed alongside alert.

header	string
example: Starting 6/3, all weekend Fairmount Line trains will be bused between Morton St. and Readville in both directions due to construction of the new Blue Hill Avenue Station.
This plain-text string will be highlighted, for example in boldface. See GTFS Realtime FeedMessage FeedEntity Alert header_text

effect_name	string
example: Delay
Name of the alert

effect	string
example: ACCESS_ISSUE
The effect of this problem on the affected entity.

Value
"ACCESS_ISSUE"
"ADDITIONAL_SERVICE"
"AMBER_ALERT"
"BIKE_ISSUE"
"CANCELLATION"
"DELAY"
"DETOUR"
"DOCK_CLOSURE"
"DOCK_ISSUE"
"ELEVATOR_CLOSURE"
"ESCALATOR_CLOSURE"
"EXTRA_SERVICE"
"FACILITY_ISSUE"
"MODIFIED_SERVICE"
"NO_SERVICE"
"OTHER_EFFECT"
"PARKING_CLOSURE"
"PARKING_ISSUE"
"POLICY_CHANGE"
"SCHEDULE_CHANGE"
"SERVICE_CHANGE"
"SHUTTLE"
"SNOW_ROUTE"
"STATION_CLOSURE"
"STATION_ISSUE"
"STOP_CLOSURE"
"STOP_MOVE"
"STOP_MOVED"
"SUMMARY"
"SUSPENSION"
"TRACK_CHANGE"
"UNKNOWN_EFFECT"
See GTFS Realtime FeedMessage FeedEntity Alert effect

Enum:
Array [ 32 ]
duration_certainty	string
example: UNKNOWN
Value
"UNKNOWN"
"KNOWN"
"ESTIMATED"
Indicates whether an alert has a KNOWN, ESTIMATED, or UNKNOWN duration. KNOWN duration_certainty alerts are expected to end at the specified end time, ESTIMATED duration_certainty alerts have an estimated end time, and UNKNOWN duration_certainty alerts do not have a known or estimated end time.

Enum:
Array [ 3 ]
description	string
x-nullable: true
example: If entering the station, cross Tremont Street to the Boston Common and use Park Street Elevator 978 to the Green Line westbound platform. Red Line platform access is available via the elevator beyond the fare gates. If exiting the station, please travel down the Winter Street Concourse toward Downtown Crossing Station, exit through the fare gates, and take Downtown Crossing Elevator 892 to the street level.
This plain-text string will be formatted as the body of the alert (or shown on an explicit “expand” request by the user). The information in the description should add to the information of the header. See GTFS Realtime FeedMessage FeedEntity Alert description_text

created_at	string($date-time)
example: 2017-08-14T14:54:01-04:00
Date/Time alert created. Format is ISO8601.

cause	string
example: ACCIDENT
What is causing the alert.

Value
"ACCIDENT"
"AMTRAK"
"AN_EARLIER_MECHANICAL_PROBLEM"
"AN_EARLIER_SIGNAL_PROBLEM"
"AUTOS_IMPEDING_SERVICE"
"COAST_GUARD_RESTRICTION"
"CONGESTION"
"CONSTRUCTION"
"CROSSING_MALFUNCTION"
"DEMONSTRATION"
"DISABLED_BUS"
"DISABLED_TRAIN"
"DRAWBRIDGE_BEING_RAISED"
"ELECTRICAL_WORK"
"FIRE"
"FOG"
"FREIGHT_TRAIN_INTERFERENCE"
"HAZMAT_CONDITION"
"HEAVY_RIDERSHIP"
"HIGH_WINDS"
"HOLIDAY"
"HURRICANE"
"ICE_IN_HARBOR"
"MAINTENANCE"
"MECHANICAL_PROBLEM"
"MEDICAL_EMERGENCY"
"PARADE"
"POLICE_ACTION"
"POWER_PROBLEM"
"SEVERE_WEATHER"
"SIGNAL_PROBLEM"
"SLIPPERY_RAIL"
"SNOW"
"SPECIAL_EVENT"
"SPEED_RESTRICTION"
"SWITCH_PROBLEM"
"TIE_REPLACEMENT"
"TRACK_PROBLEM"
"TRACK_WORK"
"TRAFFIC"
"UNRULY_PASSENGER"
"WEATHER"
See GTFS Realtime FeedMessage FeedEntity Alert Cause

Enum:
Array [ 42 ]
banner	string
x-nullable: true
example: All service suspended due to severe weather
Set if alert is meant to be displayed prominently, such as the top of every page.

active_period	[ActivePeriod{
description:	
Start and End dates for active alert

start	string($date-time)
example: 2017-08-14T14:54:01-04:00
Start Date. Format is ISO8601.

end	string($date-time)
x-nullable: true
example: 2017-08-14T14:54:01-04:00
End Date. Format is ISO8601.

}]
description:Date/Time ranges when alert is active. See [GTFS Realtime `FeedMessage` `FeedEntity` `Alert` `active_period`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-alert).
}
}
LineResource{
description:	
Line represents a combination of routes

type	string
The JSON-API resource type

relationships	{
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
text_color	string
example: 000000
This field can be used to specify a legible color to use for text drawn against a background of line_color. The color must be provided as a six-character hexadecimal number, for example, FFD700.

sort_order	integer
Lines sort in ascending order

short_name	string
example: CT2
Short, public-facing name for the group of routes represented in this line

long_name	string
example: Sullivan - Ruggles
Lengthier, public-facing name for the group of routes represented in this line

color	string
example: FFFFFF
In systems that have colors assigned to lines, the route_color field defines a color that corresponds to a line. The color must be provided as a six-character hexadecimal number, for example, 00FFFF.

}
}
ActivePeriod{
description:	
Start and End dates for active alert

start	string($date-time)
example: 2017-08-14T14:54:01-04:00
Start Date. Format is ISO8601.

end	string($date-time)
x-nullable: true
example: 2017-08-14T14:54:01-04:00
End Date. Format is ISO8601.

}
LiveFacility{
description:	
A JSON-API document with a single LiveFacilityResource resource

links	{
self	string
the link that generated the current response document.

}
included	[{
type	string
The JSON-API resource type

id	string
The JSON-API resource ID

}]
description:Included resources
data*	LiveFacilityResource{
description:	
Live data about a given facility.

type	string
The JSON-API resource type

relationships	{
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
updated_at	string($date-time)
example: 2017-08-14T15:38:58-04:00
Time of last update

properties	[FacilityProperty{
description:	
Name/value pair for additional facility information

value	stringinteger
example: 197 Ivory St, Braintree, MA 02184
The value of the property

name	string
example: address
The name of the property

}]
description:A list of name/value pairs that apply to the facility. See [MBTA's facility documentation](https://www.mbta.com/developers/gtfs/f#facilities_properties_definitions) for more information on the possible names and values.
}
}
}
NotAcceptable{
description:	
A JSON-API error document when a request uses an invalid ‘accept’ header

errors*	[{
description:	
A JSON-API error when a request uses an invalid ‘accept’ header

status	string
example: 406
The HTTP status code applicable to the problem

detail	string
example: Content-type text/event-stream is not supported for this kind of request.
Human-readable summary of the problem

code	string
example: not_acceptable
An application-specific error code

}]
minItems:1
maxItems:1
}
Line{
description:	
A JSON-API document with a single LineResource resource

links	{
self	string
the link that generated the current response document.

}
included	[{
type	string
The JSON-API resource type

id	string
The JSON-API resource ID

}]
description:Included resources
data*	LineResource{
description:	
Line represents a combination of routes

type	string
The JSON-API resource type

relationships	{
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
text_color	string
example: 000000
This field can be used to specify a legible color to use for text drawn against a background of line_color. The color must be provided as a six-character hexadecimal number, for example, FFD700.

sort_order	integer
Lines sort in ascending order

short_name	string
example: CT2
Short, public-facing name for the group of routes represented in this line

long_name	string
example: Sullivan - Ruggles
Lengthier, public-facing name for the group of routes represented in this line

color	string
example: FFFFFF
In systems that have colors assigned to lines, the route_color field defines a color that corresponds to a line. The color must be provided as a six-character hexadecimal number, for example, 00FFFF.

}
}
}
Facility{
description:	
A JSON-API document with a single FacilityResource resource

links	{
self	string
the link that generated the current response document.

}
included	[{
type	string
The JSON-API resource type

id	string
The JSON-API resource ID

}]
description:Included resources
data*	FacilityResource{
description:	
Amenities at a station stop (*/relationships/stop) such as elevators, escalators, parking lots, and bike storage.

An MBTA extension. This spec is not yet finalized.

Accessibility
Riders with limited mobility can search any facility, either ELEVATOR or ESCALATOR, while riders that need wheelchair access can search for ELEVATOR only.

The lack of an ELEVATOR MAY NOT make a stop wheelchair inaccessible. Riders should check /stops/{id} /data/attributes/wheelchair_boarding is 1 to guarantee a path is available from the station entrance to the stop or 0 if it MAY be accessible. Completely avoid 2 as that is guaranteed to be INACCESSIBLE.

type	string
The JSON-API resource type

relationships	{
stop	{
links	{
self	string
Relationship link for stop

related	string
Related stop link

}
data	{
type	string
Type of related stop resource

id	string
Related stop resource id

}
}
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
type	string
example: ELEVATOR
The type of the facility.

Enum:
Array [ 18 ]
short_name	string
example: Ashmont platform to lobby
Short name of the facility

properties	[FacilityProperty{
description:	
Name/value pair for additional facility information

value	stringinteger
example: 197 Ivory St, Braintree, MA 02184
The value of the property

name	string
example: address
The name of the property

}]
description:A list of name/value pairs that apply to the facility. See [MBTA's facility documentation](https://www.mbta.com/developers/gtfs/f#facilities_properties_definitions) for more information on the possible names and values.
longitude	number
example: 42.316115
Longitude of the facility. Degrees East, in the WGS-84 coordinate system. See
[GTFS facilities.txt facility_lon]

long_name	string
example: SHAWMUT - Ashmont Bound Platform to Lobby
Name of the facility

latitude	number
example: -71.194994
Latitude of the facility. Degrees North, in the WGS-84 coordinate system. See [GTFS facilities.txt facility_lat]

}
}
}
Trip{
description:	
A JSON-API document with a single TripResource resource

links	{
self	string
the link that generated the current response document.

}
included	[{
type	string
The JSON-API resource type

id	string
The JSON-API resource ID

}]
description:Included resources
data*	TripResource{
description:	
Representation of the journey of a particular vehicle through a given set of stops. See GTFS trips.txt

type	string
The JSON-API resource type

relationships	{
shape	{
links	{
self	string
Relationship link for shape

related	string
Related shape link

}
data	{
type	string
Type of related shape resource

id	string
Related shape resource id

}
}
service	{
links	{
self	string
Relationship link for service

related	string
Related service link

}
data	{
type	string
Type of related service resource

id	string
Related service resource id

}
}
route_pattern	{
links	{
self	string
Relationship link for route_pattern

related	string
Related route_pattern link

}
data	{
type	string
Type of related route_pattern resource

id	string
Related route_pattern resource id

}
}
route	{
links	{
self	string
Relationship link for route

related	string
Related route link

}
data	{
type	string
Type of related route resource

id	string
Related route resource id

}
}
occupancy	{
links	{
self	string
Relationship link for occupancy

related	string
Related occupancy link

}
data	{
type	string
Type of related occupancy resource

id	string
Related occupancy resource id

}
}
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
wheelchair_accessible	integer
example: 1
Indicator of wheelchair accessibility: 0, 1, 2

Wheelchair accessibility (*/attributes/wheelchair_accessible) as defined in GTFS:

Value	Meaning
0	No information
1	Accessible (at stops allowing wheelchair_boarding)
2	Inaccessible
Enum:
Array [ 3 ]
revenue_status	string
example: REVENUE
Value	Description
"REVENUE"	Indicates that the associated trip is accepting passengers.
"NON_REVENUE"	Indicates that the associated trip is not accepting passengers.
name	string
example: 596
The text that appears in schedules and sign boards to identify the trip to passengers, for example, to identify train numbers for commuter rail trips. See GTFS trips.txt trip_short_name

headsign	string
example: Harvard
The text that appears on a sign that identifies the trip’s destination to passengers. See GTFS trips.txt trip_headsign.

direction_id	integer
Direction in which trip is traveling: 0 or 1.

The meaning of direction_id varies based on the route. You can programmatically get the direction names from /routes /data/{index}/attributes/direction_names or /routes/{id} /data/attributes/direction_names.

Enum:
Array [ 2 ]
block_id	string
example: 1070
ID used to group sequential trips with the same vehicle for a given service_id. See GTFS trips.txt block_id

bikes_allowed	integer
example: 1
Indicator of whether or not bikes are allowed on this trip: 0, 1, 2

Bikes allowed (*/attributes/bikes_allowed) as defined in GTFS:

Value	Meaning
0	No information
1	Vehicle being used on this particular trip can accommodate at least one bicycle
2	No bicycles are allowed on this trip
Enum:
Array [ 3 ]
}
}
}
RoutePatterns{
description:	
A page of RoutePatternResource results

links	{
self	string
Link to this page of results

prev	string
Link to the previous page of results

next	string
Link to the next page of results

last	string
Link to the last page of results

first	string
Link to the first page of results

}
data*	[RoutePatternResource{
description:	
Information about the different variations of service that may be run within a single route_id, including when and how often they are operated.
See GTFS `route_patterns.txt for the base specification.

type	string
The JSON-API resource type

relationships	{
route	{
links	{
self	string
Relationship link for route

related	string
Related route link

}
data	{
type	string
Type of related route resource

id	string
Related route resource id

}
}
representative_trip	{
links	{
self	string
Relationship link for representative_trip

related	string
Related representative_trip link

}
data	{
type	string
Type of related representative_trip resource

id	string
Related representative_trip resource id

}
}
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
typicality	integer
Explains how common the route pattern is. For the MBTA, this is within the context of the entire route. Current valid values are:

Value	Description
0	Not defined
1	Typical. Pattern is common for the route. Most routes will have only one such pattern per direction. A few routes may have more than 1, such as the Red Line (with one branch to Ashmont and another to Braintree); routes with more than 2 are rare.
2	Pattern is a deviation from the regular route.
3	Pattern represents a highly atypical pattern for the route, such as a special routing which only runs a handful of times per day.
4	Diversions from normal service, such as planned detours, bus shuttles, or snow routes.
5	Canonical trip patterns.
Enum:
Array [ 6 ]
time_desc	string
x-nullable: true
example: Early mornings only
User-facing description of when the route pattern operate. Not all route patterns will include a time description

sort_order	integer
Can be used to order the route patterns in a way which is ideal for presentation to customers.
Route patterns with smaller sort_order values should be displayed before those with larger values.

name	string
example: Forge Park/495 - South Station via Fairmount
User-facing description of where trips on the route pattern serve.
These names are published in the form
Destination,
Destination via Street or Landmark,
Origin - Destination,
or Origin - Destination via Street or Landmark.
Note that names for bus and subway route patterns currently do not include the origin location,
but will in the future.

direction_id	integer
Direction in which trip is traveling: 0 or 1.

The meaning of direction_id varies based on the route. You can programmatically get the direction names from /routes /data/{index}/attributes/direction_names or /routes/{id} /data/attributes/direction_names.

Enum:
Array [ 2 ]
canonical	boolean
Indicates whether or not the route pattern can be considered canonical and the default set of stops
for the given route and direction.

Value	Description
true	Route pattern should be considered canonical for this route in this direction. If branching regularly occurs, this route-direction may have more than one canonical pattern.
false	Route pattern should be not considered canonical for this route in this direction.
}
}]
description:Content with [RoutePatternResource](#routepatternresource) objects
}
RouteResource{
description:	
Path a vehicle travels during service. See GTFS `routes.txt for the base specification.

type	string
The JSON-API resource type

relationships	{
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
type	integer
example: 1
Value	Name	Example
0	Light Rail	Green Line
1	Heavy Rail	Red Line
2	Commuter Rail	
3	Bus	
4	Ferry	
text_color	string
example: 000000
A legible color to use for text drawn against a background of the route’s color attribute. See GTFS routes.txt route_text_color.

sort_order	integer
Routes sort in ascending order

short_name	string
example: Red
This will often be a short, abstract identifier like "32", "100X", or “Green” that riders use to identify a route, but which doesn’t give any indication of what places the route serves. See GTFS routes.txt route_short_name.

long_name	string
example: Red Line
The full name of a route. This name is generally more descriptive than the short_name and will often include the route’s destination or stop. See GTFS routes.txt route_long_name.

fare_class	string
example: Free
Specifies the fare type of the route, which can differ from the service category.

direction_names	[string
x-nullable: true
The names of direction ids for this route in ascending ordering starting at 0 for the first index.

]
direction_destinations	[string
x-nullable: true
The destinations for direction ids for this route in ascending ordering starting at 0 for the first index.

]
description	string
example: Rapid Transit
Details about stops, schedule, and/or service. See
GTFS routes.txt route_desc.

color	string
example: FFFFFF
A color that corresponds to the route, such as the line color on a map." See GTFS routes.txt route_color.

}
}
LiveFacilityResource{
description:	
Live data about a given facility.

type	string
The JSON-API resource type

relationships	{
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
updated_at	string($date-time)
example: 2017-08-14T15:38:58-04:00
Time of last update

properties	[FacilityProperty{
description:	
Name/value pair for additional facility information

value	stringinteger
example: 197 Ivory St, Braintree, MA 02184
The value of the property

name	string
example: address
The name of the property

}]
description:A list of name/value pairs that apply to the facility. See [MBTA's facility documentation](https://www.mbta.com/developers/gtfs/f#facilities_properties_definitions) for more information on the possible names and values.
}
}
InformedEntity{
description:	
An entity affected by an alert. At least one of the fields other than activities will be non-null. The affected entity is the intersection of these fields, not the union: if stop and route both have values, the alert does not affect the entire route.

See GTFS Realtime FeedMessage FeedEntity Alert EntitySelector.

activities - The activities affected.
direction_id - The direction of the affected trip. See GTFS trips.txt direction_id.
facility - The facility affected.
route - The route affected. See GTFS routes.txt route_id
route_type - The type of route affected. If present alone, indicates the entire mode of transit is affected. See GTFS routes.txt route_type
stop - The stop affected. See GTFS stops.txt stop_id
trip - The trip affected. See GTFS trips.txt trip_id
trip	string
x-nullable: true
example: CR-Weekday-Spring-17-517
id of the affected Trip.

stop	string
x-nullable: true
example: Auburndale
id of the affected Stop.

route_type	integer
x-nullable: true
example: 2
type of the affected Route.

Value	Name	Example
0	Light Rail	Green Line
1	Heavy Rail	Red Line
2	Commuter Rail	
3	Bus	
4	Ferry	
route	string
x-nullable: true
example: CR-Worcester
id of the affected Route.

facility	string
x-nullable: true
example: 405
id of the affected Facility.

direction_id	integer
x-nullable: true
example: 0
direction_id of the affected Trip.

The meaning of direction_id varies based on the route. You can programmatically get the direction names from /routes /data/{index}/attributes/direction_names or /routes/{id} /data/attributes/direction_names.

Enum:
Array [ 2 ]
activities	[Activitystring
example: BOARD
An activity affected by an alert.

Value	Description
"BOARD"	Boarding a vehicle. Any passenger trip includes boarding a vehicle and exiting from a vehicle.
"BRINGING_BIKE"	Bringing a bicycle while boarding or exiting.
"EXIT"	Exiting from a vehicle (disembarking). Any passenger trip includes boarding a vehicle and exiting a vehicle.
"PARK_CAR"	Parking a car at a garage or lot in a station.
"RIDE"	Riding through a stop without boarding or exiting… Not every passenger trip will include this – a passenger may board at one stop and exit at the next stop.
"STORE_BIKE"	Storing a bicycle at a station.
"USING_ESCALATOR"	Using an escalator while boarding or exiting (should only be used for customers who specifically want to avoid stairs.)
"USING_WHEELCHAIR"	Using a wheelchair while boarding or exiting. Note that this applies to something that specifically affects customers who use a wheelchair to board or exit; a delay should not include this as an affected activity unless it specifically affects customers using wheelchairs.
]
example:List [ "BOARD", "EXIT" ]
description:Activities affected by this alert. If an entity is a station platform, and the alert only impacts those boarding at that platform and no one else, and the activity `"BOARD"` represents customers boarding at the informed entity, then the entity includes `activities` `["BOARD"]`. If the alert affected customers exiting at the platform too, then `activities` is `["BOARD", "EXIT"]`. It should be noted that the `activities` array includes activities that are specifically affected. Thus if there were activities `"BOARD"`, `"EXIT"`, and `"USING_WHEELCHAIR"` [to board or exit], and a station were closed, then the `activities` array would include `"BOARD"` and `"EXIT"` but it would not be necessary to include the activity `"USING_WHEELCHAIR"`. Any rider entering the station who is `"USING_WHEELCHAIR"` is also a rider who `"BOARD"`s. Using a wheelchair to board is not specifically affected.
}
Services{
description:	
A page of ServiceResource results

links	{
self	string
Link to this page of results

prev	string
Link to the previous page of results

next	string
Link to the next page of results

last	string
Link to the last page of results

first	string
Link to the first page of results

}
data*	[ServiceResource{
description:	
Service represents a set of dates on which trips run.

type	string
The JSON-API resource type

relationships	{
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
valid_days	[number
example: 1
Day of week. From Monday as 1 to Sunday as 7.

]
start_date	string($date)
example: 2018-11-19
Earliest date which is valid for this service. Format is ISO8601.

schedule_typicality	integer
example: 1
Describes how well this schedule represents typical service for the listed schedule_type

Value	Description
0	Not defined.
1	Typical service with perhaps minor modifications
2	Extra service supplements typical schedules
3	Reduced holiday service is provided by typical Saturday or Sunday schedule
4	Major changes in service due to a planned disruption, such as construction
5	Major reductions in service for weather events or other atypical situations
6	Canonical service contains default stopping patterns for selected routes, including temporarily closed stops; not active on any dates
Enum:
Array [ 7 ]
schedule_type	string
x-nullable: true
example: Sunday
Description of the schedule type the service_id can be applied.
For example, on a holiday, the schedule_type value may be “Saturday” or "Sunday".
Current valid values are "Weekday", "Saturday", "Sunday", or “Other”

schedule_name	string
x-nullable: true
example: Weekday (no school)
Description of when the service_id is in effect.

removed_dates_notes	[string($string)
example: New Year Day
Extra information about exceptional dates (e.g. holiday name)

]
removed_dates	[string($date)
example: 2018-12-17
Exceptional dates when the service is not valid. Format is ISO8601.

]
rating_start_date	string($date)
x-nullable: true
example: 2018-12-22
Earliest date which is a part of the rating (season) which contains this service. Format is ISO8601.

rating_end_date	string($date)
x-nullable: true
example: 2019-03-14
Latest date which is a part of the rating (season) which contains this service. Format is ISO8601.

rating_description	string
x-nullable: true
example: Winter
Human-readable description of the rating (season), as it should appear on public-facing websites and applications.

end_date	string($date)
example: 2018-12-24
Latest date which is valid for this service. Format is ISO8601.

description	string
x-nullable: true
example: Weekday schedule (no school)
Human-readable description of the service, as it should appear on public-facing websites and applications.

added_dates_notes	[string($string)
example: New Year Day
Extra information about additional dates (e.g. holiday name)

]
added_dates	[string($date)
example: 2018-11-21
Aditional dates when the service is valid. Format is ISO8601.

]
}
}]
description:Content with [ServiceResource](#serviceresource) objects
}
TripResource{
description:	
Representation of the journey of a particular vehicle through a given set of stops. See GTFS trips.txt

type	string
The JSON-API resource type

relationships	{
shape	{
links	{
self	string
Relationship link for shape

related	string
Related shape link

}
data	{
type	string
Type of related shape resource

id	string
Related shape resource id

}
}
service	{
links	{
self	string
Relationship link for service

related	string
Related service link

}
data	{
type	string
Type of related service resource

id	string
Related service resource id

}
}
route_pattern	{
links	{
self	string
Relationship link for route_pattern

related	string
Related route_pattern link

}
data	{
type	string
Type of related route_pattern resource

id	string
Related route_pattern resource id

}
}
route	{
links	{
self	string
Relationship link for route

related	string
Related route link

}
data	{
type	string
Type of related route resource

id	string
Related route resource id

}
}
occupancy	{
links	{
self	string
Relationship link for occupancy

related	string
Related occupancy link

}
data	{
type	string
Type of related occupancy resource

id	string
Related occupancy resource id

}
}
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
wheelchair_accessible	integer
example: 1
Indicator of wheelchair accessibility: 0, 1, 2

Wheelchair accessibility (*/attributes/wheelchair_accessible) as defined in GTFS:

Value	Meaning
0	No information
1	Accessible (at stops allowing wheelchair_boarding)
2	Inaccessible
Enum:
Array [ 3 ]
revenue_status	string
example: REVENUE
Value	Description
"REVENUE"	Indicates that the associated trip is accepting passengers.
"NON_REVENUE"	Indicates that the associated trip is not accepting passengers.
name	string
example: 596
The text that appears in schedules and sign boards to identify the trip to passengers, for example, to identify train numbers for commuter rail trips. See GTFS trips.txt trip_short_name

headsign	string
example: Harvard
The text that appears on a sign that identifies the trip’s destination to passengers. See GTFS trips.txt trip_headsign.

direction_id	integer
Direction in which trip is traveling: 0 or 1.

The meaning of direction_id varies based on the route. You can programmatically get the direction names from /routes /data/{index}/attributes/direction_names or /routes/{id} /data/attributes/direction_names.

Enum:
Array [ 2 ]
block_id	string
example: 1070
ID used to group sequential trips with the same vehicle for a given service_id. See GTFS trips.txt block_id

bikes_allowed	integer
example: 1
Indicator of whether or not bikes are allowed on this trip: 0, 1, 2

Bikes allowed (*/attributes/bikes_allowed) as defined in GTFS:

Value	Meaning
0	No information
1	Vehicle being used on this particular trip can accommodate at least one bicycle
2	No bicycles are allowed on this trip
Enum:
Array [ 3 ]
}
}
Alerts{
description:	
A page of AlertResource results

links	{
self	string
Link to this page of results

prev	string
Link to the previous page of results

next	string
Link to the next page of results

last	string
Link to the last page of results

first	string
Link to the first page of results

}
data*	[AlertResource{
description:	
An effect (enumerated in */attributes/effect and human-readable in */attributes/service_effect) on a provided service (facility, route, route type, stop and/or trip in /*/attributes/informed_entity) described by a banner (*/attributes/banner), short header (*/attributes/short_header), header */attributes/header, description (*/attributes/description), image (*/attributes/image), and image alternative text (*/attributes/image_alternative_text) that is active for one or more periods(*/attributes/active_period) caused by a cause (*/attribute/cause) that somewhere in its lifecycle (enumerated in */attributes/lifecycle and human-readable in */attributes/timeframe).

See GTFS Realtime FeedMessage FeedEntity Alert

Descriptions
There are 7 descriptive attributes.

JSON pointer	Usage
*/attributes/banner	Display as alert across application/website
*/attributes/short_header	When */attributes/header is too long to display
*/attributes/header	Used before showing and prepended to */attributes/description
*/attributes/description	Used when user asks to expand alert.
*/attributes/image	URL to descriptive image.
*/attributes/image_alternative_text	Text that describes image linked in url
Effect
JSON pointer	
*/attributes/effect	Enumerated
*/attributes/service_effect	Human-readable
Timeline
There are 3 timeline related attributes

JSON pointer	Description
*/attributes/active_period	Exact Date/Time ranges alert is active
*/attributes/lifecycle	Enumerated, machine-readable description of */attributes/active_period
*/attributes/timeframe	Human-readable description of */attributes/active_period
type	string
The JSON-API resource type

relationships	{
facility	{
links	{
self	string
Relationship link for facility

related	string
Related facility link

}
data	{
type	string
Type of related facility resource

id	string
Related facility resource id

}
}
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
url	string
x-nullable: true
example: http://www.mbta.com/uploadedfiles/Documents/Schedules_and_Maps/Commuter_Rail/fairmount.pdf?led=6/3/2017%201:22:09%20AM
A URL for extra details, such as outline construction or maintenance plans.

updated_at	string($date-time)
example: 2017-08-14T14:54:01-04:00
Date/Time alert last updated. Format is ISO8601.

timeframe	string
x-nullable: true
example: Ongoing
Summarizes when an alert is in effect.

short_header	string
example: All weekend Fairmount Line trains will be bused between Morton St. & Readville due to construction of Blue Hill Ave Station.
A shortened version of */attributes/header.

severity	integer
minimum: 0
maximum: 10
example: 10
How severe the alert is from least (0) to most (10) severe.

service_effect	string
example: Minor Route 216 delay
Summarizes the service and the impact to that service.

lifecycle	string
example: Ongoing
Identifies whether alert is a new or old, in effect or upcoming.

Value
"NEW"
"ONGOING"
"ONGOING_UPCOMING"
"UPCOMING"
informed_entity	[InformedEntity{
description:	
An entity affected by an alert. At least one of the fields other than activities will be non-null. The affected entity is the intersection of these fields, not the union: if stop and route both have values, the alert does not affect the entire route.

See GTFS Realtime FeedMessage FeedEntity Alert EntitySelector.

activities - The activities affected.
direction_id - The direction of the affected trip. See GTFS trips.txt direction_id.
facility - The facility affected.
route - The route affected. See GTFS routes.txt route_id
route_type - The type of route affected. If present alone, indicates the entire mode of transit is affected. See GTFS routes.txt route_type
stop - The stop affected. See GTFS stops.txt stop_id
trip - The trip affected. See GTFS trips.txt trip_id
trip	string
x-nullable: true
example: CR-Weekday-Spring-17-517
id of the affected Trip.

stop	string
x-nullable: true
example: Auburndale
id of the affected Stop.

route_type	integer
x-nullable: true
example: 2
type of the affected Route.

Value	Name	Example
0	Light Rail	Green Line
1	Heavy Rail	Red Line
2	Commuter Rail	
3	Bus	
4	Ferry	
route	string
x-nullable: true
example: CR-Worcester
id of the affected Route.

facility	string
x-nullable: true
example: 405
id of the affected Facility.

direction_id	integer
x-nullable: true
example: 0
direction_id of the affected Trip.

The meaning of direction_id varies based on the route. You can programmatically get the direction names from /routes /data/{index}/attributes/direction_names or /routes/{id} /data/attributes/direction_names.

Enum:
Array [ 2 ]
activities	[Activitystring
example: BOARD
An activity affected by an alert.

Value	Description
"BOARD"	Boarding a vehicle. Any passenger trip includes boarding a vehicle and exiting from a vehicle.
"BRINGING_BIKE"	Bringing a bicycle while boarding or exiting.
"EXIT"	Exiting from a vehicle (disembarking). Any passenger trip includes boarding a vehicle and exiting a vehicle.
"PARK_CAR"	Parking a car at a garage or lot in a station.
"RIDE"	Riding through a stop without boarding or exiting… Not every passenger trip will include this – a passenger may board at one stop and exit at the next stop.
"STORE_BIKE"	Storing a bicycle at a station.
"USING_ESCALATOR"	Using an escalator while boarding or exiting (should only be used for customers who specifically want to avoid stairs.)
"USING_WHEELCHAIR"	Using a wheelchair while boarding or exiting. Note that this applies to something that specifically affects customers who use a wheelchair to board or exit; a delay should not include this as an affected activity unless it specifically affects customers using wheelchairs.
]
example:List [ "BOARD", "EXIT" ]
description:Activities affected by this alert. If an entity is a station platform, and the alert only impacts those boarding at that platform and no one else, and the activity `"BOARD"` represents customers boarding at the informed entity, then the entity includes `activities` `["BOARD"]`. If the alert affected customers exiting at the platform too, then `activities` is `["BOARD", "EXIT"]`. It should be noted that the `activities` array includes activities that are specifically affected. Thus if there were activities `"BOARD"`, `"EXIT"`, and `"USING_WHEELCHAIR"` [to board or exit], and a station were closed, then the `activities` array would include `"BOARD"` and `"EXIT"` but it would not be necessary to include the activity `"USING_WHEELCHAIR"`. Any rider entering the station who is `"USING_WHEELCHAIR"` is also a rider who `"BOARD"`s. Using a wheelchair to board is not specifically affected.
}]
description:Entities affected by this alert.
image_alternative_text	string
x-nullable: true
example: Shuttle service beginning at North Quincy and ending at Braintree
Text describing the appearance of the linked image in the image field.

image	string
x-nullable: true
example: http://example.com/alert_image.png
URL of an image to be displayed alongside alert.

header	string
example: Starting 6/3, all weekend Fairmount Line trains will be bused between Morton St. and Readville in both directions due to construction of the new Blue Hill Avenue Station.
This plain-text string will be highlighted, for example in boldface. See GTFS Realtime FeedMessage FeedEntity Alert header_text

effect_name	string
example: Delay
Name of the alert

effect	string
example: ACCESS_ISSUE
The effect of this problem on the affected entity.

Value
"ACCESS_ISSUE"
"ADDITIONAL_SERVICE"
"AMBER_ALERT"
"BIKE_ISSUE"
"CANCELLATION"
"DELAY"
"DETOUR"
"DOCK_CLOSURE"
"DOCK_ISSUE"
"ELEVATOR_CLOSURE"
"ESCALATOR_CLOSURE"
"EXTRA_SERVICE"
"FACILITY_ISSUE"
"MODIFIED_SERVICE"
"NO_SERVICE"
"OTHER_EFFECT"
"PARKING_CLOSURE"
"PARKING_ISSUE"
"POLICY_CHANGE"
"SCHEDULE_CHANGE"
"SERVICE_CHANGE"
"SHUTTLE"
"SNOW_ROUTE"
"STATION_CLOSURE"
"STATION_ISSUE"
"STOP_CLOSURE"
"STOP_MOVE"
"STOP_MOVED"
"SUMMARY"
"SUSPENSION"
"TRACK_CHANGE"
"UNKNOWN_EFFECT"
See GTFS Realtime FeedMessage FeedEntity Alert effect

Enum:
Array [ 32 ]
duration_certainty	string
example: UNKNOWN
Value
"UNKNOWN"
"KNOWN"
"ESTIMATED"
Indicates whether an alert has a KNOWN, ESTIMATED, or UNKNOWN duration. KNOWN duration_certainty alerts are expected to end at the specified end time, ESTIMATED duration_certainty alerts have an estimated end time, and UNKNOWN duration_certainty alerts do not have a known or estimated end time.

Enum:
Array [ 3 ]
description	string
x-nullable: true
example: If entering the station, cross Tremont Street to the Boston Common and use Park Street Elevator 978 to the Green Line westbound platform. Red Line platform access is available via the elevator beyond the fare gates. If exiting the station, please travel down the Winter Street Concourse toward Downtown Crossing Station, exit through the fare gates, and take Downtown Crossing Elevator 892 to the street level.
This plain-text string will be formatted as the body of the alert (or shown on an explicit “expand” request by the user). The information in the description should add to the information of the header. See GTFS Realtime FeedMessage FeedEntity Alert description_text

created_at	string($date-time)
example: 2017-08-14T14:54:01-04:00
Date/Time alert created. Format is ISO8601.

cause	string
example: ACCIDENT
What is causing the alert.

Value
"ACCIDENT"
"AMTRAK"
"AN_EARLIER_MECHANICAL_PROBLEM"
"AN_EARLIER_SIGNAL_PROBLEM"
"AUTOS_IMPEDING_SERVICE"
"COAST_GUARD_RESTRICTION"
"CONGESTION"
"CONSTRUCTION"
"CROSSING_MALFUNCTION"
"DEMONSTRATION"
"DISABLED_BUS"
"DISABLED_TRAIN"
"DRAWBRIDGE_BEING_RAISED"
"ELECTRICAL_WORK"
"FIRE"
"FOG"
"FREIGHT_TRAIN_INTERFERENCE"
"HAZMAT_CONDITION"
"HEAVY_RIDERSHIP"
"HIGH_WINDS"
"HOLIDAY"
"HURRICANE"
"ICE_IN_HARBOR"
"MAINTENANCE"
"MECHANICAL_PROBLEM"
"MEDICAL_EMERGENCY"
"PARADE"
"POLICE_ACTION"
"POWER_PROBLEM"
"SEVERE_WEATHER"
"SIGNAL_PROBLEM"
"SLIPPERY_RAIL"
"SNOW"
"SPECIAL_EVENT"
"SPEED_RESTRICTION"
"SWITCH_PROBLEM"
"TIE_REPLACEMENT"
"TRACK_PROBLEM"
"TRACK_WORK"
"TRAFFIC"
"UNRULY_PASSENGER"
"WEATHER"
See GTFS Realtime FeedMessage FeedEntity Alert Cause

Enum:
Array [ 42 ]
banner	string
x-nullable: true
example: All service suspended due to severe weather
Set if alert is meant to be displayed prominently, such as the top of every page.

active_period	[ActivePeriod{
description:	
Start and End dates for active alert

start	string($date-time)
example: 2017-08-14T14:54:01-04:00
Start Date. Format is ISO8601.

end	string($date-time)
x-nullable: true
example: 2017-08-14T14:54:01-04:00
End Date. Format is ISO8601.

}]
description:Date/Time ranges when alert is active. See [GTFS Realtime `FeedMessage` `FeedEntity` `Alert` `active_period`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-alert).
}
}]
description:Content with [AlertResource](#alertresource) objects
}
Vehicle{
description:	
A JSON-API document with a single VehicleResource resource

links	{
self	string
the link that generated the current response document.

}
included	[{
type	string
The JSON-API resource type

id	string
The JSON-API resource ID

}]
description:Included resources
data*	VehicleResource{
description:	
Current state of a vehicle on a trip.

type	string
The JSON-API resource type

relationships	{
trip	{
links	{
self	string
Relationship link for trip

related	string
Related trip link

}
data	{
type	string
Type of related trip resource

id	string
Related trip resource id

}
}
stop	{
links	{
self	string
Relationship link for stop

related	string
Related stop link

}
data	{
type	string
Type of related stop resource

id	string
Related stop resource id

}
}
route	{
links	{
self	string
Relationship link for route

related	string
Related route link

}
data	{
type	string
Type of related route resource

id	string
Related route resource id

}
}
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
updated_at	string($date-time)
example: 2017-08-14T16:04:44-04:00
Time at which vehicle information was last updated. Format is ISO8601.

speed	number
example: 16
Speed that the vehicle is traveling in meters per second. See GTFS-realtime Position speed.

revenue_status	string
example: REVENUE
Value	Description
"REVENUE"	Indicates that the associated trip is accepting passengers.
"NON_REVENUE"	Indicates that the associated trip is not accepting passengers.
occupancy_status	string
x-nullable: true
example: FEW_SEATS_AVAILABLE
The degree of passenger occupancy for the vehicle. See GTFS-realtime OccupancyStatus.

Value	Description
MANY_SEATS_AVAILABLE	Not crowded: the vehicle has a large percentage of seats available.
FEW_SEATS_AVAILABLE	Some crowding: the vehicle has a small percentage of seats available.
STANDING_ROOM_ONLY	Standing room only: the vehicle can currently accommodate only standing passengers.
CRUSHED_STANDING_ROOM_ONLY	Crushed standing room: the vehicle can currently accommodate only standing passengers and has limited space for them.
FULL	Crowded: the vehicle is considered full by most measures, but may still be allowing passengers to board.
NOT_ACCEPTING_PASSENGERS	Not accepting passengers: the vehicle is not accepting passengers, the vehicle or carriage usually accepts passengers for boarding.
NO_DATA_AVAILABLE	No data available: the vehicle doesn’t have any occupancy data available at that time.
longitude	number
example: 42.32941818237305
Longitude of the vehicle’s current position. Degrees East, in the WGS-84 coordinate system. See GTFS-realtime Position longitude.

latitude	number
example: -71.27239990234375
Latitude of the vehicle’s current position. Degrees North, in the WGS-84 coordinate system. See GTFS-realtime Position latitude.

label	string
example: 1817
User visible label, such as the one of on the signage on the vehicle. See GTFS-realtime VehicleDescriptor label.

direction_id	integer
Direction in which trip is traveling: 0 or 1.

The meaning of direction_id varies based on the route. You can programmatically get the direction names from /routes /data/{index}/attributes/direction_names or /routes/{id} /data/attributes/direction_names.

Enum:
Array [ 2 ]
current_stop_sequence	integer
example: 8
Index of current stop along trip. See GTFS-realtime VehiclePosition current_stop_sequence

current_status	string
example: IN_TRANSIT_TO
Status of vehicle relative to the stops. See GTFS-realtime VehicleStopStatus.

Value	Description
INCOMING_AT	The vehicle is just about to arrive at the stop (on a stop display, the vehicle symbol typically flashes).
STOPPED_AT	The vehicle is standing at the stop.
IN_TRANSIT_TO	The vehicle has departed the previous stop and is in transit.
carriages	[{
occupancy_status	string
The degree of passenger occupancy for the vehicle. See GTFS-realtime OccupancyStatus.

Value	Description
MANY_SEATS_AVAILABLE	Not crowded: the vehicle has a large percentage of seats available.
FEW_SEATS_AVAILABLE	Some crowding: the vehicle has a small percentage of seats available.
STANDING_ROOM_ONLY	Standing room only: the vehicle can currently accommodate only standing passengers.
CRUSHED_STANDING_ROOM_ONLY	Crushed standing room: the vehicle can currently accommodate only standing passengers and has limited space for them.
FULL	Crowded: the vehicle is considered full by most measures, but may still be allowing passengers to board.
NOT_ACCEPTING_PASSENGERS	Not accepting passengers: the vehicle is not accepting passengers, the vehicle or carriage usually accepts passengers for boarding.
NO_DATA_AVAILABLE	No data available: the vehicle doesn’t have any occupancy data available at that time.
Enum:
Array [ 9 ]
occupancy_percentage	integer
Percentage of vehicle occupied, calculated via weight average

label	string
Carriage-specific label, used as an identifier

}]
x-nullable:true
minLength:0
example:List [ OrderedMap { "occupancy_status": "MANY_SEATS_AVAILABLE", "occupancy_percentage": 80, "label": "some-carriage" } ]
description:Carriage-level crowding details. See [GTFS-realtime multi_carriage_details](https://gtfs.org/realtime/reference/#message-CarriageDetails).
bearing	integer
example: 174
Bearing, in degrees, clockwise from True North, i.e., 0 is North and 90 is East. This can be the compass bearing, or the direction towards the next stop or intermediate location. See GTFS-realtime Position bearing.

}
}
}
RoutePatternResource{
description:	
Information about the different variations of service that may be run within a single route_id, including when and how often they are operated.
See GTFS `route_patterns.txt for the base specification.

type	string
The JSON-API resource type

relationships	{
route	{
links	{
self	string
Relationship link for route

related	string
Related route link

}
data	{
type	string
Type of related route resource

id	string
Related route resource id

}
}
representative_trip	{
links	{
self	string
Relationship link for representative_trip

related	string
Related representative_trip link

}
data	{
type	string
Type of related representative_trip resource

id	string
Related representative_trip resource id

}
}
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
typicality	integer
Explains how common the route pattern is. For the MBTA, this is within the context of the entire route. Current valid values are:

Value	Description
0	Not defined
1	Typical. Pattern is common for the route. Most routes will have only one such pattern per direction. A few routes may have more than 1, such as the Red Line (with one branch to Ashmont and another to Braintree); routes with more than 2 are rare.
2	Pattern is a deviation from the regular route.
3	Pattern represents a highly atypical pattern for the route, such as a special routing which only runs a handful of times per day.
4	Diversions from normal service, such as planned detours, bus shuttles, or snow routes.
5	Canonical trip patterns.
Enum:
Array [ 6 ]
time_desc	string
x-nullable: true
example: Early mornings only
User-facing description of when the route pattern operate. Not all route patterns will include a time description

sort_order	integer
Can be used to order the route patterns in a way which is ideal for presentation to customers.
Route patterns with smaller sort_order values should be displayed before those with larger values.

name	string
example: Forge Park/495 - South Station via Fairmount
User-facing description of where trips on the route pattern serve.
These names are published in the form
Destination,
Destination via Street or Landmark,
Origin - Destination,
or Origin - Destination via Street or Landmark.
Note that names for bus and subway route patterns currently do not include the origin location,
but will in the future.

direction_id	integer
Direction in which trip is traveling: 0 or 1.

The meaning of direction_id varies based on the route. You can programmatically get the direction names from /routes /data/{index}/attributes/direction_names or /routes/{id} /data/attributes/direction_names.

Enum:
Array [ 2 ]
canonical	boolean
Indicates whether or not the route pattern can be considered canonical and the default set of stops
for the given route and direction.

Value	Description
true	Route pattern should be considered canonical for this route in this direction. If branching regularly occurs, this route-direction may have more than one canonical pattern.
false	Route pattern should be not considered canonical for this route in this direction.
}
}
Schedules{
description:	
A page of ScheduleResource results

links	{
self	string
Link to this page of results

prev	string
Link to the previous page of results

next	string
Link to the next page of results

last	string
Link to the last page of results

first	string
Link to the first page of results

}
data*	[ScheduleResource{
description:	
A schedule is the arrival drop off (*/attributes/drop_off_type) time (*/attributes/arrival_time) and departure pick up (*/attributes/pickup_type) time (*/attributes/departure_time) to/from a stop (*/relationships/stop/data/id) at a given sequence (*/attributes/stop_sequence) along a trip (*/relationships/trip/data/id) going in a direction (*/attributes/direction_id) on a route (*/relationships/route/data/id) when the trip is following a service (*/relationships/service/data/id) to determine when it is active.

See GTFS stop_times.txt for base specification.

type	string
The JSON-API resource type

relationships	{
trip	{
links	{
self	string
Relationship link for trip

related	string
Related trip link

}
data	{
type	string
Type of related trip resource

id	string
Related trip resource id

}
}
stop	{
links	{
self	string
Relationship link for stop

related	string
Related stop link

}
data	{
type	string
Type of related stop resource

id	string
Related stop resource id

}
}
route	{
links	{
self	string
Relationship link for route

related	string
Related route link

}
data	{
type	string
Type of related route resource

id	string
Related route resource id

}
}
prediction	{
links	{
self	string
Relationship link for prediction

related	string
Related prediction link

}
data	{
type	string
Type of related prediction resource

id	string
Related prediction resource id

}
}
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
timepoint	boolean
example: false
Value	*/attributes/arrival_time and */attributes/departure_time
true	Exact
false	Estimates
See GTFS stop_times.txt timepoint

stop_sequence	integer
example: 1
The sequence the stop_id is arrived at during the trip_id. The stop sequence is monotonically increasing along the trip, but the stop_sequence along the trip_id are not necessarily consecutive. See GTFS stop_times.txt stop_sequence

stop_headsign	string
x-nullable: true
example: Foxboro via Back Bay
Text identifying destination of the trip, overriding trip-level headsign if present.See GTFS stop_times.txt stop_headsign

pickup_type	integer
example: 0
How the vehicle departs from stop_id.

Value	Description
0	Regularly scheduled pickup
1	No pickup available
2	Must phone agency to arrange pickup
3	Must coordinate with driver to arrange pickup
See GTFS stop_times.txt pickup_type

Enum:
Array [ 4 ]
drop_off_type	integer
example: 1
How the vehicle arrives at stop_id.

Value	Description
0	Regularly scheduled drop off
1	No drop off available
2	Must phone agency to arrange pickup
3	Must coordinate with driver to arrange pickup
See GTFS stop_times.txt drop_off_type

Enum:
Array [ 4 ]
direction_id	integer
Direction in which trip is traveling: 0 or 1.

The meaning of direction_id varies based on the route. You can programmatically get the direction names from /routes /data/{index}/attributes/direction_names or /routes/{id} /data/attributes/direction_names.

Enum:
Array [ 2 ]
departure_time	string($date-time)
example: 2017-08-14T15:04:00-04:00
Time when the trip departs the given stop. See GTFS stop_times.txt departure_time
Format is ISO8601.

arrival_time	string($date-time)
example: 2017-08-14T15:04:00-04:00
Time when the trip arrives at the given stop. See GTFS stop_times.txt arrival_time
Format is ISO8601.

}
}]
description:Content with [ScheduleResource](#scheduleresource) objects
}
OccupancyResource{
description:	
An expected or predicted level of occupancy for a given trip.

type	string
The JSON-API resource type

relationships	{
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
status	string
example: SOME_CROWDING
The degree of passenger occupancy for the vehicle. See GTFS-realtime OccupancyStatus.

Value	Description
MANY_SEATS_AVAILABLE	Not crowded: the vehicle has a large percentage of seats available.
FEW_SEATS_AVAILABLE	Some crowding: the vehicle has a small percentage of seats available.
STANDING_ROOM_ONLY	Standing room only: the vehicle can currently accommodate only standing passengers.
CRUSHED_STANDING_ROOM_ONLY	Crushed standing room: the vehicle can currently accommodate only standing passengers and has limited space for them.
FULL	Crowded: the vehicle is considered full by most measures, but may still be allowing passengers to board.
NOT_ACCEPTING_PASSENGERS	Not accepting passengers: the vehicle is not accepting passengers, the vehicle or carriage usually accepts passengers for boarding.
NO_DATA_AVAILABLE	No data available: the vehicle doesn’t have any occupancy data available at that time.
percentage	integer
x-nullable: true
example: 55
Percentage of seats occupied.

}
}
Service{
description:	
A JSON-API document with a single ServiceResource resource

links	{
self	string
the link that generated the current response document.

}
included	[{
type	string
The JSON-API resource type

id	string
The JSON-API resource ID

}]
description:Included resources
data*	ServiceResource{
description:	
Service represents a set of dates on which trips run.

type	string
The JSON-API resource type

relationships	{
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
valid_days	[number
example: 1
Day of week. From Monday as 1 to Sunday as 7.

]
start_date	string($date)
example: 2018-11-19
Earliest date which is valid for this service. Format is ISO8601.

schedule_typicality	integer
example: 1
Describes how well this schedule represents typical service for the listed schedule_type

Value	Description
0	Not defined.
1	Typical service with perhaps minor modifications
2	Extra service supplements typical schedules
3	Reduced holiday service is provided by typical Saturday or Sunday schedule
4	Major changes in service due to a planned disruption, such as construction
5	Major reductions in service for weather events or other atypical situations
6	Canonical service contains default stopping patterns for selected routes, including temporarily closed stops; not active on any dates
Enum:
Array [ 7 ]
schedule_type	string
x-nullable: true
example: Sunday
Description of the schedule type the service_id can be applied.
For example, on a holiday, the schedule_type value may be “Saturday” or "Sunday".
Current valid values are "Weekday", "Saturday", "Sunday", or “Other”

schedule_name	string
x-nullable: true
example: Weekday (no school)
Description of when the service_id is in effect.

removed_dates_notes	[string($string)
example: New Year Day
Extra information about exceptional dates (e.g. holiday name)

]
removed_dates	[string($date)
example: 2018-12-17
Exceptional dates when the service is not valid. Format is ISO8601.

]
rating_start_date	string($date)
x-nullable: true
example: 2018-12-22
Earliest date which is a part of the rating (season) which contains this service. Format is ISO8601.

rating_end_date	string($date)
x-nullable: true
example: 2019-03-14
Latest date which is a part of the rating (season) which contains this service. Format is ISO8601.

rating_description	string
x-nullable: true
example: Winter
Human-readable description of the rating (season), as it should appear on public-facing websites and applications.

end_date	string($date)
example: 2018-12-24
Latest date which is valid for this service. Format is ISO8601.

description	string
x-nullable: true
example: Weekday schedule (no school)
Human-readable description of the service, as it should appear on public-facing websites and applications.

added_dates_notes	[string($string)
example: New Year Day
Extra information about additional dates (e.g. holiday name)

]
added_dates	[string($date)
example: 2018-11-21
Aditional dates when the service is valid. Format is ISO8601.

]
}
}
}
Facilities{
description:	
A page of FacilityResource results

links	{
self	string
Link to this page of results

prev	string
Link to the previous page of results

next	string
Link to the next page of results

last	string
Link to the last page of results

first	string
Link to the first page of results

}
data*	[FacilityResource{
description:	
Amenities at a station stop (*/relationships/stop) such as elevators, escalators, parking lots, and bike storage.

An MBTA extension. This spec is not yet finalized.

Accessibility
Riders with limited mobility can search any facility, either ELEVATOR or ESCALATOR, while riders that need wheelchair access can search for ELEVATOR only.

The lack of an ELEVATOR MAY NOT make a stop wheelchair inaccessible. Riders should check /stops/{id} /data/attributes/wheelchair_boarding is 1 to guarantee a path is available from the station entrance to the stop or 0 if it MAY be accessible. Completely avoid 2 as that is guaranteed to be INACCESSIBLE.

type	string
The JSON-API resource type

relationships	{
stop	{
links	{
self	string
Relationship link for stop

related	string
Related stop link

}
data	{
type	string
Type of related stop resource

id	string
Related stop resource id

}
}
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
type	string
example: ELEVATOR
The type of the facility.

Enum:
Array [ 18 ]
short_name	string
example: Ashmont platform to lobby
Short name of the facility

properties	[FacilityProperty{
description:	
Name/value pair for additional facility information

value	stringinteger
example: 197 Ivory St, Braintree, MA 02184
The value of the property

name	string
example: address
The name of the property

}]
description:A list of name/value pairs that apply to the facility. See [MBTA's facility documentation](https://www.mbta.com/developers/gtfs/f#facilities_properties_definitions) for more information on the possible names and values.
longitude	number
example: 42.316115
Longitude of the facility. Degrees East, in the WGS-84 coordinate system. See
[GTFS facilities.txt facility_lon]

long_name	string
example: SHAWMUT - Ashmont Bound Platform to Lobby
Name of the facility

latitude	number
example: -71.194994
Latitude of the facility. Degrees North, in the WGS-84 coordinate system. See [GTFS facilities.txt facility_lat]

}
}]
description:Content with [FacilityResource](#facilityresource) objects
}
Shapes{
description:	
A page of ShapeResource results

links	{
self	string
Link to this page of results

prev	string
Link to the previous page of results

next	string
Link to the next page of results

last	string
Link to the last page of results

first	string
Link to the first page of results

}
data*	[ShapeResource{
description:	
Sequence of geographic points representing a path vehicles will travel on a trip. See GTFS shapes.txt.

type	string
The JSON-API resource type

relationships	{
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
polyline	string
The sequence of points in Encoded Polyline Algorithm Format.
Libraries for decoding polylines are available in many languages, for example:

Elixir
JavaScript
Python
}
}]
description:Content with [ShapeResource](#shaperesource) objects
}
ShapeResource{
description:	
Sequence of geographic points representing a path vehicles will travel on a trip. See GTFS shapes.txt.

type	string
The JSON-API resource type

relationships	{
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
polyline	string
The sequence of points in Encoded Polyline Algorithm Format.
Libraries for decoding polylines are available in many languages, for example:

Elixir
JavaScript
Python
}
}
ScheduleResource{
description:	
A schedule is the arrival drop off (*/attributes/drop_off_type) time (*/attributes/arrival_time) and departure pick up (*/attributes/pickup_type) time (*/attributes/departure_time) to/from a stop (*/relationships/stop/data/id) at a given sequence (*/attributes/stop_sequence) along a trip (*/relationships/trip/data/id) going in a direction (*/attributes/direction_id) on a route (*/relationships/route/data/id) when the trip is following a service (*/relationships/service/data/id) to determine when it is active.

See GTFS stop_times.txt for base specification.

type	string
The JSON-API resource type

relationships	{
trip	{
links	{
self	string
Relationship link for trip

related	string
Related trip link

}
data	{
type	string
Type of related trip resource

id	string
Related trip resource id

}
}
stop	{
links	{
self	string
Relationship link for stop

related	string
Related stop link

}
data	{
type	string
Type of related stop resource

id	string
Related stop resource id

}
}
route	{
links	{
self	string
Relationship link for route

related	string
Related route link

}
data	{
type	string
Type of related route resource

id	string
Related route resource id

}
}
prediction	{
links	{
self	string
Relationship link for prediction

related	string
Related prediction link

}
data	{
type	string
Type of related prediction resource

id	string
Related prediction resource id

}
}
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
timepoint	boolean
example: false
Value	*/attributes/arrival_time and */attributes/departure_time
true	Exact
false	Estimates
See GTFS stop_times.txt timepoint

stop_sequence	integer
example: 1
The sequence the stop_id is arrived at during the trip_id. The stop sequence is monotonically increasing along the trip, but the stop_sequence along the trip_id are not necessarily consecutive. See GTFS stop_times.txt stop_sequence

stop_headsign	string
x-nullable: true
example: Foxboro via Back Bay
Text identifying destination of the trip, overriding trip-level headsign if present.See GTFS stop_times.txt stop_headsign

pickup_type	integer
example: 0
How the vehicle departs from stop_id.

Value	Description
0	Regularly scheduled pickup
1	No pickup available
2	Must phone agency to arrange pickup
3	Must coordinate with driver to arrange pickup
See GTFS stop_times.txt pickup_type

Enum:
Array [ 4 ]
drop_off_type	integer
example: 1
How the vehicle arrives at stop_id.

Value	Description
0	Regularly scheduled drop off
1	No drop off available
2	Must phone agency to arrange pickup
3	Must coordinate with driver to arrange pickup
See GTFS stop_times.txt drop_off_type

Enum:
Array [ 4 ]
direction_id	integer
Direction in which trip is traveling: 0 or 1.

The meaning of direction_id varies based on the route. You can programmatically get the direction names from /routes /data/{index}/attributes/direction_names or /routes/{id} /data/attributes/direction_names.

Enum:
Array [ 2 ]
departure_time	string($date-time)
example: 2017-08-14T15:04:00-04:00
Time when the trip departs the given stop. See GTFS stop_times.txt departure_time
Format is ISO8601.

arrival_time	string($date-time)
example: 2017-08-14T15:04:00-04:00
Time when the trip arrives at the given stop. See GTFS stop_times.txt arrival_time
Format is ISO8601.

}
}
Forbidden{
description:	
A JSON-API error document when the API key is invalid

errors*	[{
description:	
A JSON-API error when an invalid API key is received

status	string
example: 403
The HTTP status code applicable to the problem

code	string
example: forbidden
An application-specific error code

}]
minItems:1
maxItems:1
}
ServiceResource{
description:	
Service represents a set of dates on which trips run.

type	string
The JSON-API resource type

relationships	{
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
valid_days	[number
example: 1
Day of week. From Monday as 1 to Sunday as 7.

]
start_date	string($date)
example: 2018-11-19
Earliest date which is valid for this service. Format is ISO8601.

schedule_typicality	integer
example: 1
Describes how well this schedule represents typical service for the listed schedule_type

Value	Description
0	Not defined.
1	Typical service with perhaps minor modifications
2	Extra service supplements typical schedules
3	Reduced holiday service is provided by typical Saturday or Sunday schedule
4	Major changes in service due to a planned disruption, such as construction
5	Major reductions in service for weather events or other atypical situations
6	Canonical service contains default stopping patterns for selected routes, including temporarily closed stops; not active on any dates
Enum:
Array [ 7 ]
schedule_type	string
x-nullable: true
example: Sunday
Description of the schedule type the service_id can be applied.
For example, on a holiday, the schedule_type value may be “Saturday” or "Sunday".
Current valid values are "Weekday", "Saturday", "Sunday", or “Other”

schedule_name	string
x-nullable: true
example: Weekday (no school)
Description of when the service_id is in effect.

removed_dates_notes	[string($string)
example: New Year Day
Extra information about exceptional dates (e.g. holiday name)

]
removed_dates	[string($date)
example: 2018-12-17
Exceptional dates when the service is not valid. Format is ISO8601.

]
rating_start_date	string($date)
x-nullable: true
example: 2018-12-22
Earliest date which is a part of the rating (season) which contains this service. Format is ISO8601.

rating_end_date	string($date)
x-nullable: true
example: 2019-03-14
Latest date which is a part of the rating (season) which contains this service. Format is ISO8601.

rating_description	string
x-nullable: true
example: Winter
Human-readable description of the rating (season), as it should appear on public-facing websites and applications.

end_date	string($date)
example: 2018-12-24
Latest date which is valid for this service. Format is ISO8601.

description	string
x-nullable: true
example: Weekday schedule (no school)
Human-readable description of the service, as it should appear on public-facing websites and applications.

added_dates_notes	[string($string)
example: New Year Day
Extra information about additional dates (e.g. holiday name)

]
added_dates	[string($date)
example: 2018-11-21
Aditional dates when the service is valid. Format is ISO8601.

]
}
}
Activitystring
example: BOARD
An activity affected by an alert.

Value	Description
"BOARD"	Boarding a vehicle. Any passenger trip includes boarding a vehicle and exiting from a vehicle.
"BRINGING_BIKE"	Bringing a bicycle while boarding or exiting.
"EXIT"	Exiting from a vehicle (disembarking). Any passenger trip includes boarding a vehicle and exiting a vehicle.
"PARK_CAR"	Parking a car at a garage or lot in a station.
"RIDE"	Riding through a stop without boarding or exiting… Not every passenger trip will include this – a passenger may board at one stop and exit at the next stop.
"STORE_BIKE"	Storing a bicycle at a station.
"USING_ESCALATOR"	Using an escalator while boarding or exiting (should only be used for customers who specifically want to avoid stairs.)
"USING_WHEELCHAIR"	Using a wheelchair while boarding or exiting. Note that this applies to something that specifically affects customers who use a wheelchair to board or exit; a delay should not include this as an affected activity unless it specifically affects customers using wheelchairs.
VehicleResource{
description:	
Current state of a vehicle on a trip.

type	string
The JSON-API resource type

relationships	{
trip	{
links	{
self	string
Relationship link for trip

related	string
Related trip link

}
data	{
type	string
Type of related trip resource

id	string
Related trip resource id

}
}
stop	{
links	{
self	string
Relationship link for stop

related	string
Related stop link

}
data	{
type	string
Type of related stop resource

id	string
Related stop resource id

}
}
route	{
links	{
self	string
Relationship link for route

related	string
Related route link

}
data	{
type	string
Type of related route resource

id	string
Related route resource id

}
}
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
updated_at	string($date-time)
example: 2017-08-14T16:04:44-04:00
Time at which vehicle information was last updated. Format is ISO8601.

speed	number
example: 16
Speed that the vehicle is traveling in meters per second. See GTFS-realtime Position speed.

revenue_status	string
example: REVENUE
Value	Description
"REVENUE"	Indicates that the associated trip is accepting passengers.
"NON_REVENUE"	Indicates that the associated trip is not accepting passengers.
occupancy_status	string
x-nullable: true
example: FEW_SEATS_AVAILABLE
The degree of passenger occupancy for the vehicle. See GTFS-realtime OccupancyStatus.

Value	Description
MANY_SEATS_AVAILABLE	Not crowded: the vehicle has a large percentage of seats available.
FEW_SEATS_AVAILABLE	Some crowding: the vehicle has a small percentage of seats available.
STANDING_ROOM_ONLY	Standing room only: the vehicle can currently accommodate only standing passengers.
CRUSHED_STANDING_ROOM_ONLY	Crushed standing room: the vehicle can currently accommodate only standing passengers and has limited space for them.
FULL	Crowded: the vehicle is considered full by most measures, but may still be allowing passengers to board.
NOT_ACCEPTING_PASSENGERS	Not accepting passengers: the vehicle is not accepting passengers, the vehicle or carriage usually accepts passengers for boarding.
NO_DATA_AVAILABLE	No data available: the vehicle doesn’t have any occupancy data available at that time.
longitude	number
example: 42.32941818237305
Longitude of the vehicle’s current position. Degrees East, in the WGS-84 coordinate system. See GTFS-realtime Position longitude.

latitude	number
example: -71.27239990234375
Latitude of the vehicle’s current position. Degrees North, in the WGS-84 coordinate system. See GTFS-realtime Position latitude.

label	string
example: 1817
User visible label, such as the one of on the signage on the vehicle. See GTFS-realtime VehicleDescriptor label.

direction_id	integer
Direction in which trip is traveling: 0 or 1.

The meaning of direction_id varies based on the route. You can programmatically get the direction names from /routes /data/{index}/attributes/direction_names or /routes/{id} /data/attributes/direction_names.

Enum:
Array [ 2 ]
current_stop_sequence	integer
example: 8
Index of current stop along trip. See GTFS-realtime VehiclePosition current_stop_sequence

current_status	string
example: IN_TRANSIT_TO
Status of vehicle relative to the stops. See GTFS-realtime VehicleStopStatus.

Value	Description
INCOMING_AT	The vehicle is just about to arrive at the stop (on a stop display, the vehicle symbol typically flashes).
STOPPED_AT	The vehicle is standing at the stop.
IN_TRANSIT_TO	The vehicle has departed the previous stop and is in transit.
carriages	[{
occupancy_status	string
The degree of passenger occupancy for the vehicle. See GTFS-realtime OccupancyStatus.

Value	Description
MANY_SEATS_AVAILABLE	Not crowded: the vehicle has a large percentage of seats available.
FEW_SEATS_AVAILABLE	Some crowding: the vehicle has a small percentage of seats available.
STANDING_ROOM_ONLY	Standing room only: the vehicle can currently accommodate only standing passengers.
CRUSHED_STANDING_ROOM_ONLY	Crushed standing room: the vehicle can currently accommodate only standing passengers and has limited space for them.
FULL	Crowded: the vehicle is considered full by most measures, but may still be allowing passengers to board.
NOT_ACCEPTING_PASSENGERS	Not accepting passengers: the vehicle is not accepting passengers, the vehicle or carriage usually accepts passengers for boarding.
NO_DATA_AVAILABLE	No data available: the vehicle doesn’t have any occupancy data available at that time.
Enum:
Array [ 9 ]
occupancy_percentage	integer
Percentage of vehicle occupied, calculated via weight average

label	string
Carriage-specific label, used as an identifier

}]
x-nullable:true
minLength:0
example:List [ OrderedMap { "occupancy_status": "MANY_SEATS_AVAILABLE", "occupancy_percentage": 80, "label": "some-carriage" } ]
description:Carriage-level crowding details. See [GTFS-realtime multi_carriage_details](https://gtfs.org/realtime/reference/#message-CarriageDetails).
bearing	integer
example: 174
Bearing, in degrees, clockwise from True North, i.e., 0 is North and 90 is East. This can be the compass bearing, or the direction towards the next stop or intermediate location. See GTFS-realtime Position bearing.

}
}
Routes{
description:	
A page of RouteResource results

links	{
self	string
Link to this page of results

prev	string
Link to the previous page of results

next	string
Link to the next page of results

last	string
Link to the last page of results

first	string
Link to the first page of results

}
data*	[RouteResource{
description:	
Path a vehicle travels during service. See GTFS `routes.txt for the base specification.

type	string
The JSON-API resource type

relationships	{
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
type	integer
example: 1
Value	Name	Example
0	Light Rail	Green Line
1	Heavy Rail	Red Line
2	Commuter Rail	
3	Bus	
4	Ferry	
text_color	string
example: 000000
A legible color to use for text drawn against a background of the route’s color attribute. See GTFS routes.txt route_text_color.

sort_order	integer
Routes sort in ascending order

short_name	string
example: Red
This will often be a short, abstract identifier like "32", "100X", or “Green” that riders use to identify a route, but which doesn’t give any indication of what places the route serves. See GTFS routes.txt route_short_name.

long_name	string
example: Red Line
The full name of a route. This name is generally more descriptive than the short_name and will often include the route’s destination or stop. See GTFS routes.txt route_long_name.

fare_class	string
example: Free
Specifies the fare type of the route, which can differ from the service category.

direction_names	[string
x-nullable: true
The names of direction ids for this route in ascending ordering starting at 0 for the first index.

]
direction_destinations	[string
x-nullable: true
The destinations for direction ids for this route in ascending ordering starting at 0 for the first index.

]
description	string
example: Rapid Transit
Details about stops, schedule, and/or service. See
GTFS routes.txt route_desc.

color	string
example: FFFFFF
A color that corresponds to the route, such as the line color on a map." See GTFS routes.txt route_color.

}
}]
description:Content with [RouteResource](#routeresource) objects
}
TooManyRequests{
description:	
A JSON-API error document when rate limited

errors*	[{
description:	
A JSON-API error when rate limited

status	string
example: 429
The HTTP status code applicable to the problem

detail	string
example: You have exceeded your allowed usage rate.
Human-readable summary of the problem

code	string
example: rate_limited
An application-specific error code

}]
minItems:1
maxItems:1
}
StopResource{
description:	
Physical location where transit can pick-up or drop-off passengers. See https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stopstxt for more details and https://github.com/mbta/gtfs-documentation/blob/master/reference/gtfs.md#stopstxt for specific extensions.

type	string
The JSON-API resource type

relationships	{
parent_station	{
links	{
self	string
Relationship link for parent_station

related	string
Related parent_station link

}
data	{
type	string
Type of related parent_station resource

id	string
Related parent_station resource id

}
}
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
wheelchair_boarding	integer
example: 0
Whether there are any vehicles with wheelchair boarding or paths to stops that are wheelchair acessible: 0, 1, 2.

Wheelchair boarding (*/attributes/wheelchair_boarding) corresponds to GTFS wheelchair_boarding. The MBTA handles parent station inheritance itself, so value can be treated simply:

Value	Meaning
0	No Information
1	Accessible (if trip is wheelchair accessible)
2	Inaccessible
Enum:
Array [ 3 ]
vehicle_type	integer
x-nullable: true
example: 3
The type of transportation used at the stop. vehicle_type will be a valid routes.txt route_type value:

Value	Name	Example
0	Light Rail	Green Line
1	Heavy Rail	Red Line
2	Commuter Rail	
3	Bus	
4	Ferry	
platform_name	string
x-nullable: true
example: Red Line
A textual description of the platform or track. See MBTA extensions to GTFS.

platform_code	string
x-nullable: true
example: 5
A short code representing the platform/track (like a number or letter). See GTFS stops.txt platform_code.

on_street	string
x-nullable: true
example: Massachusetts Avenue
The street on which the stop is located.

name	string
example: Parker St @ Hagen Rd
Name of a stop or station in the local and tourist vernacular. See GTFS stops.txt `stop_name

municipality	string
x-nullable: true
example: Cambridge
The municipality in which the stop is located.

longitude	number
example: 42.316115
Longitude of the stop or station. Degrees East, in the WGS-84 coordinate system. See
GTFS stops.txt stop_lon.

location_type	integer
The type of the stop.

Value	Type	Description
0	Stop	A location where passengers board or disembark from a transit vehicle.
1	Station	A physical structure or area that contains one or more stops.
2	Station Entrance/Exit	A location where passengers can enter or exit a station from the street. The stop entry must also specify a parent_station value referencing the stop ID of the parent station for the entrance.
3	Generic Node	A location within a station, not matching any other location_type, which can be used to link together pathways defined in pathways.txt.
See also GTFS stops.txt location_type.

Enum:
Array [ 4 ]
latitude	number
example: -71.194994
Latitude of the stop or station. Degrees North, in the WGS-84 coordinate system. See GTFS stops.txt stop_lat.

description	string
x-nullable: true
example: Alewife - Red Line
Description of the stop. See GTFS stops.txt stop_desc.

at_street	string
x-nullable: true
example: Essex Street
The cross street at which the stop is located.

address	string
x-nullable: true
example: Alewife Brook Parkway and Cambridge Park Drive, Cambridge, MA 02140
A street address for the station. See MBTA extensions to GTFS.

}
}
Stop{
description:	
A JSON-API document with a single StopResource resource

links	{
self	string
the link that generated the current response document.

}
included	[{
type	string
The JSON-API resource type

id	string
The JSON-API resource ID

}]
description:Included resources
data*	StopResource{
description:	
Physical location where transit can pick-up or drop-off passengers. See https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stopstxt for more details and https://github.com/mbta/gtfs-documentation/blob/master/reference/gtfs.md#stopstxt for specific extensions.

type	string
The JSON-API resource type

relationships	{
parent_station	{
links	{
self	string
Relationship link for parent_station

related	string
Related parent_station link

}
data	{
type	string
Type of related parent_station resource

id	string
Related parent_station resource id

}
}
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
wheelchair_boarding	integer
example: 0
Whether there are any vehicles with wheelchair boarding or paths to stops that are wheelchair acessible: 0, 1, 2.

Wheelchair boarding (*/attributes/wheelchair_boarding) corresponds to GTFS wheelchair_boarding. The MBTA handles parent station inheritance itself, so value can be treated simply:

Value	Meaning
0	No Information
1	Accessible (if trip is wheelchair accessible)
2	Inaccessible
Enum:
Array [ 3 ]
vehicle_type	integer
x-nullable: true
example: 3
The type of transportation used at the stop. vehicle_type will be a valid routes.txt route_type value:

Value	Name	Example
0	Light Rail	Green Line
1	Heavy Rail	Red Line
2	Commuter Rail	
3	Bus	
4	Ferry	
platform_name	string
x-nullable: true
example: Red Line
A textual description of the platform or track. See MBTA extensions to GTFS.

platform_code	string
x-nullable: true
example: 5
A short code representing the platform/track (like a number or letter). See GTFS stops.txt platform_code.

on_street	string
x-nullable: true
example: Massachusetts Avenue
The street on which the stop is located.

name	string
example: Parker St @ Hagen Rd
Name of a stop or station in the local and tourist vernacular. See GTFS stops.txt `stop_name

municipality	string
x-nullable: true
example: Cambridge
The municipality in which the stop is located.

longitude	number
example: 42.316115
Longitude of the stop or station. Degrees East, in the WGS-84 coordinate system. See
GTFS stops.txt stop_lon.

location_type	integer
The type of the stop.

Value	Type	Description
0	Stop	A location where passengers board or disembark from a transit vehicle.
1	Station	A physical structure or area that contains one or more stops.
2	Station Entrance/Exit	A location where passengers can enter or exit a station from the street. The stop entry must also specify a parent_station value referencing the stop ID of the parent station for the entrance.
3	Generic Node	A location within a station, not matching any other location_type, which can be used to link together pathways defined in pathways.txt.
See also GTFS stops.txt location_type.

Enum:
Array [ 4 ]
latitude	number
example: -71.194994
Latitude of the stop or station. Degrees North, in the WGS-84 coordinate system. See GTFS stops.txt stop_lat.

description	string
x-nullable: true
example: Alewife - Red Line
Description of the stop. See GTFS stops.txt stop_desc.

at_street	string
x-nullable: true
example: Essex Street
The cross street at which the stop is located.

address	string
x-nullable: true
example: Alewife Brook Parkway and Cambridge Park Drive, Cambridge, MA 02140
A street address for the station. See MBTA extensions to GTFS.

}
}
}
Stops{
description:	
A page of StopResource results

links	{
self	string
Link to this page of results

prev	string
Link to the previous page of results

next	string
Link to the next page of results

last	string
Link to the last page of results

first	string
Link to the first page of results

}
data*	[StopResource{
description:	
Physical location where transit can pick-up or drop-off passengers. See https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stopstxt for more details and https://github.com/mbta/gtfs-documentation/blob/master/reference/gtfs.md#stopstxt for specific extensions.

type	string
The JSON-API resource type

relationships	{
parent_station	{
links	{
self	string
Relationship link for parent_station

related	string
Related parent_station link

}
data	{
type	string
Type of related parent_station resource

id	string
Related parent_station resource id

}
}
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
wheelchair_boarding	integer
example: 0
Whether there are any vehicles with wheelchair boarding or paths to stops that are wheelchair acessible: 0, 1, 2.

Wheelchair boarding (*/attributes/wheelchair_boarding) corresponds to GTFS wheelchair_boarding. The MBTA handles parent station inheritance itself, so value can be treated simply:

Value	Meaning
0	No Information
1	Accessible (if trip is wheelchair accessible)
2	Inaccessible
Enum:
Array [ 3 ]
vehicle_type	integer
x-nullable: true
example: 3
The type of transportation used at the stop. vehicle_type will be a valid routes.txt route_type value:

Value	Name	Example
0	Light Rail	Green Line
1	Heavy Rail	Red Line
2	Commuter Rail	
3	Bus	
4	Ferry	
platform_name	string
x-nullable: true
example: Red Line
A textual description of the platform or track. See MBTA extensions to GTFS.

platform_code	string
x-nullable: true
example: 5
A short code representing the platform/track (like a number or letter). See GTFS stops.txt platform_code.

on_street	string
x-nullable: true
example: Massachusetts Avenue
The street on which the stop is located.

name	string
example: Parker St @ Hagen Rd
Name of a stop or station in the local and tourist vernacular. See GTFS stops.txt `stop_name

municipality	string
x-nullable: true
example: Cambridge
The municipality in which the stop is located.

longitude	number
example: 42.316115
Longitude of the stop or station. Degrees East, in the WGS-84 coordinate system. See
GTFS stops.txt stop_lon.

location_type	integer
The type of the stop.

Value	Type	Description
0	Stop	A location where passengers board or disembark from a transit vehicle.
1	Station	A physical structure or area that contains one or more stops.
2	Station Entrance/Exit	A location where passengers can enter or exit a station from the street. The stop entry must also specify a parent_station value referencing the stop ID of the parent station for the entrance.
3	Generic Node	A location within a station, not matching any other location_type, which can be used to link together pathways defined in pathways.txt.
See also GTFS stops.txt location_type.

Enum:
Array [ 4 ]
latitude	number
example: -71.194994
Latitude of the stop or station. Degrees North, in the WGS-84 coordinate system. See GTFS stops.txt stop_lat.

description	string
x-nullable: true
example: Alewife - Red Line
Description of the stop. See GTFS stops.txt stop_desc.

at_street	string
x-nullable: true
example: Essex Street
The cross street at which the stop is located.

address	string
x-nullable: true
example: Alewife Brook Parkway and Cambridge Park Drive, Cambridge, MA 02140
A street address for the station. See MBTA extensions to GTFS.

}
}]
description:Content with [StopResource](#stopresource) objects
}
LiveFacilities{
description:	
A page of LiveFacilityResource results

links	{
self	string
Link to this page of results

prev	string
Link to the previous page of results

next	string
Link to the next page of results

last	string
Link to the last page of results

first	string
Link to the first page of results

}
data*	[LiveFacilityResource{
description:	
Live data about a given facility.

type	string
The JSON-API resource type

relationships	{
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
updated_at	string($date-time)
example: 2017-08-14T15:38:58-04:00
Time of last update

properties	[FacilityProperty{
description:	
Name/value pair for additional facility information

value	stringinteger
example: 197 Ivory St, Braintree, MA 02184
The value of the property

name	string
example: address
The name of the property

}]
description:A list of name/value pairs that apply to the facility. See [MBTA's facility documentation](https://www.mbta.com/developers/gtfs/f#facilities_properties_definitions) for more information on the possible names and values.
}
}]
description:Content with [LiveFacilityResource](#livefacilityresource) objects
}
FacilityResource{
description:	
Amenities at a station stop (*/relationships/stop) such as elevators, escalators, parking lots, and bike storage.

An MBTA extension. This spec is not yet finalized.

Accessibility
Riders with limited mobility can search any facility, either ELEVATOR or ESCALATOR, while riders that need wheelchair access can search for ELEVATOR only.

The lack of an ELEVATOR MAY NOT make a stop wheelchair inaccessible. Riders should check /stops/{id} /data/attributes/wheelchair_boarding is 1 to guarantee a path is available from the station entrance to the stop or 0 if it MAY be accessible. Completely avoid 2 as that is guaranteed to be INACCESSIBLE.

type	string
The JSON-API resource type

relationships	{
stop	{
links	{
self	string
Relationship link for stop

related	string
Related stop link

}
data	{
type	string
Type of related stop resource

id	string
Related stop resource id

}
}
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
type	string
example: ELEVATOR
The type of the facility.

Enum:
Array [ 18 ]
short_name	string
example: Ashmont platform to lobby
Short name of the facility

properties	[FacilityProperty{
description:	
Name/value pair for additional facility information

value	stringinteger
example: 197 Ivory St, Braintree, MA 02184
The value of the property

name	string
example: address
The name of the property

}]
description:A list of name/value pairs that apply to the facility. See [MBTA's facility documentation](https://www.mbta.com/developers/gtfs/f#facilities_properties_definitions) for more information on the possible names and values.
longitude	number
example: 42.316115
Longitude of the facility. Degrees East, in the WGS-84 coordinate system. See
[GTFS facilities.txt facility_lon]

long_name	string
example: SHAWMUT - Ashmont Bound Platform to Lobby
Name of the facility

latitude	number
example: -71.194994
Latitude of the facility. Degrees North, in the WGS-84 coordinate system. See [GTFS facilities.txt facility_lat]

}
}
RoutePattern{
description:	
A JSON-API document with a single RoutePatternResource resource

links	{
self	string
the link that generated the current response document.

}
included	[{
type	string
The JSON-API resource type

id	string
The JSON-API resource ID

}]
description:Included resources
data*	RoutePatternResource{
description:	
Information about the different variations of service that may be run within a single route_id, including when and how often they are operated.
See GTFS `route_patterns.txt for the base specification.

type	string
The JSON-API resource type

relationships	{
route	{
links	{
self	string
Relationship link for route

related	string
Related route link

}
data	{
type	string
Type of related route resource

id	string
Related route resource id

}
}
representative_trip	{
links	{
self	string
Relationship link for representative_trip

related	string
Related representative_trip link

}
data	{
type	string
Type of related representative_trip resource

id	string
Related representative_trip resource id

}
}
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
typicality	integer
Explains how common the route pattern is. For the MBTA, this is within the context of the entire route. Current valid values are:

Value	Description
0	Not defined
1	Typical. Pattern is common for the route. Most routes will have only one such pattern per direction. A few routes may have more than 1, such as the Red Line (with one branch to Ashmont and another to Braintree); routes with more than 2 are rare.
2	Pattern is a deviation from the regular route.
3	Pattern represents a highly atypical pattern for the route, such as a special routing which only runs a handful of times per day.
4	Diversions from normal service, such as planned detours, bus shuttles, or snow routes.
5	Canonical trip patterns.
Enum:
Array [ 6 ]
time_desc	string
x-nullable: true
example: Early mornings only
User-facing description of when the route pattern operate. Not all route patterns will include a time description

sort_order	integer
Can be used to order the route patterns in a way which is ideal for presentation to customers.
Route patterns with smaller sort_order values should be displayed before those with larger values.

name	string
example: Forge Park/495 - South Station via Fairmount
User-facing description of where trips on the route pattern serve.
These names are published in the form
Destination,
Destination via Street or Landmark,
Origin - Destination,
or Origin - Destination via Street or Landmark.
Note that names for bus and subway route patterns currently do not include the origin location,
but will in the future.

direction_id	integer
Direction in which trip is traveling: 0 or 1.

The meaning of direction_id varies based on the route. You can programmatically get the direction names from /routes /data/{index}/attributes/direction_names or /routes/{id} /data/attributes/direction_names.

Enum:
Array [ 2 ]
canonical	boolean
Indicates whether or not the route pattern can be considered canonical and the default set of stops
for the given route and direction.

Value	Description
true	Route pattern should be considered canonical for this route in this direction. If branching regularly occurs, this route-direction may have more than one canonical pattern.
false	Route pattern should be not considered canonical for this route in this direction.
}
}
}
BadRequest{
description:	
A JSON-API error document when the server cannot or will not process the request due to something that is perceived to be a client error.

errors*	[{
description:	
A JSON-API error when a bad request is received

status	string
example: 400
The HTTP status code applicable to the problem

source	{
description:	
A JSON-API error source

parameter	string
example: sort
The name of parameter that caused the error

}
detail	string
example: Invalid sort key
A short, human-readable summary of the problem

code	string
example: bad_request
An application-specific error code

}]
minItems:1
maxItems:1
}
Lines{
description:	
A page of LineResource results

links	{
self	string
Link to this page of results

prev	string
Link to the previous page of results

next	string
Link to the next page of results

last	string
Link to the last page of results

first	string
Link to the first page of results

}
data*	[LineResource{
description:	
Line represents a combination of routes

type	string
The JSON-API resource type

relationships	{
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
text_color	string
example: 000000
This field can be used to specify a legible color to use for text drawn against a background of line_color. The color must be provided as a six-character hexadecimal number, for example, FFD700.

sort_order	integer
Lines sort in ascending order

short_name	string
example: CT2
Short, public-facing name for the group of routes represented in this line

long_name	string
example: Sullivan - Ruggles
Lengthier, public-facing name for the group of routes represented in this line

color	string
example: FFFFFF
In systems that have colors assigned to lines, the route_color field defines a color that corresponds to a line. The color must be provided as a six-character hexadecimal number, for example, 00FFFF.

}
}]
description:Content with [LineResource](#lineresource) objects
}
Vehicles{
description:	
A page of VehicleResource results

links	{
self	string
Link to this page of results

prev	string
Link to the previous page of results

next	string
Link to the next page of results

last	string
Link to the last page of results

first	string
Link to the first page of results

}
data*	[VehicleResource{
description:	
Current state of a vehicle on a trip.

type	string
The JSON-API resource type

relationships	{
trip	{
links	{
self	string
Relationship link for trip

related	string
Related trip link

}
data	{
type	string
Type of related trip resource

id	string
Related trip resource id

}
}
stop	{
links	{
self	string
Relationship link for stop

related	string
Related stop link

}
data	{
type	string
Type of related stop resource

id	string
Related stop resource id

}
}
route	{
links	{
self	string
Relationship link for route

related	string
Related route link

}
data	{
type	string
Type of related route resource

id	string
Related route resource id

}
}
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
updated_at	string($date-time)
example: 2017-08-14T16:04:44-04:00
Time at which vehicle information was last updated. Format is ISO8601.

speed	number
example: 16
Speed that the vehicle is traveling in meters per second. See GTFS-realtime Position speed.

revenue_status	string
example: REVENUE
Value	Description
"REVENUE"	Indicates that the associated trip is accepting passengers.
"NON_REVENUE"	Indicates that the associated trip is not accepting passengers.
occupancy_status	string
x-nullable: true
example: FEW_SEATS_AVAILABLE
The degree of passenger occupancy for the vehicle. See GTFS-realtime OccupancyStatus.

Value	Description
MANY_SEATS_AVAILABLE	Not crowded: the vehicle has a large percentage of seats available.
FEW_SEATS_AVAILABLE	Some crowding: the vehicle has a small percentage of seats available.
STANDING_ROOM_ONLY	Standing room only: the vehicle can currently accommodate only standing passengers.
CRUSHED_STANDING_ROOM_ONLY	Crushed standing room: the vehicle can currently accommodate only standing passengers and has limited space for them.
FULL	Crowded: the vehicle is considered full by most measures, but may still be allowing passengers to board.
NOT_ACCEPTING_PASSENGERS	Not accepting passengers: the vehicle is not accepting passengers, the vehicle or carriage usually accepts passengers for boarding.
NO_DATA_AVAILABLE	No data available: the vehicle doesn’t have any occupancy data available at that time.
longitude	number
example: 42.32941818237305
Longitude of the vehicle’s current position. Degrees East, in the WGS-84 coordinate system. See GTFS-realtime Position longitude.

latitude	number
example: -71.27239990234375
Latitude of the vehicle’s current position. Degrees North, in the WGS-84 coordinate system. See GTFS-realtime Position latitude.

label	string
example: 1817
User visible label, such as the one of on the signage on the vehicle. See GTFS-realtime VehicleDescriptor label.

direction_id	integer
Direction in which trip is traveling: 0 or 1.

The meaning of direction_id varies based on the route. You can programmatically get the direction names from /routes /data/{index}/attributes/direction_names or /routes/{id} /data/attributes/direction_names.

Enum:
Array [ 2 ]
current_stop_sequence	integer
example: 8
Index of current stop along trip. See GTFS-realtime VehiclePosition current_stop_sequence

current_status	string
example: IN_TRANSIT_TO
Status of vehicle relative to the stops. See GTFS-realtime VehicleStopStatus.

Value	Description
INCOMING_AT	The vehicle is just about to arrive at the stop (on a stop display, the vehicle symbol typically flashes).
STOPPED_AT	The vehicle is standing at the stop.
IN_TRANSIT_TO	The vehicle has departed the previous stop and is in transit.
carriages	[{
occupancy_status	string
The degree of passenger occupancy for the vehicle. See GTFS-realtime OccupancyStatus.

Value	Description
MANY_SEATS_AVAILABLE	Not crowded: the vehicle has a large percentage of seats available.
FEW_SEATS_AVAILABLE	Some crowding: the vehicle has a small percentage of seats available.
STANDING_ROOM_ONLY	Standing room only: the vehicle can currently accommodate only standing passengers.
CRUSHED_STANDING_ROOM_ONLY	Crushed standing room: the vehicle can currently accommodate only standing passengers and has limited space for them.
FULL	Crowded: the vehicle is considered full by most measures, but may still be allowing passengers to board.
NOT_ACCEPTING_PASSENGERS	Not accepting passengers: the vehicle is not accepting passengers, the vehicle or carriage usually accepts passengers for boarding.
NO_DATA_AVAILABLE	No data available: the vehicle doesn’t have any occupancy data available at that time.
Enum:
Array [ 9 ]
occupancy_percentage	integer
Percentage of vehicle occupied, calculated via weight average

label	string
Carriage-specific label, used as an identifier

}]
x-nullable:true
minLength:0
example:List [ OrderedMap { "occupancy_status": "MANY_SEATS_AVAILABLE", "occupancy_percentage": 80, "label": "some-carriage" } ]
description:Carriage-level crowding details. See [GTFS-realtime multi_carriage_details](https://gtfs.org/realtime/reference/#message-CarriageDetails).
bearing	integer
example: 174
Bearing, in degrees, clockwise from True North, i.e., 0 is North and 90 is East. This can be the compass bearing, or the direction towards the next stop or intermediate location. See GTFS-realtime Position bearing.

}
}]
description:Content with [VehicleResource](#vehicleresource) objects
}
PredictionResource{
description:	
The predicted arrival time (/*/attributes/arrival_time) and departure time (*/attributes/departure_time) to/from a stop (*/relationships/stop/data/id) at a given sequence (*/attriutes/stop_sequence) along a trip (*/relationships/trip/data/id) going a direction (*/attributes/direction_id) along a route (*/relationships/route/data/id).

See GTFS Realtime FeedMesage FeedEntity TripUpdate TripDescriptor
See GTFS Realtime FeedMesage FeedEntity TripUpdate StopTimeUpdate

type	string
The JSON-API resource type

relationships	{
vehicle	{
links	{
self	string
Relationship link for vehicle

related	string
Related vehicle link

}
data	{
type	string
Type of related vehicle resource

id	string
Related vehicle resource id

}
}
trip	{
links	{
self	string
Relationship link for trip

related	string
Related trip link

}
data	{
type	string
Type of related trip resource

id	string
Related trip resource id

}
}
stop	{
links	{
self	string
Relationship link for stop

related	string
Related stop link

}
data	{
type	string
Type of related stop resource

id	string
Related stop resource id

}
}
schedule	{
links	{
self	string
Relationship link for schedule

related	string
Related schedule link

}
data	{
type	string
Type of related schedule resource

id	string
Related schedule resource id

}
}
route	{
links	{
self	string
Relationship link for route

related	string
Related route link

}
data	{
type	string
Type of related route resource

id	string
Related route resource id

}
}
alerts	{
links	{
self	string
Relationship link for alerts

related	string
Related alerts link

}
data	[{
type	string
Type of related alerts resource

id	string
Related alerts resource id

}]
}
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
update_type	string
Value	Description
"MID_TRIP"	Prediction is for the trip the vehicle is currently on.
"AT_TERMINAL"	Prediction is for a terminal trip that hasn’t started yet.
"REVERSE_TRIP"	Prediction is for a trip that hasn’t started and the train that will be servicing this trip is currently in the middle of a previous trip.
stop_sequence	integer
x-nullable: true
example: 19
The sequence the stop (*/relationships/stop/data/id) is arrived at during the trip (*/relationships/trip/data/id). The stop sequence is monotonically increasing along the trip, but the stop_sequence along the trip are not necessarily consecutive.

See GTFS Realtime FeedMesage FeedEntity TripUpdate StopTimeUpdate stop_sequence.

status	string
example: Approaching
Status of the schedule

schedule_relationship	string
x-nullable: true
example: UNSCHEDULED
How the predicted stop relates to the Model.Schedule.t stops.

Value	Description
"ADDED"	An extra trip that was added in addition to a running schedule, for example, to replace a broken vehicle or to respond to sudden passenger load. See GTFS Realtime FeedMesage FeedEntity TripUpdate TripDescriptor ScheduleRelationship ADDED
"CANCELLED"	A trip that existed in the schedule but was removed. See GTFS Realtime FeedMesage FeedEntity TripUpdate TripDescriptor ScheduleRelationship CANCELED
"NO_DATA"	No data is given for this stop. It indicates that there is no realtime information available. See GTFS Realtime FeedMesage FeedEntity TripUpdate StopTimeUpdate ScheduleRelationship NO_DATA
"SKIPPED"	The stop was originally scheduled, but was skipped. See GTFS Realtime FeedMesage FeedEntity TripUpdate StopTimeUpdate ScheduleRelationship
"UNSCHEDULED"	A trip that is running with no schedule associated to it. See GTFS Realtime FeedMesage FeedEntity TripUpdate TripDescriptor ScheduleRelationship UNSCHEDULED
null	Stop was scheduled. See GTFS Realtime FeedMesage FeedEntity TripUpdate TripDescriptor ScheduleRelationship SCHEDULED
See GTFS Realtime FeedMesage FeedEntity TripUpdate TripDescriptor ScheduleRelationship
See GTFS Realtime FeedMesage FeedEntity TripUpdate StopTimeUpdate ScheduleRelationship

revenue_status	string
example: REVENUE
Value	Description
"REVENUE"	Indicates that the associated trip is accepting passengers.
"NON_REVENUE"	Indicates that the associated trip is not accepting passengers.
direction_id	integer
Direction in which trip is traveling: 0 or 1.

The meaning of direction_id varies based on the route. You can programmatically get the direction names from /routes /data/{index}/attributes/direction_names or /routes/{id} /data/attributes/direction_names.

Enum:
Array [ 2 ]
departure_uncertainty	integernull
example: 60
Uncertainty value for the departure time prediction.

Bus and Commuter Rail
See entities tripUpdate stop_time_updates departure uncertainty

Value	Description
< 300 or omitted	Valid real-time prediction
300	Real-time prediction not available. This code is primarily used when a vehicle has not yet been assigned to the trip, (i.e. because the block has not started yet). It is a schedule-based prediction, but Swiftly adjusts the schedule-based prediction time using observed historical travel times to make predictions more accurate than the schedule
301	Valid real-time prediction, though the bus appears to be stalled or significantly delayed and predictions are not as accurate
> 301	Likely invalid prediction, recommend not showing anything (and not showing scheduled time), very rare situation
Subway/Light Rail
See GTFS Realtime FeedMessage FeedEntity TripUpdate StopTimeUpdate departure.

Value	Description
60	A trip that has already started
120	A terminal/reverse trip departure for a trip that has NOT started and a train is awaiting departure at the origin
360	A terminal/reverse trip for a trip that has NOT started and a train is completing a previous trip
departure_time	string
x-nullable: true
example: 2017-08-14T15:38:58-04:00
When the vehicle is now predicted to depart. null if the last stop (*/relationships/stop/data/id) on the trip (*/relationships/trip/data/id). See GTFS Realtime FeedMessage FeedEntity TripUpdate StopTimeUpdate departure.
Format is ISO8601.

arrival_uncertainty	integernull
example: 60
Uncertainty value for the arrival time prediction.

Bus and Commuter Rail
See entities tripUpdate stop_time_updates arrival uncertainty

Value	Description
< 300 or omitted	Valid real-time prediction
300	Real-time prediction not available. This code is primarily used when a vehicle has not yet been assigned to the trip, (i.e. because the block has not started yet). It is a schedule-based prediction, but Swiftly adjusts the schedule-based prediction time using observed historical travel times to make predictions more accurate than the schedule
301	Valid real-time prediction, though the bus appears to be stalled or significantly delayed and predictions are not as accurate
> 301	Likely invalid prediction, recommend not showing anything (and not showing scheduled time), very rare situation
Subway/Light Rail
See GTFS Realtime FeedMessage FeedEntity TripUpdate StopTimeUpdate arrival.

Value	Description
60	A trip that has already started
120	A terminal/reverse trip departure for a trip that has NOT started and a train is awaiting departure at the origin
360	A terminal/reverse trip for a trip that has NOT started and a train is completing a previous trip
arrival_time	string
x-nullable: true
example: 2017-08-14T15:38:58-04:00
When the vehicle is now predicted to arrive. null if the first stop (*/relationships/stop/data/id) on the trip (*/relationships/trip/data/id). See GTFS Realtime FeedMessage FeedEntity TripUpdate StopTimeUpdate arrival.
Format is ISO8601.

}
}
Trips{
description:	
A page of TripResource results

links	{
self	string
Link to this page of results

prev	string
Link to the previous page of results

next	string
Link to the next page of results

last	string
Link to the last page of results

first	string
Link to the first page of results

}
data*	[TripResource{
description:	
Representation of the journey of a particular vehicle through a given set of stops. See GTFS trips.txt

type	string
The JSON-API resource type

relationships	{
shape	{
links	{
self	string
Relationship link for shape

related	string
Related shape link

}
data	{
type	string
Type of related shape resource

id	string
Related shape resource id

}
}
service	{
links	{
self	string
Relationship link for service

related	string
Related service link

}
data	{
type	string
Type of related service resource

id	string
Related service resource id

}
}
route_pattern	{
links	{
self	string
Relationship link for route_pattern

related	string
Related route_pattern link

}
data	{
type	string
Type of related route_pattern resource

id	string
Related route_pattern resource id

}
}
route	{
links	{
self	string
Relationship link for route

related	string
Related route link

}
data	{
type	string
Type of related route resource

id	string
Related route resource id

}
}
occupancy	{
links	{
self	string
Relationship link for occupancy

related	string
Related occupancy link

}
data	{
type	string
Type of related occupancy resource

id	string
Related occupancy resource id

}
}
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
wheelchair_accessible	integer
example: 1
Indicator of wheelchair accessibility: 0, 1, 2

Wheelchair accessibility (*/attributes/wheelchair_accessible) as defined in GTFS:

Value	Meaning
0	No information
1	Accessible (at stops allowing wheelchair_boarding)
2	Inaccessible
Enum:
Array [ 3 ]
revenue_status	string
example: REVENUE
Value	Description
"REVENUE"	Indicates that the associated trip is accepting passengers.
"NON_REVENUE"	Indicates that the associated trip is not accepting passengers.
name	string
example: 596
The text that appears in schedules and sign boards to identify the trip to passengers, for example, to identify train numbers for commuter rail trips. See GTFS trips.txt trip_short_name

headsign	string
example: Harvard
The text that appears on a sign that identifies the trip’s destination to passengers. See GTFS trips.txt trip_headsign.

direction_id	integer
Direction in which trip is traveling: 0 or 1.

The meaning of direction_id varies based on the route. You can programmatically get the direction names from /routes /data/{index}/attributes/direction_names or /routes/{id} /data/attributes/direction_names.

Enum:
Array [ 2 ]
block_id	string
example: 1070
ID used to group sequential trips with the same vehicle for a given service_id. See GTFS trips.txt block_id

bikes_allowed	integer
example: 1
Indicator of whether or not bikes are allowed on this trip: 0, 1, 2

Bikes allowed (*/attributes/bikes_allowed) as defined in GTFS:

Value	Meaning
0	No information
1	Vehicle being used on this particular trip can accommodate at least one bicycle
2	No bicycles are allowed on this trip
Enum:
Array [ 3 ]
}
}]
description:Content with [TripResource](#tripresource) objects
}
Alert{
description:	
A JSON-API document with a single AlertResource resource

links	{
self	string
the link that generated the current response document.

}
included	[{
type	string
The JSON-API resource type

id	string
The JSON-API resource ID

}]
description:Included resources
data*	AlertResource{
description:	
An effect (enumerated in */attributes/effect and human-readable in */attributes/service_effect) on a provided service (facility, route, route type, stop and/or trip in /*/attributes/informed_entity) described by a banner (*/attributes/banner), short header (*/attributes/short_header), header */attributes/header, description (*/attributes/description), image (*/attributes/image), and image alternative text (*/attributes/image_alternative_text) that is active for one or more periods(*/attributes/active_period) caused by a cause (*/attribute/cause) that somewhere in its lifecycle (enumerated in */attributes/lifecycle and human-readable in */attributes/timeframe).

See GTFS Realtime FeedMessage FeedEntity Alert

Descriptions
There are 7 descriptive attributes.

JSON pointer	Usage
*/attributes/banner	Display as alert across application/website
*/attributes/short_header	When */attributes/header is too long to display
*/attributes/header	Used before showing and prepended to */attributes/description
*/attributes/description	Used when user asks to expand alert.
*/attributes/image	URL to descriptive image.
*/attributes/image_alternative_text	Text that describes image linked in url
Effect
JSON pointer	
*/attributes/effect	Enumerated
*/attributes/service_effect	Human-readable
Timeline
There are 3 timeline related attributes

JSON pointer	Description
*/attributes/active_period	Exact Date/Time ranges alert is active
*/attributes/lifecycle	Enumerated, machine-readable description of */attributes/active_period
*/attributes/timeframe	Human-readable description of */attributes/active_period
type	string
The JSON-API resource type

relationships	{
facility	{
links	{
self	string
Relationship link for facility

related	string
Related facility link

}
data	{
type	string
Type of related facility resource

id	string
Related facility resource id

}
}
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
url	string
x-nullable: true
example: http://www.mbta.com/uploadedfiles/Documents/Schedules_and_Maps/Commuter_Rail/fairmount.pdf?led=6/3/2017%201:22:09%20AM
A URL for extra details, such as outline construction or maintenance plans.

updated_at	string($date-time)
example: 2017-08-14T14:54:01-04:00
Date/Time alert last updated. Format is ISO8601.

timeframe	string
x-nullable: true
example: Ongoing
Summarizes when an alert is in effect.

short_header	string
example: All weekend Fairmount Line trains will be bused between Morton St. & Readville due to construction of Blue Hill Ave Station.
A shortened version of */attributes/header.

severity	integer
minimum: 0
maximum: 10
example: 10
How severe the alert is from least (0) to most (10) severe.

service_effect	string
example: Minor Route 216 delay
Summarizes the service and the impact to that service.

lifecycle	string
example: Ongoing
Identifies whether alert is a new or old, in effect or upcoming.

Value
"NEW"
"ONGOING"
"ONGOING_UPCOMING"
"UPCOMING"
informed_entity	[InformedEntity{
description:	
An entity affected by an alert. At least one of the fields other than activities will be non-null. The affected entity is the intersection of these fields, not the union: if stop and route both have values, the alert does not affect the entire route.

See GTFS Realtime FeedMessage FeedEntity Alert EntitySelector.

activities - The activities affected.
direction_id - The direction of the affected trip. See GTFS trips.txt direction_id.
facility - The facility affected.
route - The route affected. See GTFS routes.txt route_id
route_type - The type of route affected. If present alone, indicates the entire mode of transit is affected. See GTFS routes.txt route_type
stop - The stop affected. See GTFS stops.txt stop_id
trip - The trip affected. See GTFS trips.txt trip_id
trip	string
x-nullable: true
example: CR-Weekday-Spring-17-517
id of the affected Trip.

stop	string
x-nullable: true
example: Auburndale
id of the affected Stop.

route_type	integer
x-nullable: true
example: 2
type of the affected Route.

Value	Name	Example
0	Light Rail	Green Line
1	Heavy Rail	Red Line
2	Commuter Rail	
3	Bus	
4	Ferry	
route	string
x-nullable: true
example: CR-Worcester
id of the affected Route.

facility	string
x-nullable: true
example: 405
id of the affected Facility.

direction_id	integer
x-nullable: true
example: 0
direction_id of the affected Trip.

The meaning of direction_id varies based on the route. You can programmatically get the direction names from /routes /data/{index}/attributes/direction_names or /routes/{id} /data/attributes/direction_names.

Enum:
Array [ 2 ]
activities	[Activitystring
example: BOARD
An activity affected by an alert.

Value	Description
"BOARD"	Boarding a vehicle. Any passenger trip includes boarding a vehicle and exiting from a vehicle.
"BRINGING_BIKE"	Bringing a bicycle while boarding or exiting.
"EXIT"	Exiting from a vehicle (disembarking). Any passenger trip includes boarding a vehicle and exiting a vehicle.
"PARK_CAR"	Parking a car at a garage or lot in a station.
"RIDE"	Riding through a stop without boarding or exiting… Not every passenger trip will include this – a passenger may board at one stop and exit at the next stop.
"STORE_BIKE"	Storing a bicycle at a station.
"USING_ESCALATOR"	Using an escalator while boarding or exiting (should only be used for customers who specifically want to avoid stairs.)
"USING_WHEELCHAIR"	Using a wheelchair while boarding or exiting. Note that this applies to something that specifically affects customers who use a wheelchair to board or exit; a delay should not include this as an affected activity unless it specifically affects customers using wheelchairs.
]
example:List [ "BOARD", "EXIT" ]
description:Activities affected by this alert. If an entity is a station platform, and the alert only impacts those boarding at that platform and no one else, and the activity `"BOARD"` represents customers boarding at the informed entity, then the entity includes `activities` `["BOARD"]`. If the alert affected customers exiting at the platform too, then `activities` is `["BOARD", "EXIT"]`. It should be noted that the `activities` array includes activities that are specifically affected. Thus if there were activities `"BOARD"`, `"EXIT"`, and `"USING_WHEELCHAIR"` [to board or exit], and a station were closed, then the `activities` array would include `"BOARD"` and `"EXIT"` but it would not be necessary to include the activity `"USING_WHEELCHAIR"`. Any rider entering the station who is `"USING_WHEELCHAIR"` is also a rider who `"BOARD"`s. Using a wheelchair to board is not specifically affected.
}]
description:Entities affected by this alert.
image_alternative_text	string
x-nullable: true
example: Shuttle service beginning at North Quincy and ending at Braintree
Text describing the appearance of the linked image in the image field.

image	string
x-nullable: true
example: http://example.com/alert_image.png
URL of an image to be displayed alongside alert.

header	string
example: Starting 6/3, all weekend Fairmount Line trains will be bused between Morton St. and Readville in both directions due to construction of the new Blue Hill Avenue Station.
This plain-text string will be highlighted, for example in boldface. See GTFS Realtime FeedMessage FeedEntity Alert header_text

effect_name	string
example: Delay
Name of the alert

effect	string
example: ACCESS_ISSUE
The effect of this problem on the affected entity.

Value
"ACCESS_ISSUE"
"ADDITIONAL_SERVICE"
"AMBER_ALERT"
"BIKE_ISSUE"
"CANCELLATION"
"DELAY"
"DETOUR"
"DOCK_CLOSURE"
"DOCK_ISSUE"
"ELEVATOR_CLOSURE"
"ESCALATOR_CLOSURE"
"EXTRA_SERVICE"
"FACILITY_ISSUE"
"MODIFIED_SERVICE"
"NO_SERVICE"
"OTHER_EFFECT"
"PARKING_CLOSURE"
"PARKING_ISSUE"
"POLICY_CHANGE"
"SCHEDULE_CHANGE"
"SERVICE_CHANGE"
"SHUTTLE"
"SNOW_ROUTE"
"STATION_CLOSURE"
"STATION_ISSUE"
"STOP_CLOSURE"
"STOP_MOVE"
"STOP_MOVED"
"SUMMARY"
"SUSPENSION"
"TRACK_CHANGE"
"UNKNOWN_EFFECT"
See GTFS Realtime FeedMessage FeedEntity Alert effect

Enum:
Array [ 32 ]
duration_certainty	string
example: UNKNOWN
Value
"UNKNOWN"
"KNOWN"
"ESTIMATED"
Indicates whether an alert has a KNOWN, ESTIMATED, or UNKNOWN duration. KNOWN duration_certainty alerts are expected to end at the specified end time, ESTIMATED duration_certainty alerts have an estimated end time, and UNKNOWN duration_certainty alerts do not have a known or estimated end time.

Enum:
Array [ 3 ]
description	string
x-nullable: true
example: If entering the station, cross Tremont Street to the Boston Common and use Park Street Elevator 978 to the Green Line westbound platform. Red Line platform access is available via the elevator beyond the fare gates. If exiting the station, please travel down the Winter Street Concourse toward Downtown Crossing Station, exit through the fare gates, and take Downtown Crossing Elevator 892 to the street level.
This plain-text string will be formatted as the body of the alert (or shown on an explicit “expand” request by the user). The information in the description should add to the information of the header. See GTFS Realtime FeedMessage FeedEntity Alert description_text

created_at	string($date-time)
example: 2017-08-14T14:54:01-04:00
Date/Time alert created. Format is ISO8601.

cause	string
example: ACCIDENT
What is causing the alert.

Value
"ACCIDENT"
"AMTRAK"
"AN_EARLIER_MECHANICAL_PROBLEM"
"AN_EARLIER_SIGNAL_PROBLEM"
"AUTOS_IMPEDING_SERVICE"
"COAST_GUARD_RESTRICTION"
"CONGESTION"
"CONSTRUCTION"
"CROSSING_MALFUNCTION"
"DEMONSTRATION"
"DISABLED_BUS"
"DISABLED_TRAIN"
"DRAWBRIDGE_BEING_RAISED"
"ELECTRICAL_WORK"
"FIRE"
"FOG"
"FREIGHT_TRAIN_INTERFERENCE"
"HAZMAT_CONDITION"
"HEAVY_RIDERSHIP"
"HIGH_WINDS"
"HOLIDAY"
"HURRICANE"
"ICE_IN_HARBOR"
"MAINTENANCE"
"MECHANICAL_PROBLEM"
"MEDICAL_EMERGENCY"
"PARADE"
"POLICE_ACTION"
"POWER_PROBLEM"
"SEVERE_WEATHER"
"SIGNAL_PROBLEM"
"SLIPPERY_RAIL"
"SNOW"
"SPECIAL_EVENT"
"SPEED_RESTRICTION"
"SWITCH_PROBLEM"
"TIE_REPLACEMENT"
"TRACK_PROBLEM"
"TRACK_WORK"
"TRAFFIC"
"UNRULY_PASSENGER"
"WEATHER"
See GTFS Realtime FeedMessage FeedEntity Alert Cause

Enum:
Array [ 42 ]
banner	string
x-nullable: true
example: All service suspended due to severe weather
Set if alert is meant to be displayed prominently, such as the top of every page.

active_period	[ActivePeriod{
description:	
Start and End dates for active alert

start	string($date-time)
example: 2017-08-14T14:54:01-04:00
Start Date. Format is ISO8601.

end	string($date-time)
x-nullable: true
example: 2017-08-14T14:54:01-04:00
End Date. Format is ISO8601.

}]
description:Date/Time ranges when alert is active. See [GTFS Realtime `FeedMessage` `FeedEntity` `Alert` `active_period`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-alert).
}
}
}
Shape{
description:	
A JSON-API document with a single ShapeResource resource

links	{
self	string
the link that generated the current response document.

}
included	[{
type	string
The JSON-API resource type

id	string
The JSON-API resource ID

}]
description:Included resources
data*	ShapeResource{
description:	
Sequence of geographic points representing a path vehicles will travel on a trip. See GTFS shapes.txt.

type	string
The JSON-API resource type

relationships	{
}
links	{
}
id	string
The JSON-API resource ID

attributes	{
polyline	string
The sequence of points in Encoded Polyline Algorithm Format.
Libraries for decoding polylines are available in many languages, for example:

Elixir
JavaScript
Python
}
}
}